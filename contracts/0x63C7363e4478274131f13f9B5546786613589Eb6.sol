contract main {




// =====================  Runtime code  =====================


#
#  - sub_6b69649b(?)
#
address owner;
address sub_fddc93caAddress;
address sub_968b6377Address;
address bnbTokenAddress;
address busdTokenAddress;
address sub_8e6e9244Address;

function bnbToken() payable {
    return bnbTokenAddress
}

function owner() payable {
    return owner
}

function sub_8e6e9244(?) payable {
    return sub_8e6e9244Address
}

function sub_968b6377(?) payable {
    return sub_968b6377Address
}

function busdToken() payable {
    return busdTokenAddress
}

function sub_fddc93ca(?) payable {
    return sub_fddc93caAddress
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function sub_7ecb16a3(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    bnbTokenAddress = address(arg1)
}

function sub_e987f8df(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    busdTokenAddress = address(arg1)
}

function sub_07b219b1(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_968b6377Address = address(arg1)
}

function sub_7daea4de(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_fddc93caAddress = address(arg1)
}

function sub_f996de3b(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_8e6e9244Address = address(arg1)
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function sub_060f4915(?) payable {
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s)
    s = 10
    t = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if s > -1 / s:
            revert with 'NH{q', 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = t * s
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s)
        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]))
    u = 10
    v = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if u > -1 / u:
            revert with 'NH{q', 17
        if not bool(idx):
            u = u * u
            v = v
            idx = uint255(idx) * 0.5
            continue 
        u = u * u
        v = v * u
        idx = uint255(idx) * 0.5
        continue 
    if v > -1 / u:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u)
    if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 18
    if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if not v * u:
        revert with 'NH{q', 18
    return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u)
}

function sub_3d7deb5c(?) payable {
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            return (1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            return (1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s:
                revert with 'NH{q', 18
            if 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s:
                revert with 'NH{q', 17
            return (1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s:
            revert with 'NH{q', 18
        if 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s:
            revert with 'NH{q', 17
        return (1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            return (10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            return (10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s:
                revert with 'NH{q', 18
            if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s:
                revert with 'NH{q', 17
            return (10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s:
            revert with 'NH{q', 18
        if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s:
            revert with 'NH{q', 17
        return (10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]))
    s = 10
    t = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if s > -1 / s:
            revert with 'NH{q', 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = t * s
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 18
            if t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            return (t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * t * s)
        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 18
        if t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        return (t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            return (t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s)
        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        if t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 17
        return (t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s)
    u = 10
    v = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if u > -1 / u:
            revert with 'NH{q', 17
        if not bool(idx):
            u = u * u
            v = v
            idx = uint255(idx) * 0.5
            continue 
        u = u * u
        v = v * u
        idx = uint255(idx) * 0.5
        continue 
    if v > -1 / u:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u:
            revert with 'NH{q', 18
        if t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u:
            revert with 'NH{q', 17
        return (t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u * t * s)
    if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 18
    if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if not v * u:
        revert with 'NH{q', 18
    if not Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u:
        revert with 'NH{q', 18
    if t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u:
        revert with 'NH{q', 17
    return (t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u * t * s)
}

function sub_009d9e79(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s)
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]))
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u > -1 / arg1:
            revert with 'NH{q', 17
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s / 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u / 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u / 10^uint8(ext_call.return_data[0]))
    s = 10
    t = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if s > -1 / s:
            revert with 'NH{q', 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = t * s
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / v * u / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / v * u / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / v * u / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / v * u / t * s)
    u = 10
    v = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if u > -1 / u:
            revert with 'NH{q', 17
        if not bool(idx):
            u = u * u
            v = v
            idx = uint255(idx) * 0.5
            continue 
        u = u * u
        v = v * u
        idx = uint255(idx) * 0.5
        continue 
    if v > -1 / u:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / 10^uint8(ext_call.return_data[0]) / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / 10^uint8(ext_call.return_data[0]) / t * s)
    w = 10
    x = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if w > -1 / w:
            revert with 'NH{q', 17
        if not bool(idx):
            w = w * w
            x = x
            idx = uint255(idx) * 0.5
            continue 
        w = w * w
        x = x * w
        idx = uint255(idx) * 0.5
        continue 
    if x > -1 / w:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not x * w:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u / x * w > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u / x * w / t * s)
    if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 18
    if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if not x * w:
        revert with 'NH{q', 18
    if arg1 and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u / x * w > -1 / arg1:
        revert with 'NH{q', 17
    if not t * s:
        revert with 'NH{q', 18
    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u / x * w / t * s)
}

function sub_8e2f5731(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s:
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s:
                    revert with 'NH{q', 17
                if arg1 and 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s:
                revert with 'NH{q', 18
            if 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s:
                revert with 'NH{q', 17
            if arg1 and 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s:
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s:
                    revert with 'NH{q', 17
                if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s:
                revert with 'NH{q', 18
            if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s:
                revert with 'NH{q', 17
            if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 18
                if t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 18
            if t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if arg1 and t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * t * s > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if arg1 and t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u:
                revert with 'NH{q', 18
            if t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u:
                revert with 'NH{q', 17
            if arg1 and t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u * t * s > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u * t * s)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u:
            revert with 'NH{q', 18
        if t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u:
            revert with 'NH{q', 17
        if arg1 and t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u * t * s > -1 / arg1:
            revert with 'NH{q', 17
        return (arg1 * t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u * t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s:
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s:
                    revert with 'NH{q', 17
                if arg1 and 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * 1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s:
                revert with 'NH{q', 18
            if 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s:
                revert with 'NH{q', 17
            if arg1 and 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * 1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / t * s / 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s:
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s:
                    revert with 'NH{q', 17
                if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s:
                revert with 'NH{q', 18
            if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s:
                revert with 'NH{q', 17
            if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / t * s * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 18
                if t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * t * s / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 18
            if t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if arg1 and t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * t * s > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * t * s / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * t * s / 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if arg1 and t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s / 10^uint8(ext_call.return_data[0]) * t * s / 10^uint8(ext_call.return_data[0]))
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u:
                revert with 'NH{q', 18
            if t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u:
                revert with 'NH{q', 17
            if arg1 and t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u * t * s > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * t * s / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s / v * u * t * s / 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u:
            revert with 'NH{q', 18
        if t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u and t * s > -1 / t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u:
            revert with 'NH{q', 17
        if arg1 and t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u * t * s > -1 / arg1:
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        return (arg1 * t * s / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s / v * u * t * s / 10^uint8(ext_call.return_data[0]))
    s = 10
    t = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if s > -1 / s:
            revert with 'NH{q', 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = t * s
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * 1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if arg1 and 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * 1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * 1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if arg1 and 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * 1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / v * u:
                revert with 'NH{q', 18
            if 1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / v * u and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / v * u:
                revert with 'NH{q', 17
            if arg1 and 1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * 1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / v * u / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / v * u:
            revert with 'NH{q', 18
        if 1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / v * u and 1 > -1 / 1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / v * u:
            revert with 'NH{q', 17
        if arg1 and 1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * 1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / v * u / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / v * u:
                revert with 'NH{q', 18
            if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / v * u and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / v * u:
                revert with 'NH{q', 17
            if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / v * u * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / v * u * 10^uint8(ext_call.return_data[0]) / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / v * u:
            revert with 'NH{q', 18
        if 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / v * u and 10^uint8(ext_call.return_data[0]) > -1 / 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / v * u:
            revert with 'NH{q', 17
        if arg1 and 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / v * u * 10^uint8(ext_call.return_data[0]) > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / v * u * 10^uint8(ext_call.return_data[0]) / t * s)
    u = 10
    v = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if u > -1 / u:
            revert with 'NH{q', 17
        if not bool(idx):
            u = u * u
            v = v
            idx = uint255(idx) * 0.5
            continue 
        u = u * u
        v = v * u
        idx = uint255(idx) * 0.5
        continue 
    if v > -1 / u:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                revert with 'NH{q', 18
            if v * u / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u and v * u > -1 / v * u / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                revert with 'NH{q', 17
            if arg1 and v * u / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * v * u / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * v * u / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
            revert with 'NH{q', 18
        if v * u / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and v * u > -1 / v * u / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
            revert with 'NH{q', 17
        if arg1 and v * u / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * v * u / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * v * u / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if not Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / 10^uint8(ext_call.return_data[0]) and v * u > -1 / v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if arg1 and v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / 10^uint8(ext_call.return_data[0]) * v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u / 10^uint8(ext_call.return_data[0]) * v * u / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        if v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / 10^uint8(ext_call.return_data[0]) and v * u > -1 / v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 17
        if arg1 and v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / 10^uint8(ext_call.return_data[0]) * v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u / 10^uint8(ext_call.return_data[0]) * v * u / t * s)
    w = 10
    x = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if w > -1 / w:
            revert with 'NH{q', 17
        if not bool(idx):
            w = w * w
            x = x
            idx = uint255(idx) * 0.5
            continue 
        w = w * w
        x = x * w
        idx = uint255(idx) * 0.5
        continue 
    if x > -1 / w:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not x * w:
            revert with 'NH{q', 18
        if not Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u / x * w:
            revert with 'NH{q', 18
        if v * u / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u / x * w and v * u > -1 / v * u / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u / x * w:
            revert with 'NH{q', 17
        if arg1 and v * u / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u / x * w * v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * v * u / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u / x * w * v * u / t * s)
    if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 18
    if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if not x * w:
        revert with 'NH{q', 18
    if not Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u / x * w:
        revert with 'NH{q', 18
    if v * u / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u / x * w and v * u > -1 / v * u / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u / x * w:
        revert with 'NH{q', 17
    if arg1 and v * u / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u / x * w * v * u > -1 / arg1:
        revert with 'NH{q', 17
    if not t * s:
        revert with 'NH{q', 18
    return (arg1 * v * u / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u / x * w * v * u / t * s)
}

function sub_68f9d18f(?) payable {
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
    s = 10
    t = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if s > -1 / s:
            revert with 'NH{q', 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = t * s
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 'NH{q', 17
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]))
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]))
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
    u = 10
    v = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if u > -1 / u:
            revert with 'NH{q', 17
        if not bool(idx):
            u = u * u
            v = v
            idx = uint255(idx) * 0.5
            continue 
        u = u * u
        v = v * u
        idx = uint255(idx) * 0.5
        continue 
    if v > -1 / u:
        revert with 'NH{q', 17
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
    w = 10
    x = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if w > -1 / w:
            revert with 'NH{q', 17
        if not bool(idx):
            w = w * w
            x = x
            idx = uint255(idx) * 0.5
            continue 
        w = w * w
        x = x * w
        idx = uint255(idx) * 0.5
        continue 
    if x > -1 / w:
        revert with 'NH{q', 17
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
    if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 18
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
    if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 18
    if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
        revert with 'NH{q', 17
    if not v * u:
        revert with 'NH{q', 18
    return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
}

function sub_c90ef943(?) payable {
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
    s = 10
    t = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if s > -1 / s:
            revert with 'NH{q', 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = t * s
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]))
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            return (Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        return (Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]))
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
    u = 10
    v = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if u > -1 / u:
            revert with 'NH{q', 17
        if not bool(idx):
            u = u * u
            v = v
            idx = uint255(idx) * 0.5
            continue 
        u = u * u
        v = v * u
        idx = uint255(idx) * 0.5
        continue 
    if v > -1 / u:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
    w = 10
    x = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if w > -1 / w:
            revert with 'NH{q', 17
        if not bool(idx):
            w = w * w
            x = x
            idx = uint255(idx) * 0.5
            continue 
        w = w * w
        x = x * w
        idx = uint255(idx) * 0.5
        continue 
    if x > -1 / w:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
    if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 18
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        return (Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
    if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 18
    if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
        revert with 'NH{q', 17
    if not v * u:
        revert with 'NH{q', 18
    return (Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
}

function sub_a93f7824(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                                revert with 'NH{q', 17
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    if 10^ext_call.return_data[31 len 1] > -1:
                        revert with 'NH{q', 17
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                                revert with 'NH{q', 17
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = t * s
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                                revert with 'NH{q', 17
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    if 10^ext_call.return_data[31 len 1] > -1:
                        revert with 'NH{q', 17
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                                revert with 'NH{q', 17
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = t * s
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                                revert with 'NH{q', 17
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    if 10^ext_call.return_data[31 len 1] > -1:
                        revert with 'NH{q', 17
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                                revert with 'NH{q', 17
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = t * s
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                                revert with 'NH{q', 17
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    if 10^ext_call.return_data[31 len 1] > -1:
                        revert with 'NH{q', 17
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                                revert with 'NH{q', 17
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = t * s
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s)
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]))
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]))
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not v * u:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not v * u:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                        revert with 'NH{q', 17
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
        w = 10
        x = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if w > -1 / w:
                revert with 'NH{q', 17
            if not bool(idx):
                w = w * w
                x = x
                idx = uint255(idx) * 0.5
                continue 
            w = w * w
            x = x * w
            idx = uint255(idx) * 0.5
            continue 
        if x > -1 / w:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
            revert with 'NH{q', 17
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    if 10^ext_call.return_data[31 len 1] > -1:
                        revert with 'NH{q', 17
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = t * s
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    if 10^ext_call.return_data[31 len 1] > -1:
                        revert with 'NH{q', 17
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = t * s
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    if 10^ext_call.return_data[31 len 1] > -1:
                        revert with 'NH{q', 17
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = t * s
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.0x313ce567 with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    if 10^ext_call.return_data[31 len 1] > -1:
                        revert with 'NH{q', 17
                    require ext_code.size(sub_fddc93caAddress)
                    staticcall sub_fddc93caAddress.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.getReserves() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                        require ext_code.size(sub_968b6377Address)
                        staticcall sub_968b6377Address.token0() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if ext_call.return_data[12 len 20] != bnbTokenAddress:
                            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                                revert with 'NH{q', 17
                            if not Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                                revert with 'NH{q', 17
                            if not 10^uint8(ext_call.return_data[0]):
                                revert with 'NH{q', 18
                            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 'NH{q', 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = t * s
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 'NH{q', 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = t * s
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * t * s / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * t * s / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s / t * s / 10^uint8(ext_call.return_data[0]))
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 'NH{q', 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = t * s
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]))
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not v * u:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                        revert with 'NH{q', 17
                    if not v * u:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
        w = 10
        x = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if w > -1 / w:
                revert with 'NH{q', 17
            if not bool(idx):
                w = w * w
                x = x
                idx = uint255(idx) * 0.5
                continue 
            w = w * w
            x = x * w
            idx = uint255(idx) * 0.5
            continue 
        if x > -1 / w:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and t * s > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s:
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and t * s > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s:
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * t * s * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / 10^uint8(ext_call.return_data[0]))
    s = 10
    t = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if s > -1 / s:
            revert with 'NH{q', 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = t * s
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 'NH{q', 17
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not v * u:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not v * u:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
        w = 10
        x = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if w > -1 / w:
                revert with 'NH{q', 17
            if not bool(idx):
                w = w * w
                x = x
                idx = uint255(idx) * 0.5
                continue 
            w = w * w
            x = x * w
            idx = uint255(idx) * 0.5
            continue 
        if x > -1 / w:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.0x313ce567 with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                if 10^ext_call.return_data[31 len 1] > -1:
                    revert with 'NH{q', 17
                require ext_code.size(sub_fddc93caAddress)
                staticcall sub_fddc93caAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    require ext_code.size(sub_968b6377Address)
                    staticcall sub_968b6377Address.token0() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if ext_call.return_data[12 len 20] != bnbTokenAddress:
                        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                            revert with 'NH{q', 17
                        if not Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 17
                        if not 10^uint8(ext_call.return_data[0]):
                            revert with 'NH{q', 18
                        if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                            revert with 'NH{q', 17
                        if not t * s:
                            revert with 'NH{q', 18
                        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                    if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            u = 10
            v = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if u > -1 / u:
                    revert with 'NH{q', 17
                if not bool(idx):
                    u = u * u
                    v = v
                    idx = uint255(idx) * 0.5
                    continue 
                u = u * u
                v = v * u
                idx = uint255(idx) * 0.5
                continue 
            if v > -1 / u:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
        u = 10
        v = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if u > -1 / u:
                revert with 'NH{q', 17
            if not bool(idx):
                u = u * u
                v = v
                idx = uint255(idx) * 0.5
                continue 
            u = u * u
            v = v * u
            idx = uint255(idx) * 0.5
            continue 
        if v > -1 / u:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not v * u:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if not v * u:
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
        w = 10
        x = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if w > -1 / w:
                revert with 'NH{q', 17
            if not bool(idx):
                w = w * w
                x = x
                idx = uint255(idx) * 0.5
                continue 
            w = w * w
            x = x * w
            idx = uint255(idx) * 0.5
            continue 
        if x > -1 / w:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not v * u:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / v * u / v * u / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not v * u:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * v * u / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not v * u:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * v * u / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / v * u / v * u / t * s)
    u = 10
    v = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if u > -1 / u:
            revert with 'NH{q', 17
        if not bool(idx):
            u = u * u
            v = v
            idx = uint255(idx) * 0.5
            continue 
        u = u * u
        v = v * u
        idx = uint255(idx) * 0.5
        continue 
    if v > -1 / u:
        revert with 'NH{q', 17
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                        revert with 'NH{q', 17
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / t * s)
        w = 10
        x = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if w > -1 / w:
                revert with 'NH{q', 17
            if not bool(idx):
                w = w * w
                x = x
                idx = uint255(idx) * 0.5
                continue 
            w = w * w
            x = x * w
            idx = uint255(idx) * 0.5
            continue 
        if x > -1 / w:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                    revert with 'NH{q', 17
                if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                revert with 'NH{q', 17
            if arg1 and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
            revert with 'NH{q', 17
        if arg1 and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if 10^ext_call.return_data[31 len 1] > -1:
                revert with 'NH{q', 17
            require ext_code.size(sub_fddc93caAddress)
            staticcall sub_fddc93caAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                require ext_code.size(sub_968b6377Address)
                staticcall sub_968b6377Address.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                if ext_call.return_data[12 len 20] != bnbTokenAddress:
                    if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                        revert with 'NH{q', 17
                    if not Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                        revert with 'NH{q', 17
                    if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                        revert with 'NH{q', 17
                    if not 10^uint8(ext_call.return_data[0]):
                        revert with 'NH{q', 18
                    if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                        revert with 'NH{q', 17
                    if not t * s:
                        revert with 'NH{q', 18
                    return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
                if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
        w = 10
        x = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if w > -1 / w:
                revert with 'NH{q', 17
            if not bool(idx):
                w = w * w
                x = x
                idx = uint255(idx) * 0.5
                continue 
            w = w * w
            x = x * w
            idx = uint255(idx) * 0.5
            continue 
        if x > -1 / w:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                    revert with 'NH{q', 17
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u:
                revert with 'NH{q', 17
            if not 10^uint8(ext_call.return_data[0]):
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u:
            revert with 'NH{q', 17
        if not 10^uint8(ext_call.return_data[0]):
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / 10^uint8(ext_call.return_data[0]) / t * s)
    w = 10
    x = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if w > -1 / w:
            revert with 'NH{q', 17
        if not bool(idx):
            w = w * w
            x = x
            idx = uint255(idx) * 0.5
            continue 
        w = w * w
        x = x * w
        idx = uint255(idx) * 0.5
        continue 
    if x > -1 / w:
        revert with 'NH{q', 17
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u:
                    revert with 'NH{q', 17
                if not x * w:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u:
                revert with 'NH{q', 17
            if not x * w:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u:
                revert with 'NH{q', 17
            if not x * w:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u:
            revert with 'NH{q', 17
        if not x * w:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w / t * s)
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if 10^ext_call.return_data[31 len 1] > -1:
            revert with 'NH{q', 17
        require ext_code.size(sub_fddc93caAddress)
        staticcall sub_fddc93caAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[0]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            require ext_code.size(sub_968b6377Address)
            staticcall sub_968b6377Address.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            if ext_call.return_data[12 len 20] != bnbTokenAddress:
                if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
                    revert with 'NH{q', 17
                if not Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 18
                if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]):
                    revert with 'NH{q', 17
                if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u:
                    revert with 'NH{q', 17
                if not x * w:
                    revert with 'NH{q', 18
                if arg1 and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w > -1 / arg1:
                    revert with 'NH{q', 17
                if not t * s:
                    revert with 'NH{q', 18
                return (arg1 * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w / t * s)
            if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u:
                revert with 'NH{q', 17
            if not x * w:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w / t * s)
        if Mask(112, 0, ext_call.return_data[32]) and 10^uint8(ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u:
                revert with 'NH{q', 17
            if not x * w:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u:
            revert with 'NH{q', 17
        if not x * w:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * 10^uint8(ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w / t * s)
    y = 10
    z = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if y > -1 / y:
            revert with 'NH{q', 17
        if not bool(idx):
            y = y * y
            z = z
            idx = uint255(idx) * 0.5
            continue 
        y = y * y
        z = z * y
        idx = uint255(idx) * 0.5
        continue 
    if z > -1 / y:
        revert with 'NH{q', 17
    require ext_code.size(sub_fddc93caAddress)
    staticcall sub_fddc93caAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[0]) and z * y > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        require ext_code.size(sub_968b6377Address)
        staticcall sub_968b6377Address.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        if ext_call.return_data[12 len 20] != bnbTokenAddress:
            if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
                revert with 'NH{q', 17
            if not Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 18
            if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]):
                revert with 'NH{q', 17
            if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[0]) * z * y / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u:
                revert with 'NH{q', 17
            if not x * w:
                revert with 'NH{q', 18
            if arg1 and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * z * y / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w > -1 / arg1:
                revert with 'NH{q', 17
            if not t * s:
                revert with 'NH{q', 18
            return (arg1 * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[0]) * z * y / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w / t * s)
        if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[0]) * z * y / Mask(112, 0, ext_call.return_data[32]) > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u:
            revert with 'NH{q', 17
        if not x * w:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * z * y / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[0]) * z * y / Mask(112, 0, ext_call.return_data[32]) / x * w / x * w / t * s)
    if Mask(112, 0, ext_call.return_data[32]) and z * y > -1 / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 18
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(sub_968b6377Address)
    staticcall sub_968b6377Address.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != bnbTokenAddress:
        if Mask(112, 0, ext_call.return_data[32]) and x * w > -1 / Mask(112, 0, ext_call.return_data[32]):
            revert with 'NH{q', 17
        if not Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 18
        if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) and v * u > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]):
            revert with 'NH{q', 17
        if Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u and Mask(112, 0, ext_call.return_data[32]) * z * y / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u:
            revert with 'NH{q', 17
        if not x * w:
            revert with 'NH{q', 18
        if arg1 and Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * z * y / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w > -1 / arg1:
            revert with 'NH{q', 17
        if not t * s:
            revert with 'NH{q', 18
        return (arg1 * Mask(112, 0, ext_call.return_data[32]) * x * w / Mask(112, 0, ext_call.return_data[0]) * v * u * Mask(112, 0, ext_call.return_data[32]) * z * y / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w / t * s)
    if Mask(112, 0, ext_call.return_data[0]) and x * w > -1 / Mask(112, 0, ext_call.return_data[0]):
        revert with 'NH{q', 17
    if not Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 18
    if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) and v * u > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]):
        revert with 'NH{q', 17
    if Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u and Mask(112, 0, ext_call.return_data[32]) * z * y / Mask(112, 0, ext_call.return_data[0]) > -1 / Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u:
        revert with 'NH{q', 17
    if not x * w:
        revert with 'NH{q', 18
    if arg1 and Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * z * y / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w > -1 / arg1:
        revert with 'NH{q', 17
    if not t * s:
        revert with 'NH{q', 18
    return (arg1 * Mask(112, 0, ext_call.return_data[0]) * x * w / Mask(112, 0, ext_call.return_data[32]) * v * u * Mask(112, 0, ext_call.return_data[32]) * z * y / Mask(112, 0, ext_call.return_data[0]) / x * w / x * w / t * s)
}



}
