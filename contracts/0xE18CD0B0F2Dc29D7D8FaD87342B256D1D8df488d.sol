contract main {




// =====================  Runtime code  =====================


#
#  - sub_46b4323c(?)
#  - canDeposit(address arg1, uint256 arg2)
#  - sub_e705e0e3(?)
#
uint256 sub_562e1a17;
uint256 sub_cff46b1a;
uint256 sub_1261e922;
address LPAddress;
uint32 stor4;
address token0Address;
address token1Address;
address sub_9eb2e0a9Address;
address sub_0793465dAddress;
address sub_358ad2e2Address;
address adminAddress;
array of struct sub_1b8e25f1;
array of struct sub_9023d0da;
array of struct sub_448f2946;
array of struct sub_c88f1eae;
uint32 stor14;
address pancakeRouterAddress;
uint256 stor14;
address pancakeFactoryAddress;
address sub_f984ead8Address;
address cakeAddress;
address sub_077b2e0fAddress;

function sub_077b2e0f(?) payable {
    return sub_077b2e0fAddress
}

function sub_0793465d(?) payable {
    return sub_0793465dAddress
}

function token0() payable {
    return address(token0Address)
}

function sub_1261e922(?) payable {
    return sub_1261e922
}

function sub_1b8e25f1(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_1b8e25f1.length
    return sub_1b8e25f1[arg1].field_0
}

function sub_358ad2e2(?) payable {
    return sub_358ad2e2Address
}

function sub_448f2946(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_448f2946.length
    return sub_448f2946[arg1].field_0
}

function sub_562e1a17(?) payable {
    return sub_562e1a17
}

function Cake() payable {
    return cakeAddress
}

function sub_9023d0da(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_9023d0da.length
    return sub_9023d0da[arg1].field_0
}

function sub_9eb2e0a9(?) payable {
    return sub_9eb2e0a9Address
}

function LP() payable {
    return LPAddress
}

function pancakeRouter() payable {
    return address(pancakeRouterAddress)
}

function sub_c88f1eae(?) payable {
    require calldata.size - 4 >= 32
    require arg1 < sub_c88f1eae.length
    return sub_c88f1eae[arg1].field_0
}

function sub_cff46b1a(?) payable {
    return sub_cff46b1a
}

function token1() payable {
    return token1Address
}

function sub_d29af082(?) payable {
    return sub_f984ead8Address
}

function pancakeFactory() payable {
    return pancakeFactoryAddress
}

function admin() payable {
    return adminAddress
}

function sub_f984ead8(?) payable {
    return sub_f984ead8Address
}

function _fallback() payable {
    revert
}

function sub_b14c649e(?) payable {
    require calldata.size - 4 >= 64
    if arg1 >= arg2:
        return arg2
    return arg1
}

function sub_8a658f09(?) payable {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'not admin'
    sub_1261e922 = arg1
}

function sub_c1158cb0(?) payable {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'not admin'
    sub_cff46b1a = arg1
}

function sub_f3145a85(?) payable {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'not admin'
    sub_562e1a17 = arg1
}

function setAdmin(address arg1) payable {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'not admin'
    adminAddress = arg1
}

function setLendingPool(address arg1) payable {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'not admin'
    sub_f984ead8Address = arg1
}

function sub_5fe77b67(?) payable {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'not admin'
    require 1 < sub_c88f1eae.length
    address(sub_c88f1eae.field_256) = arg1
}

function sub_f2004699(?) payable {
    require calldata.size - 4 >= 32
    if adminAddress != msg.sender:
        revert with 0, 'not admin'
    require 1 < sub_9023d0da.length
    address(sub_9023d0da.field_256) = arg1
}

function sub_1516ed7d(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_9eb2e0a9Address)
    staticcall sub_9eb2e0a9Address.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_addfe747(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_0793465dAddress)
    staticcall sub_0793465dAddress.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_21fb85fb(?) payable {
    require ext_code.size(LPAddress)
    staticcall LPAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != address(token0Address):
        return ext_call.return_data[32] << 144, ext_call.return_data[0] << 144, ext_call.return_data[0]
    return ext_call.return_data[0] << 144, ext_call.return_data[32] << 144, ext_call.return_data[0]
}

function getReserves(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require ext_code.size(pancakeFactoryAddress)
    staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
            gas gas_remaining wei
           args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    if arg1 >= arg2:
        if arg2 != arg1:
            return ext_call.return_data[50 len 14], ext_call.return_data[0] << 144
    else:
        if arg1 != arg1:
            return ext_call.return_data[50 len 14], ext_call.return_data[0] << 144
    return ext_call.return_data[18 len 14], ext_call.return_data[32] << 144
}

function sub_81c07f55(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_0793465dAddress)
    staticcall sub_0793465dAddress.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_0793465dAddress)
    staticcall sub_0793465dAddress.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    require ext_call.return_data[0]
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function sub_90f6a58d(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_358ad2e2Address)
    staticcall sub_358ad2e2Address.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_358ad2e2Address)
    staticcall sub_358ad2e2Address.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    require ext_call.return_data[0]
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function sub_e4950497(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_9eb2e0a9Address)
    staticcall sub_9eb2e0a9Address.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_9eb2e0a9Address)
    staticcall sub_9eb2e0a9Address.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        return 0
    require ext_call.return_data[0]
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18)
}

function sub_cc1f8ffa(?) payable {
    require calldata.size - 4 >= 64
    if not arg2:
        require ext_code.size(arg1)
        staticcall arg1.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if 0 / ext_call.return_data[0] / 10^18 <= 0:
            return 0
    else:
        require arg2
        if 1000000000000000000 * 10^18 * arg2 / arg2 != 1000000000000000000 * 10^18:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        require ext_code.size(arg1)
        staticcall arg1.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if 1000000000000000000 * 10^18 * arg2 / ext_call.return_data[0] / 10^18 <= 0:
            return 0
    return 1
}

function getToken1Amount(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != address(token0Address):
        if not Mask(112, 0, ext_call.return_data[0]):
            if Mask(112, 0, ext_call.return_data[32]):
                return (0 / Mask(112, 0, ext_call.return_data[32]))
        else:
            if Mask(112, 0, ext_call.return_data[0]):
                if Mask(112, 0, ext_call.return_data[0]) * arg1 / Mask(112, 0, ext_call.return_data[0]) != arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if Mask(112, 0, ext_call.return_data[32]):
                    return (Mask(112, 0, ext_call.return_data[0]) * arg1 / Mask(112, 0, ext_call.return_data[32]))
    else:
        if not Mask(112, 0, ext_call.return_data[32]):
            if Mask(112, 0, ext_call.return_data[0]):
                return (0 / Mask(112, 0, ext_call.return_data[0]))
        else:
            if Mask(112, 0, ext_call.return_data[32]):
                if Mask(112, 0, ext_call.return_data[32]) * arg1 / Mask(112, 0, ext_call.return_data[32]) != arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if Mask(112, 0, ext_call.return_data[0]):
                    return (Mask(112, 0, ext_call.return_data[32]) * arg1 / Mask(112, 0, ext_call.return_data[0]))
    revert
}

function sub_8d0729d0(?) payable {
    require ext_code.size(LPAddress)
    staticcall LPAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != address(token0Address):
        if not Mask(112, 0, ext_call.return_data[32]):
            require Mask(112, 0, ext_call.return_data[0])
            s = 0 / Mask(112, 0, ext_call.return_data[0])
            t = (0 / Mask(112, 0, ext_call.return_data[0])) + 1 / 2
            while t < s:
                require t
                s = t
                t = (0 / Mask(112, 0, ext_call.return_data[0]) / t) + t / 2
                continue 
        else:
            require Mask(112, 0, ext_call.return_data[32])
            if 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10^18:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            require Mask(112, 0, ext_call.return_data[0])
            s = 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])
            t = (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) + 1 / 2
            while t < s:
                require t
                s = t
                t = (10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / t) + t / 2
                continue 
    else:
        if not Mask(112, 0, ext_call.return_data[0]):
            require Mask(112, 0, ext_call.return_data[32])
            s = 0 / Mask(112, 0, ext_call.return_data[32])
            t = (0 / Mask(112, 0, ext_call.return_data[32])) + 1 / 2
            while t < s:
                require t
                s = t
                t = (0 / Mask(112, 0, ext_call.return_data[32]) / t) + t / 2
                continue 
        else:
            require Mask(112, 0, ext_call.return_data[0])
            if 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10^18:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            require Mask(112, 0, ext_call.return_data[32])
            s = 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])
            t = (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) + 1 / 2
            while t < s:
                require t
                s = t
                t = (10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / t) + t / 2
                continue 
    return s
}

function getAmountOut(uint256 arg1, uint256 arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if not arg1:
        return 0
    if not arg2:
        return 0
    if not arg3:
        return 0
    if not arg1:
        if arg2:
            if arg2:
                if 10000 * arg2 / arg2 != 10000:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if 10000 * arg2 < 10000 * arg2:
                    revert with 0, 'SafeMath: addition overflow'
                if 10000 * arg2:
                    return (0 / 10000 * arg2)
    else:
        if arg1:
            if 9975 * arg1 / arg1 != 9975:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not 9975 * arg1:
                if not arg2:
                    if 9975 * arg1 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if 9975 * arg1:
                        return (0 / 9975 * arg1)
                else:
                    if arg2:
                        if 10000 * arg2 / arg2 != 10000:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (10000 * arg2) + (9975 * arg1) < 10000 * arg2:
                            revert with 0, 'SafeMath: addition overflow'
                        if (10000 * arg2) + (9975 * arg1):
                            return (0 / (10000 * arg2) + (9975 * arg1))
            else:
                if 9975 * arg1:
                    if 9975 * arg1 * arg3 / 9975 * arg1 != arg3:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not arg2:
                        if 9975 * arg1 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if 9975 * arg1:
                            return (9975 * arg1 * arg3 / 9975 * arg1)
                    else:
                        if arg2:
                            if 10000 * arg2 / arg2 != 10000:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (10000 * arg2) + (9975 * arg1) < 10000 * arg2:
                                revert with 0, 'SafeMath: addition overflow'
                            if (10000 * arg2) + (9975 * arg1):
                                return (9975 * arg1 * arg3 / (10000 * arg2) + (9975 * arg1))
    revert
}

function sub_28ced22a(?) payable {
    require calldata.size - 4 >= 64
    require ext_code.size(LPAddress)
    staticcall LPAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != address(token0Address):
        if not arg1:
            require Mask(112, 0, ext_call.return_data[32])
            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                return 0
        else:
            require arg1
            if arg1 * ext_call.return_data[0] / arg1 != ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            require Mask(112, 0, ext_call.return_data[32])
            if arg1 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) <= 0:
                return 0
        if not arg2:
            require Mask(112, 0, ext_call.return_data[0])
            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                return 0
        else:
            require arg2
            if arg2 * ext_call.return_data[0] / arg2 != ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            require Mask(112, 0, ext_call.return_data[0])
            if arg2 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) <= 0:
                return 0
    else:
        if not arg1:
            require Mask(112, 0, ext_call.return_data[0])
            if 0 / Mask(112, 0, ext_call.return_data[0]) <= 0:
                return 0
        else:
            require arg1
            if arg1 * ext_call.return_data[0] / arg1 != ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            require Mask(112, 0, ext_call.return_data[0])
            if arg1 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[0]) <= 0:
                return 0
        if not arg2:
            require Mask(112, 0, ext_call.return_data[32])
            if 0 / Mask(112, 0, ext_call.return_data[32]) <= 0:
                return 0
        else:
            require arg2
            if arg2 * ext_call.return_data[0] / arg2 != ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            require Mask(112, 0, ext_call.return_data[32])
            if arg2 * ext_call.return_data[0] / Mask(112, 0, ext_call.return_data[32]) <= 0:
                return 0
    return 1
}

function sub_57a47541(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != address(token0Address):
        if not arg1:
            if Mask(112, 0, ext_call.return_data[32]):
                if Mask(112, 0, ext_call.return_data[32]):
                    if 1000000000000000000 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 1000000000000000000 * 10^18:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
        else:
            if arg1:
                if arg1 * arg1 / arg1 != arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not Mask(112, 0, ext_call.return_data[32]):
                    if Mask(112, 0, ext_call.return_data[0]):
                        if arg1 * arg1:
                            return (0 / Mask(112, 0, ext_call.return_data[0]) / arg1 * arg1)
                else:
                    if Mask(112, 0, ext_call.return_data[32]):
                        if 1000000000000000000 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 1000000000000000000 * 10^18:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if Mask(112, 0, ext_call.return_data[0]):
                            if arg1 * arg1:
                                return (1000000000000000000 * 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) / arg1 * arg1)
    else:
        if not arg1:
            if Mask(112, 0, ext_call.return_data[0]):
                if Mask(112, 0, ext_call.return_data[0]):
                    if 1000000000000000000 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 1000000000000000000 * 10^18:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
        else:
            if arg1:
                if arg1 * arg1 / arg1 != arg1:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not Mask(112, 0, ext_call.return_data[0]):
                    if Mask(112, 0, ext_call.return_data[32]):
                        if arg1 * arg1:
                            return (0 / Mask(112, 0, ext_call.return_data[32]) / arg1 * arg1)
                else:
                    if Mask(112, 0, ext_call.return_data[0]):
                        if 1000000000000000000 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 1000000000000000000 * 10^18:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if Mask(112, 0, ext_call.return_data[32]):
                            if arg1 * arg1:
                                return (1000000000000000000 * 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) / arg1 * arg1)
    revert
}

function sub_f81d8493(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_9eb2e0a9Address)
    staticcall sub_9eb2e0a9Address.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_0793465dAddress)
    staticcall sub_0793465dAddress.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require ext_call.return_data[0]
    if ext_call.return_data[12 len 20] != address(token0Address):
        if not 0 / ext_call.return_data[0]:
            if ext_call.return_data[0] < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0]:
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if ext_call.return_data[0] + (0 / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return (ext_call.return_data[0] + (0 / Mask(112, 0, ext_call.return_data[0])))
            require ext_call.return_data[0]
            if ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if ext_call.return_data[0] + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return (ext_call.return_data[0] + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
        require 0 / ext_call.return_data[0]
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0]:
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
        require ext_call.return_data[0]
        if ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[0]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[0])
        if ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
    if not 0 / ext_call.return_data[0]:
        if ext_call.return_data[0] < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0]:
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if ext_call.return_data[0] + (0 / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return (ext_call.return_data[0] + (0 / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0]
        if ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if ext_call.return_data[0] + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return (ext_call.return_data[0] + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
    require 0 / ext_call.return_data[0]
    if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    if not ext_call.return_data[0]:
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
    require ext_call.return_data[0]
    if ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if Mask(112, 0, ext_call.return_data[32]) <= 0:
        revert with 0, 'SafeMath: division by zero'
    require Mask(112, 0, ext_call.return_data[32])
    if ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) < 0:
        revert with 0, 'SafeMath: addition overflow'
    return (ext_call.return_data[0] + (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
}

function sub_2ef1a587(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_358ad2e2Address)
    staticcall sub_358ad2e2Address.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_358ad2e2Address)
    staticcall sub_358ad2e2Address.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(LPAddress)
        staticcall LPAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_code.size(LPAddress)
        staticcall LPAddress.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(LPAddress)
        staticcall LPAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if ext_call.return_data[12 len 20] != address(token0Address):
            if not 0 / ext_call.return_data[0]:
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / Mask(112, 0, ext_call.return_data[0]))
            require 0 / ext_call.return_data[0]
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if 2 * 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])) < 2 * 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
        if not 0 / ext_call.return_data[0]:
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (0 / Mask(112, 0, ext_call.return_data[32]))
        require 0 / ext_call.return_data[0]
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if 2 * 0 / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])) < 2 * 0 / ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
    require ext_call.return_data[0]
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    require ext_code.size(LPAddress)
    staticcall LPAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != address(token0Address):
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if not 0 / ext_call.return_data[0]:
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / Mask(112, 0, ext_call.return_data[0]))
            require 0 / ext_call.return_data[0]
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if 2 * 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])) < 2 * 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (0 / Mask(112, 0, ext_call.return_data[0]))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
        if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[0]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[0])
        if (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])) < 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if not 0 / ext_call.return_data[0]:
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (0 / Mask(112, 0, ext_call.return_data[32]))
        require 0 / ext_call.return_data[0]
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if 2 * 0 / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])) < 2 * 0 / ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
    require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require ext_call.return_data[0]
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (0 / Mask(112, 0, ext_call.return_data[32]))
    require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
    if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] != 2:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] < 0:
        revert with 0, 'SafeMath: addition overflow'
    if Mask(112, 0, ext_call.return_data[32]) <= 0:
        revert with 0, 'SafeMath: division by zero'
    require Mask(112, 0, ext_call.return_data[32])
    if (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])) < 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    return ((2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
}

function sub_5b93f849(?) payable {
    require calldata.size - 4 >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != address(token0Address):
        if not arg1:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if not 0 / ext_call.return_data[0]:
                if arg2 < arg2:
                    revert with 0, 'SafeMath: addition overflow'
                if not arg3:
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if arg2 + (0 / Mask(112, 0, ext_call.return_data[0])) < arg2:
                        revert with 0, 'SafeMath: addition overflow'
                    return (arg2 + (0 / Mask(112, 0, ext_call.return_data[0])))
                require arg3
                if arg3 * Mask(112, 0, ext_call.return_data[32]) / arg3 != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if arg2 + (arg3 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) < arg2:
                    revert with 0, 'SafeMath: addition overflow'
                return (arg2 + (arg3 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
            require 0 / ext_call.return_data[0]
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if arg2 + (2 * 0 / ext_call.return_data[0]) < arg2:
                revert with 0, 'SafeMath: addition overflow'
            if not arg3:
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (arg2 + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
            require arg3
            if arg3 * Mask(112, 0, ext_call.return_data[32]) / arg3 != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if arg3 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (arg2 + (2 * 0 / ext_call.return_data[0]) + (arg3 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
        require arg1
        if arg1 * Mask(112, 0, ext_call.return_data[32]) / arg1 != Mask(112, 0, ext_call.return_data[32]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if not arg1 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
            if arg2 < arg2:
                revert with 0, 'SafeMath: addition overflow'
            if not arg3:
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if arg2 + (0 / Mask(112, 0, ext_call.return_data[0])) < arg2:
                    revert with 0, 'SafeMath: addition overflow'
                return (arg2 + (0 / Mask(112, 0, ext_call.return_data[0])))
            require arg3
            if arg3 * Mask(112, 0, ext_call.return_data[32]) / arg3 != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if arg2 + (arg3 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) < arg2:
                revert with 0, 'SafeMath: addition overflow'
            return (arg2 + (arg3 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
        require arg1 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
        if 2 * arg1 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] / arg1 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if arg2 + (2 * arg1 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) < arg2:
            revert with 0, 'SafeMath: addition overflow'
        if not arg3:
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (arg2 + (2 * arg1 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
        require arg3
        if arg3 * Mask(112, 0, ext_call.return_data[32]) / arg3 != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[0]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[0])
        if arg3 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (arg2 + (2 * arg1 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (arg3 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
    if not arg1:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if not 0 / ext_call.return_data[0]:
            if arg2 < arg2:
                revert with 0, 'SafeMath: addition overflow'
            if not arg3:
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if arg2 + (0 / Mask(112, 0, ext_call.return_data[32])) < arg2:
                    revert with 0, 'SafeMath: addition overflow'
                return (arg2 + (0 / Mask(112, 0, ext_call.return_data[32])))
            require arg3
            if arg3 * Mask(112, 0, ext_call.return_data[0]) / arg3 != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if arg2 + (arg3 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) < arg2:
                revert with 0, 'SafeMath: addition overflow'
            return (arg2 + (arg3 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
        require 0 / ext_call.return_data[0]
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if arg2 + (2 * 0 / ext_call.return_data[0]) < arg2:
            revert with 0, 'SafeMath: addition overflow'
        if not arg3:
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (arg2 + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
        require arg3
        if arg3 * Mask(112, 0, ext_call.return_data[0]) / arg3 != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if arg3 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (arg2 + (2 * 0 / ext_call.return_data[0]) + (arg3 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
    require arg1
    if arg1 * Mask(112, 0, ext_call.return_data[0]) / arg1 != Mask(112, 0, ext_call.return_data[0]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require ext_call.return_data[0]
    if not arg1 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
        if arg2 < arg2:
            revert with 0, 'SafeMath: addition overflow'
        if not arg3:
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if arg2 + (0 / Mask(112, 0, ext_call.return_data[32])) < arg2:
                revert with 0, 'SafeMath: addition overflow'
            return (arg2 + (0 / Mask(112, 0, ext_call.return_data[32])))
        require arg3
        if arg3 * Mask(112, 0, ext_call.return_data[0]) / arg3 != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if arg2 + (arg3 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) < arg2:
            revert with 0, 'SafeMath: addition overflow'
        return (arg2 + (arg3 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
    require arg1 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
    if 2 * arg1 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] / arg1 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] != 2:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if arg2 + (2 * arg1 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) < arg2:
        revert with 0, 'SafeMath: addition overflow'
    if not arg3:
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return (arg2 + (2 * arg1 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
    require arg3
    if arg3 * Mask(112, 0, ext_call.return_data[0]) / arg3 != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if Mask(112, 0, ext_call.return_data[32]) <= 0:
        revert with 0, 'SafeMath: division by zero'
    require Mask(112, 0, ext_call.return_data[32])
    if arg3 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) < 0:
        revert with 0, 'SafeMath: addition overflow'
    return (arg2 + (2 * arg1 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (arg3 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
}

function sub_b8e34a7d(?) payable {
    require calldata.size - 4 >= 64
    require ext_code.size(arg2)
    staticcall arg2.shares(address arg1) with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(arg2)
    staticcall arg2.totalShares() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_9eb2e0a9Address)
    staticcall sub_9eb2e0a9Address.borrowBalanceStored(address arg1) with:
            gas gas_remaining wei
           args arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if ext_call.return_data[0]:
            require ext_code.size(sub_0793465dAddress)
            staticcall sub_0793465dAddress.borrowBalanceStored(address arg1) with:
                    gas gas_remaining wei
                   args arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                if ext_call.return_data[0]:
                    if not 0 / ext_call.return_data[0]:
                        return ext_call.return_data[0]
                    require ext_code.size(sub_f984ead8Address)
                    staticcall sub_f984ead8Address.0x25c73e92 with:
                            gas gas_remaining wei
                           args 0, uint32(stor4), 0 / ext_call.return_data[0], token1Address, 0 / ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 64
                    if 0 / ext_call.return_data[0]:
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0]:
                                return (0 / 0 / ext_call.return_data[0])
                        else:
                            if ext_call.return_data[0]:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                Mask(248, 0, 0 / ext_call.return_data[0])
                                if 0 / ext_call.return_data[0]:
                                    return (ext_call.return_data[0] * ext_call.return_data[0] / 0 / ext_call.return_data[0])
                    else:
                        if not ext_call.return_data[0]:
                            if 0 / ext_call.return_data[0]:
                                return (0 / 0 / ext_call.return_data[0])
                        else:
                            if ext_call.return_data[0]:
                                if ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] != ext_call.return_data[32]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                Mask(248, 0, 0 / ext_call.return_data[0])
                                if 0 / ext_call.return_data[0]:
                                    return (ext_call.return_data[0] * ext_call.return_data[32] / 0 / ext_call.return_data[0])
            else:
                if ext_call.return_data[0]:
                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if ext_call.return_data[0]:
                        if not 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                return ext_call.return_data[0]
                        require ext_code.size(sub_f984ead8Address)
                        staticcall sub_f984ead8Address.0x25c73e92 with:
                                gas gas_remaining wei
                               args 0, uint32(stor4), 0 / ext_call.return_data[0], token1Address, ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if 0 / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                if 0 / ext_call.return_data[0]:
                                    return (0 / 0 / ext_call.return_data[0])
                            else:
                                if ext_call.return_data[0]:
                                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    Mask(248, 0, ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                    if 0 / ext_call.return_data[0]:
                                        return (ext_call.return_data[0] * ext_call.return_data[0] / 0 / ext_call.return_data[0])
                        else:
                            if not ext_call.return_data[0]:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    return (0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                            else:
                                if ext_call.return_data[0]:
                                    if ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] != ext_call.return_data[32]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    Mask(248, 0, ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                        return (ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
    else:
        if ext_call.return_data[0]:
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0]:
                require ext_code.size(sub_0793465dAddress)
                staticcall sub_0793465dAddress.borrowBalanceStored(address arg1) with:
                        gas gas_remaining wei
                       args arg2
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    if ext_call.return_data[0]:
                        if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            if not 0 / ext_call.return_data[0]:
                                return ext_call.return_data[0]
                        require ext_code.size(sub_f984ead8Address)
                        staticcall sub_f984ead8Address.0x25c73e92 with:
                                gas gas_remaining wei
                               args 0, uint32(stor4), ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], token1Address, 0 / ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 64
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                            if not ext_call.return_data[0]:
                                if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    return (0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                            else:
                                if ext_call.return_data[0]:
                                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    Mask(248, 0, 0 / ext_call.return_data[0])
                                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                        return (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                        else:
                            if not ext_call.return_data[0]:
                                if 0 / ext_call.return_data[0]:
                                    return (0 / 0 / ext_call.return_data[0])
                            else:
                                if ext_call.return_data[0]:
                                    if ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] != ext_call.return_data[32]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    Mask(248, 0, 0 / ext_call.return_data[0])
                                    if 0 / ext_call.return_data[0]:
                                        return (ext_call.return_data[0] * ext_call.return_data[32] / 0 / ext_call.return_data[0])
                else:
                    if ext_call.return_data[0]:
                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if ext_call.return_data[0]:
                            if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                    return ext_call.return_data[0]
                            require ext_code.size(sub_f984ead8Address)
                            staticcall sub_f984ead8Address.0x25c73e92 with:
                                    gas gas_remaining wei
                                   args 0, uint32(stor4), ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], token1Address, ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 64
                            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                if not ext_call.return_data[0]:
                                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                        return (0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                else:
                                    if ext_call.return_data[0]:
                                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        Mask(248, 0, ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                            return (ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                            else:
                                if not ext_call.return_data[0]:
                                    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                        return (0 / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                else:
                                    if ext_call.return_data[0]:
                                        if ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] != ext_call.return_data[32]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        Mask(248, 0, ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
                                        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]:
                                            return (ext_call.return_data[0] * ext_call.return_data[32] / ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0])
    revert
}

function sub_163db005(?) payable {
    require calldata.size - 4 >= 64
    require arg2 <= 4294967296
    require arg2 + 36 <= calldata.size
    require arg2.length <= 4294967296 and arg2 + (32 * arg2.length) + 36 <= calldata.size
    mem[128 len 32 * arg2.length] = call.data[arg2 + 36 len 32 * arg2.length]
    if arg2.length < 2:
        return 0
    require arg2.length <= test266151307()
    mem[(32 * arg2.length) + 128] = arg2.length
    if not arg2.length:
        require 0 < arg2.length
        mem[(32 * arg2.length) + 160] = arg1
        idx = 0
        while idx < arg2.length - 1:
            require idx < arg2.length
            _563 = mem[(32 * idx) + 128]
            require idx + 1 < arg2.length
            _569 = mem[(32 * idx + 1) + 128]
            mem[(64 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(pancakeFactoryAddress)
            staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args mem[(64 * arg2.length) + 164], address(_569)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[(64 * arg2.length) + 160 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require idx < mem[(32 * arg2.length) + 128]
            if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                require idx + 1 < mem[(32 * arg2.length) + 128]
                require idx + 1 < mem[(32 * arg2.length) + 128]
                return 0
            if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                if address(_569) != address(_563):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not Mask(112, 0, ext_call.return_data[0]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                        require Mask(112, 0, ext_call.return_data[32])
                        require Mask(112, 0, ext_call.return_data[32])
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: addition overflow'
                        require 10000 * Mask(112, 0, ext_call.return_data[32])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                            idx = idx + 1
                            continue 
                    else:
                        require mem[(32 * idx) + (32 * arg2.length) + 160]
                        if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] / mem[(32 * idx) + (32 * arg2.length) + 160] != 9975:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if not 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[32])
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                        else:
                            require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                            if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[32])
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                else:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not Mask(112, 0, ext_call.return_data[32]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                        require Mask(112, 0, ext_call.return_data[0])
                        require Mask(112, 0, ext_call.return_data[0])
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: addition overflow'
                        require 10000 * Mask(112, 0, ext_call.return_data[0])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                            idx = idx + 1
                            continue 
                    else:
                        require mem[(32 * idx) + (32 * arg2.length) + 160]
                        if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] / mem[(32 * idx) + (32 * arg2.length) + 160] != 9975:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if not 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[0])
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                        else:
                            require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                            if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[0])
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
            else:
                if address(_563) != address(_563):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not Mask(112, 0, ext_call.return_data[0]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                        require Mask(112, 0, ext_call.return_data[32])
                        require Mask(112, 0, ext_call.return_data[32])
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: addition overflow'
                        require 10000 * Mask(112, 0, ext_call.return_data[32])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                            idx = idx + 1
                            continue 
                    else:
                        require mem[(32 * idx) + (32 * arg2.length) + 160]
                        if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] / mem[(32 * idx) + (32 * arg2.length) + 160] != 9975:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if not 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[32])
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                        else:
                            require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                            if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[32])
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                else:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not Mask(112, 0, ext_call.return_data[32]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                        require Mask(112, 0, ext_call.return_data[0])
                        require Mask(112, 0, ext_call.return_data[0])
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: addition overflow'
                        require 10000 * Mask(112, 0, ext_call.return_data[0])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                            idx = idx + 1
                            continue 
                    else:
                        require mem[(32 * idx) + (32 * arg2.length) + 160]
                        if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] / mem[(32 * idx) + (32 * arg2.length) + 160] != 9975:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if not 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[0])
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                        else:
                            require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                            if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[0])
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
            return 0
    else:
        mem[(32 * arg2.length) + 160 len 32 * arg2.length] = call.data[calldata.size len 32 * arg2.length]
        require 0 < arg2.length
        mem[(32 * arg2.length) + 160] = arg1
        idx = 0
        while idx < arg2.length - 1:
            require idx < arg2.length
            _565 = mem[(32 * idx) + 128]
            require idx + 1 < arg2.length
            _572 = mem[(32 * idx + 1) + 128]
            mem[(64 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
            require ext_code.size(pancakeFactoryAddress)
            staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                    gas gas_remaining wei
                   args mem[(64 * arg2.length) + 164], address(_572)
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getReserves() with:
                    gas gas_remaining wei
            mem[(64 * arg2.length) + 160 len 96] = ext_call.return_data[0 len 96]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require idx < mem[(32 * arg2.length) + 128]
            if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                require idx + 1 < mem[(32 * arg2.length) + 128]
                require idx + 1 < mem[(32 * arg2.length) + 128]
                return 0
            if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                if address(_572) != address(_565):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not Mask(112, 0, ext_call.return_data[0]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                        require Mask(112, 0, ext_call.return_data[32])
                        require Mask(112, 0, ext_call.return_data[32])
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: addition overflow'
                        require 10000 * Mask(112, 0, ext_call.return_data[32])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                            idx = idx + 1
                            continue 
                    else:
                        require mem[(32 * idx) + (32 * arg2.length) + 160]
                        if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] / mem[(32 * idx) + (32 * arg2.length) + 160] != 9975:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if not 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[32])
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                        else:
                            require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                            if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[32])
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                else:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not Mask(112, 0, ext_call.return_data[32]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                        require Mask(112, 0, ext_call.return_data[0])
                        require Mask(112, 0, ext_call.return_data[0])
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: addition overflow'
                        require 10000 * Mask(112, 0, ext_call.return_data[0])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                            idx = idx + 1
                            continue 
                    else:
                        require mem[(32 * idx) + (32 * arg2.length) + 160]
                        if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] / mem[(32 * idx) + (32 * arg2.length) + 160] != 9975:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if not 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[0])
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                        else:
                            require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                            if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[0])
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
            else:
                if address(_565) != address(_565):
                    if not Mask(112, 0, ext_call.return_data[32]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not Mask(112, 0, ext_call.return_data[0]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                        require Mask(112, 0, ext_call.return_data[32])
                        require Mask(112, 0, ext_call.return_data[32])
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                            revert with 0, 'SafeMath: addition overflow'
                        require 10000 * Mask(112, 0, ext_call.return_data[32])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                            idx = idx + 1
                            continue 
                    else:
                        require mem[(32 * idx) + (32 * arg2.length) + 160]
                        if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] / mem[(32 * idx) + (32 * arg2.length) + 160] != 9975:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if not 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[32])
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                        else:
                            require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                            if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                            if not Mask(112, 0, ext_call.return_data[32]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[32])
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                else:
                    if not Mask(112, 0, ext_call.return_data[0]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not Mask(112, 0, ext_call.return_data[32]):
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        return 0
                    if not mem[(32 * idx) + (32 * arg2.length) + 160]:
                        require Mask(112, 0, ext_call.return_data[0])
                        require Mask(112, 0, ext_call.return_data[0])
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                            revert with 0, 'SafeMath: addition overflow'
                        require 10000 * Mask(112, 0, ext_call.return_data[0])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                        require idx + 1 < mem[(32 * arg2.length) + 128]
                        if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                            idx = idx + 1
                            continue 
                    else:
                        require mem[(32 * idx) + (32 * arg2.length) + 160]
                        if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] / mem[(32 * idx) + (32 * arg2.length) + 160] != 9975:
                            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                        if not 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[0])
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
                        else:
                            require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                            if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                            if not Mask(112, 0, ext_call.return_data[0]):
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                require 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * arg2.length) + 160]:
                                    idx = idx + 1
                                    continue 
                            else:
                                require Mask(112, 0, ext_call.return_data[0])
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[(64 * arg2.length) + 261 len 31]
                                if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                    revert with 0, 'SafeMath: addition overflow'
                                require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                mem[(32 * idx + 1) + (32 * arg2.length) + 160] = 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160])
                                require idx + 1 < mem[(32 * arg2.length) + 128]
                                if 9975 * mem[(32 * idx) + (32 * arg2.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * arg2.length) + 160]):
                                    idx = idx + 1
                                    continue 
            return 0
    return 1
}

function sub_063f5991(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(sub_358ad2e2Address)
    staticcall sub_358ad2e2Address.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_358ad2e2Address)
    staticcall sub_358ad2e2Address.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(sub_9eb2e0a9Address)
        staticcall sub_9eb2e0a9Address.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_9eb2e0a9Address)
        staticcall sub_9eb2e0a9Address.0x70a08231 with:
                gas gas_remaining wei
               args arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(sub_0793465dAddress)
            staticcall sub_0793465dAddress.exchangeRateStored() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(sub_0793465dAddress)
            staticcall sub_0793465dAddress.0x70a08231 with:
                    gas gas_remaining wei
                   args arg1
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                require ext_code.size(LPAddress)
                staticcall LPAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_code.size(LPAddress)
                staticcall LPAddress.0x18160ddd with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(LPAddress)
                staticcall LPAddress.token0() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if ext_call.return_data[12 len 20] != address(token0Address):
                    if not 0 / ext_call.return_data[0]:
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                    require 0 / ext_call.return_data[0]
                    if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if 2 * 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])) < 2 * 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
                if not 0 / ext_call.return_data[0]:
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / Mask(112, 0, ext_call.return_data[32]))
                require 0 / ext_call.return_data[0]
                if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if 2 * 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])) < 2 * 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
            require ext_call.return_data[0]
            if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            require ext_code.size(LPAddress)
            staticcall LPAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(LPAddress)
            staticcall LPAddress.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(LPAddress)
            staticcall LPAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if ext_call.return_data[12 len 20] != address(token0Address):
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                    require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                require 0 / ext_call.return_data[0]
                if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if 2 * 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])) < 2 * 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
                require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) < 2 * 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / Mask(112, 0, ext_call.return_data[32]))
                require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
            require 0 / ext_call.return_data[0]
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if 2 * 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])) < 2 * 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) < 2 * 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0]
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        require ext_code.size(sub_0793465dAddress)
        staticcall sub_0793465dAddress.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_0793465dAddress)
        staticcall sub_0793465dAddress.0x70a08231 with:
                gas gas_remaining wei
               args arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(LPAddress)
            staticcall LPAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(LPAddress)
            staticcall LPAddress.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(LPAddress)
            staticcall LPAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if ext_call.return_data[12 len 20] != address(token0Address):
                if not 0 / ext_call.return_data[0]:
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])))
                require 0 / ext_call.return_data[0]
                if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
            if not 0 / ext_call.return_data[0]:
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])))
            require 0 / ext_call.return_data[0]
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0]
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        require ext_code.size(LPAddress)
        staticcall LPAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_code.size(LPAddress)
        staticcall LPAddress.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(LPAddress)
        staticcall LPAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if ext_call.return_data[12 len 20] != address(token0Address):
            if not 0 / ext_call.return_data[0]:
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])))
                require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
            require 0 / ext_call.return_data[0]
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
        if not 0 / ext_call.return_data[0]:
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
        require 0 / ext_call.return_data[0]
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
    require ext_call.return_data[0]
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    require ext_code.size(sub_9eb2e0a9Address)
    staticcall sub_9eb2e0a9Address.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_9eb2e0a9Address)
    staticcall sub_9eb2e0a9Address.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(sub_0793465dAddress)
        staticcall sub_0793465dAddress.exchangeRateStored() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(sub_0793465dAddress)
        staticcall sub_0793465dAddress.0x70a08231 with:
                gas gas_remaining wei
               args arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            require ext_code.size(LPAddress)
            staticcall LPAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_code.size(LPAddress)
            staticcall LPAddress.0x18160ddd with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(LPAddress)
            staticcall LPAddress.token0() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[12 len 20] != address(token0Address):
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if not 0 / ext_call.return_data[0]:
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                    require 0 / ext_call.return_data[0]
                    if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if 2 * 0 / ext_call.return_data[0] < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])) < 2 * 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
                require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / Mask(112, 0, ext_call.return_data[0]))
                require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
                if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] != 2:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])) < 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if not 0 / ext_call.return_data[0]:
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / Mask(112, 0, ext_call.return_data[32]))
                require 0 / ext_call.return_data[0]
                if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if 2 * 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])) < 2 * 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / Mask(112, 0, ext_call.return_data[32]))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
            if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])) < 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0]
        if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        require ext_code.size(LPAddress)
        staticcall LPAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_code.size(LPAddress)
        staticcall LPAddress.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(LPAddress)
        staticcall LPAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[12 len 20] != address(token0Address):
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if not 0 / ext_call.return_data[0]:
                    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        if Mask(112, 0, ext_call.return_data[0]) <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require Mask(112, 0, ext_call.return_data[0])
                        if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return (0 / Mask(112, 0, ext_call.return_data[0]))
                    require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
                require 0 / ext_call.return_data[0]
                if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if 2 * 0 / ext_call.return_data[0] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])) < 2 * 0 / ext_call.return_data[0]:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
                require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) < 2 * 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / Mask(112, 0, ext_call.return_data[0]))
                require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
            if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])) < 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) < 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if not 0 / ext_call.return_data[0]:
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    if Mask(112, 0, ext_call.return_data[32]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[32])
                    if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return (0 / Mask(112, 0, ext_call.return_data[32]))
                require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
            require 0 / ext_call.return_data[0]
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if 2 * 0 / ext_call.return_data[0] < 0:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])) < 2 * 0 / ext_call.return_data[0]:
                    revert with 0, 'SafeMath: addition overflow'
                return ((2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) < 2 * 0 / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (0 / Mask(112, 0, ext_call.return_data[32]))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
        if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] < 0:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])) < 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
                revert with 0, 'SafeMath: addition overflow'
            return ((2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) < 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        return ((2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
    require ext_call.return_data[0]
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    require ext_code.size(sub_0793465dAddress)
    staticcall sub_0793465dAddress.exchangeRateStored() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(sub_0793465dAddress)
    staticcall sub_0793465dAddress.0x70a08231 with:
            gas gas_remaining wei
           args arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        require ext_code.size(LPAddress)
        staticcall LPAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_code.size(LPAddress)
        staticcall LPAddress.0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(LPAddress)
        staticcall LPAddress.token0() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[12 len 20] != address(token0Address):
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if not 0 / ext_call.return_data[0]:
                    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])))
                require 0 / ext_call.return_data[0]
                if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
            if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if not 0 / ext_call.return_data[0]:
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])))
            require 0 / ext_call.return_data[0]
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
        if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
    require ext_call.return_data[0]
    if ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0] != ext_call.return_data[0]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    require ext_code.size(LPAddress)
    staticcall LPAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_code.size(LPAddress)
    staticcall LPAddress.0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(LPAddress)
    staticcall LPAddress.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[12 len 20] != address(token0Address):
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            if ext_call.return_data[0] <= 0:
                revert with 0, 'SafeMath: division by zero'
            require ext_call.return_data[0]
            if not 0 / ext_call.return_data[0]:
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    if Mask(112, 0, ext_call.return_data[0]) <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require Mask(112, 0, ext_call.return_data[0])
                    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                        revert with 0, 'SafeMath: addition overflow'
                    return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])))
                require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
                if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                    revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
            require 0 / ext_call.return_data[0]
            if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]:
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if Mask(112, 0, ext_call.return_data[0]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[0])
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[0])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]
        if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            if Mask(112, 0, ext_call.return_data[0]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[0])
            if 0 / Mask(112, 0, ext_call.return_data[0]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[0])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[0]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[0])
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[0])))
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        if ext_call.return_data[0] <= 0:
            revert with 0, 'SafeMath: division by zero'
        require ext_call.return_data[0]
        if not 0 / ext_call.return_data[0]:
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                if Mask(112, 0, ext_call.return_data[32]) <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require Mask(112, 0, ext_call.return_data[32])
                if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                    revert with 0, 'SafeMath: addition overflow'
                return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])))
            require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
            if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
                revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
        require 0 / ext_call.return_data[0]
        if 2 * 0 / ext_call.return_data[0] / 0 / ext_call.return_data[0] != 2:
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * 0 / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
    require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if ext_call.return_data[0] <= 0:
        revert with 0, 'SafeMath: division by zero'
    require ext_call.return_data[0]
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]:
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            if Mask(112, 0, ext_call.return_data[32]) <= 0:
                revert with 0, 'SafeMath: division by zero'
            require Mask(112, 0, ext_call.return_data[32])
            if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (0 / Mask(112, 0, ext_call.return_data[32])))
        require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
        if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
    require ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]
    if 2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] != 2:
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if (ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) < ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        revert with 0, 'SafeMath: addition overflow'
    if not ext_call.return_data[0] * ext_call.return_data[0] / 10^18:
        if Mask(112, 0, ext_call.return_data[32]) <= 0:
            revert with 0, 'SafeMath: division by zero'
        require Mask(112, 0, ext_call.return_data[32])
        if 0 / Mask(112, 0, ext_call.return_data[32]) < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (0 / Mask(112, 0, ext_call.return_data[32])))
    require ext_call.return_data[0] * ext_call.return_data[0] / 10^18
    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0] * ext_call.return_data[0] / 10^18 != Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 32, 33, 0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
    if Mask(112, 0, ext_call.return_data[32]) <= 0:
        revert with 0, 'SafeMath: division by zero'
    require Mask(112, 0, ext_call.return_data[32])
    if ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32]) < 0:
        revert with 0, 'SafeMath: addition overflow'
    return ((ext_call.return_data[0] * ext_call.return_data[0] / 10^18) + (2 * ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0]) + (ext_call.return_data[0] * ext_call.return_data[0] / 10^18 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[32])))
}

function sub_e91d0ef6(?) payable {
    require calldata.size - 4 >= 64
    mem[132] = arg1
    mem[164] = this.address
    mem[196] = arg2
    mem[96] = 100
    mem[132 len 28] = address(arg1) << 64
    mem[128 len 4] = unknown_0x23b872dd(?????)
    mem[228] = 32
    mem[260] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 32, 38, 0xfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[398 len 26]
    if ext_code.size(cakeAddress) <= 0:
        revert with 0, 'Address: call to non-contract'
    mem[292 len 96] = unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), Mask(224, 32, arg2) >> 32
    mem[416 len 4] = 0
    call cakeAddress with:
         gas gas_remaining wei
        args Mask(224, 32, arg2) << 480, mem[388 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), arg2
        if not unknown_0x23b872dd(?????), address(arg1) << 64:
            revert with 0, 
                        32,
                        42,
                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                        mem[402 len 14],
                        0,
                        mem[420 len 4]
        require ext_code.size(cakeAddress)
        if cakeAddress == address(token0Address):
            call cakeAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(arg1), arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return arg2
        staticcall cakeAddress.0xdd62ed3e with:
                gas gas_remaining wei
               args address(this.address), address(pancakeRouterAddress)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] + arg2 < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        mem[328] = address(pancakeRouterAddress)
        mem[360] = ext_call.return_data[0] + arg2
        mem[292] = 68
        mem[328 len 28] = Mask(224, 0, stor14)
        mem[324 len 4] = approve(address arg1, uint256 arg2)
        mem[392] = 32
        mem[424] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 32, 38, 0xfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[562 len 26]
        if ext_code.size(cakeAddress) <= 0:
            revert with 0, 'Address: call to non-contract'
        mem[456 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor14), uint32(stor14), Mask(224, 32, ext_call.return_data[0] + arg2) >> 32
        mem[548 len 4] = 0
        call cakeAddress with:
           funct uint32(stor14)
             gas gas_remaining wei
            args Mask(224, 32, ext_call.return_data[0] + arg2) << 224, mem[520 len 4]
        if not return_data.size:
            if not ext_call.success:
                revert with unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), arg2
            if not unknown_0x23b872dd(?????), address(arg1) << 64:
                revert with 0, 32, 42, 0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[566 len 22]
            require 2 < sub_9023d0da.length
            require 1 < sub_9023d0da.length
            mem[456] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[460] = arg2
            mem[492] = 0
            mem[556] = arg1
            mem[588] = block.timestamp
            mem[524] = 160
            if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
                mem[620] = sub_9023d0da.length
                if not sub_9023d0da.length:
                    require ext_code.size(address(pancakeRouterAddress))
                    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[456 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = ceil32(return_data.size) + 456
                    require return_data.size >= 32
                    _1775 = mem[456 len 4], Mask(224, 32, arg2) >> 32
                    require mem[456 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                    require mem[456 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                    require mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456] <= 4294967296 and mem[456 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]) + 32 <= return_data.size
                    mem[ceil32(return_data.size) + 456] = mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]
                    _1867 = mem[_1775 + 456]
                    mem[ceil32(return_data.size) + 488 len floor32(mem[_1775 + 456])] = mem[_1775 + 488 len floor32(mem[_1775 + 456])]
                    require 2 < mem[ceil32(return_data.size) + 456]
                    mem[(32 * _1867) + ceil32(return_data.size) + 488] = mem[ceil32(return_data.size) + 552]
                    return memory
                      from (32 * _1867) + ceil32(return_data.size) + 488
                       len 32
                mem[0] = 11
                mem[652] = address(sub_9023d0da.field_0)
                idx = 652
                s = 0
                while (32 * sub_9023d0da.length) + 652 > idx + 32:
                    mem[idx + 32] = sub_9023d0da[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[652 len 32 * sub_9023d0da.length]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[456 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 456
                require return_data.size >= 32
                _2277 = mem[456 len 4], Mask(224, 32, arg2) >> 32
                require mem[456 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[456 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456] <= 4294967296 and mem[456 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + 456] = mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]
                _2363 = mem[_2277 + 456]
                mem[ceil32(return_data.size) + 488 len floor32(mem[_2277 + 456])] = mem[_2277 + 488 len floor32(mem[_2277 + 456])]
                require 2 < mem[ceil32(return_data.size) + 456]
                mem[(32 * _2363) + ceil32(return_data.size) + 488] = mem[ceil32(return_data.size) + 552]
                return memory
                  from (32 * _2363) + ceil32(return_data.size) + 488
                   len 32
            mem[620] = sub_1b8e25f1.length
            if not sub_1b8e25f1.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[456 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 456
                require return_data.size >= 32
                _1777 = mem[456 len 4], Mask(224, 32, arg2) >> 32
                require mem[456 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[456 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456] <= 4294967296 and mem[456 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + 456] = mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]
                _1868 = mem[_1777 + 456]
                mem[ceil32(return_data.size) + 488 len floor32(mem[_1777 + 456])] = mem[_1777 + 488 len floor32(mem[_1777 + 456])]
                require 1 < mem[ceil32(return_data.size) + 456]
                mem[(32 * _1868) + ceil32(return_data.size) + 488] = mem[ceil32(return_data.size) + 520]
                return memory
                  from (32 * _1868) + ceil32(return_data.size) + 488
                   len 32
            mem[0] = 10
            mem[652] = address(sub_1b8e25f1.field_0)
            idx = 652
            s = 0
            while (32 * sub_1b8e25f1.length) + 652 > idx + 32:
                mem[idx + 32] = sub_1b8e25f1[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[652 len 32 * sub_1b8e25f1.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[456 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 456
            require return_data.size >= 32
            _2279 = mem[456 len 4], Mask(224, 32, arg2) >> 32
            require mem[456 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[456 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456] <= 4294967296 and mem[456 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + 456] = mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]
            _2364 = mem[_2279 + 456]
            mem[ceil32(return_data.size) + 488 len floor32(mem[_2279 + 456])] = mem[_2279 + 488 len floor32(mem[_2279 + 456])]
            require 1 < mem[ceil32(return_data.size) + 456]
            mem[(32 * _2364) + ceil32(return_data.size) + 488] = mem[ceil32(return_data.size) + 520]
            return memory
              from (32 * _2364) + ceil32(return_data.size) + 488
               len 32
        mem[456] = return_data.size
        mem[488 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size > 0:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size <= 0:
            require 2 < sub_9023d0da.length
            require 1 < sub_9023d0da.length
            mem[0] = 11
            mem[ceil32(return_data.size) + 457] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 461] = arg2
            mem[ceil32(return_data.size) + 493] = 0
            mem[ceil32(return_data.size) + 557] = arg1
            mem[ceil32(return_data.size) + 589] = block.timestamp
            mem[ceil32(return_data.size) + 525] = 160
            if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
                mem[ceil32(return_data.size) + 621] = sub_9023d0da.length
                if not sub_9023d0da.length:
                    require ext_code.size(address(pancakeRouterAddress))
                    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                    require return_data.size >= 32
                    _1689 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                    require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                    require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                    require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                    mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                    _1779 = mem[_1689 + ceil32(return_data.size) + 457]
                    mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1689 + ceil32(return_data.size) + 457])] = mem[_1689 + ceil32(return_data.size) + 489 len floor32(mem[_1689 + ceil32(return_data.size) + 457])]
                    require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                    mem[(32 * _1779) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                    return memory
                      from (32 * _1779) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                       len 32
                mem[0] = 11
                mem[ceil32(return_data.size) + 653] = address(sub_9023d0da.field_0)
                idx = ceil32(return_data.size) + 653
                s = 0
                while ceil32(return_data.size) + (32 * sub_9023d0da.length) + 653 > idx + 32:
                    mem[idx + 32] = sub_9023d0da[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[ceil32(return_data.size) + 653 len 32 * sub_9023d0da.length]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _2281 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _2365 = mem[_2281 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2281 + ceil32(return_data.size) + 457])] = mem[_2281 + ceil32(return_data.size) + 489 len floor32(mem[_2281 + ceil32(return_data.size) + 457])]
                require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _2365) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                return memory
                  from (32 * _2365) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[ceil32(return_data.size) + 621] = sub_1b8e25f1.length
            if not sub_1b8e25f1.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _1691 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _1780 = mem[_1691 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1691 + ceil32(return_data.size) + 457])] = mem[_1691 + ceil32(return_data.size) + 489 len floor32(mem[_1691 + ceil32(return_data.size) + 457])]
                require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _1780) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
                return memory
                  from (32 * _1780) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[0] = 10
            mem[ceil32(return_data.size) + 653] = address(sub_1b8e25f1.field_0)
            idx = ceil32(return_data.size) + 653
            s = 0
            while ceil32(return_data.size) + (32 * sub_1b8e25f1.length) + 653 > idx + 32:
                mem[idx + 32] = sub_1b8e25f1[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[ceil32(return_data.size) + 653 len 32 * sub_1b8e25f1.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _2283 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _2366 = mem[_2283 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2283 + ceil32(return_data.size) + 457])] = mem[_2283 + ceil32(return_data.size) + 489 len floor32(mem[_2283 + ceil32(return_data.size) + 457])]
            require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _2366) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
            return memory
              from (32 * _2366) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        require return_data.size >= 32
        if not mem[488]:
            revert with 0, 
                        32,
                        42,
                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                        mem[ceil32(return_data.size) + 567 len 22]
        require 2 < sub_9023d0da.length
        require 1 < sub_9023d0da.length
        mem[0] = 11
        mem[ceil32(return_data.size) + 457] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 461] = arg2
        mem[ceil32(return_data.size) + 493] = 0
        mem[ceil32(return_data.size) + 557] = arg1
        mem[ceil32(return_data.size) + 589] = block.timestamp
        mem[ceil32(return_data.size) + 525] = 160
        if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
            mem[ceil32(return_data.size) + 621] = sub_9023d0da.length
            if not sub_9023d0da.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _1781 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _1871 = mem[_1781 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1781 + ceil32(return_data.size) + 457])] = mem[_1781 + ceil32(return_data.size) + 489 len floor32(mem[_1781 + ceil32(return_data.size) + 457])]
                require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _1871) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                return memory
                  from (32 * _1871) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[0] = 11
            mem[ceil32(return_data.size) + 653] = address(sub_9023d0da.field_0)
            idx = ceil32(return_data.size) + 653
            s = 0
            while ceil32(return_data.size) + (32 * sub_9023d0da.length) + 653 > idx + 32:
                mem[idx + 32] = sub_9023d0da[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[ceil32(return_data.size) + 653 len 32 * sub_9023d0da.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _2285 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _2367 = mem[_2285 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2285 + ceil32(return_data.size) + 457])] = mem[_2285 + ceil32(return_data.size) + 489 len floor32(mem[_2285 + ceil32(return_data.size) + 457])]
            require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _2367) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
            return memory
              from (32 * _2367) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[ceil32(return_data.size) + 621] = sub_1b8e25f1.length
        if not sub_1b8e25f1.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _1783 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _1872 = mem[_1783 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1783 + ceil32(return_data.size) + 457])] = mem[_1783 + ceil32(return_data.size) + 489 len floor32(mem[_1783 + ceil32(return_data.size) + 457])]
            require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _1872) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
            return memory
              from (32 * _1872) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[0] = 10
        mem[ceil32(return_data.size) + 653] = address(sub_1b8e25f1.field_0)
        idx = ceil32(return_data.size) + 653
        s = 0
        while ceil32(return_data.size) + (32 * sub_1b8e25f1.length) + 653 > idx + 32:
            mem[idx + 32] = sub_1b8e25f1[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[ceil32(return_data.size) + 653 len 32 * sub_1b8e25f1.length]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
        require return_data.size >= 32
        _2287 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
        require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
        mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
        _2368 = mem[_2287 + ceil32(return_data.size) + 457]
        mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2287 + ceil32(return_data.size) + 457])] = mem[_2287 + ceil32(return_data.size) + 489 len floor32(mem[_2287 + ceil32(return_data.size) + 457])]
        require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
        mem[(32 * _2368) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
        return memory
          from (32 * _2368) + ceil32(return_data.size) + ceil32(return_data.size) + 489
           len 32
    mem[292] = return_data.size
    mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
    if not ext_call.success:
        if return_data.size > 0:
            revert with ext_call.return_data[0 len return_data.size]
        revert with 0, 'SafeERC20: low-level call failed'
    if return_data.size <= 0:
        require ext_code.size(cakeAddress)
        if cakeAddress == address(token0Address):
            call cakeAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(arg1), arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return arg2
        staticcall cakeAddress.0xdd62ed3e with:
                gas gas_remaining wei
               args address(this.address), address(pancakeRouterAddress)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] + arg2 < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        mem[ceil32(return_data.size) + 329] = address(pancakeRouterAddress)
        mem[ceil32(return_data.size) + 361] = ext_call.return_data[0] + arg2
        mem[ceil32(return_data.size) + 293] = 68
        mem[ceil32(return_data.size) + 329 len 28] = Mask(224, 0, stor14)
        mem[ceil32(return_data.size) + 325 len 4] = approve(address arg1, uint256 arg2)
        mem[ceil32(return_data.size) + 393] = 32
        mem[ceil32(return_data.size) + 425] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 
                        32,
                        38,
                        0xfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                        mem[ceil32(return_data.size) + 563 len 26]
        if ext_code.size(cakeAddress) <= 0:
            revert with 0, 'Address: call to non-contract'
        mem[ceil32(return_data.size) + 457 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor14), uint32(stor14), Mask(224, 32, ext_call.return_data[0] + arg2) >> 32
        mem[ceil32(return_data.size) + 549 len 4] = 0
        call cakeAddress with:
           funct uint32(stor14)
             gas gas_remaining wei
            args Mask(224, 32, ext_call.return_data[0] + arg2) << 224, mem[ceil32(return_data.size) + 521 len 4]
        if not return_data.size:
            if not ext_call.success:
                revert with unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), arg2
            if not unknown_0x23b872dd(?????), address(arg1) << 64:
                revert with 0, 
                            32,
                            42,
                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 567 len 22]
            require 2 < sub_9023d0da.length
            require 1 < sub_9023d0da.length
            mem[0] = 11
            mem[ceil32(return_data.size) + 457] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 461] = arg2
            mem[ceil32(return_data.size) + 493] = 0
            mem[ceil32(return_data.size) + 557] = arg1
            mem[ceil32(return_data.size) + 589] = block.timestamp
            mem[ceil32(return_data.size) + 525] = 160
            if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
                mem[ceil32(return_data.size) + 621] = sub_9023d0da.length
                if not sub_9023d0da.length:
                    require ext_code.size(address(pancakeRouterAddress))
                    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                    require return_data.size >= 32
                    _1787 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                    require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                    require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                    require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                    mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                    _1875 = mem[_1787 + ceil32(return_data.size) + 457]
                    mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1787 + ceil32(return_data.size) + 457])] = mem[_1787 + ceil32(return_data.size) + 489 len floor32(mem[_1787 + ceil32(return_data.size) + 457])]
                    require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                    mem[(32 * _1875) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                    return memory
                      from (32 * _1875) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                       len 32
                mem[0] = 11
                mem[ceil32(return_data.size) + 653] = address(sub_9023d0da.field_0)
                idx = ceil32(return_data.size) + 653
                s = 0
                while ceil32(return_data.size) + (32 * sub_9023d0da.length) + 653 > idx + 32:
                    mem[idx + 32] = sub_9023d0da[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[ceil32(return_data.size) + 653 len 32 * sub_9023d0da.length]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _2293 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _2371 = mem[_2293 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2293 + ceil32(return_data.size) + 457])] = mem[_2293 + ceil32(return_data.size) + 489 len floor32(mem[_2293 + ceil32(return_data.size) + 457])]
                require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _2371) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                return memory
                  from (32 * _2371) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[ceil32(return_data.size) + 621] = sub_1b8e25f1.length
            if not sub_1b8e25f1.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _1789 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _1876 = mem[_1789 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1789 + ceil32(return_data.size) + 457])] = mem[_1789 + ceil32(return_data.size) + 489 len floor32(mem[_1789 + ceil32(return_data.size) + 457])]
                require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _1876) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
                return memory
                  from (32 * _1876) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[0] = 10
            mem[ceil32(return_data.size) + 653] = address(sub_1b8e25f1.field_0)
            idx = ceil32(return_data.size) + 653
            s = 0
            while ceil32(return_data.size) + (32 * sub_1b8e25f1.length) + 653 > idx + 32:
                mem[idx + 32] = sub_1b8e25f1[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[ceil32(return_data.size) + 653 len 32 * sub_1b8e25f1.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _2295 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _2372 = mem[_2295 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2295 + ceil32(return_data.size) + 457])] = mem[_2295 + ceil32(return_data.size) + 489 len floor32(mem[_2295 + ceil32(return_data.size) + 457])]
            require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _2372) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
            return memory
              from (32 * _2372) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[ceil32(return_data.size) + 457] = return_data.size
        mem[ceil32(return_data.size) + 489 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size > 0:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size <= 0:
            require 2 < sub_9023d0da.length
            require 1 < sub_9023d0da.length
            mem[0] = 11
            mem[(2 * ceil32(return_data.size)) + 458] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 462] = arg2
            mem[(2 * ceil32(return_data.size)) + 494] = 0
            mem[(2 * ceil32(return_data.size)) + 558] = arg1
            mem[(2 * ceil32(return_data.size)) + 590] = block.timestamp
            mem[(2 * ceil32(return_data.size)) + 526] = 160
            if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
                mem[(2 * ceil32(return_data.size)) + 622] = sub_9023d0da.length
                if not sub_9023d0da.length:
                    require ext_code.size(address(pancakeRouterAddress))
                    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 458
                    require return_data.size >= 32
                    _1705 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                    require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                    require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                    _1791 = mem[_1705 + (2 * ceil32(return_data.size)) + 458]
                    mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1705 + (2 * ceil32(return_data.size)) + 458])] = mem[_1705 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1705 + (2 * ceil32(return_data.size)) + 458])]
                    require 2 < mem[(4 * ceil32(return_data.size)) + 458]
                    mem[(32 * _1791) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
                    return memory
                      from (32 * _1791) + (4 * ceil32(return_data.size)) + 490
                       len 32
                mem[0] = 11
                mem[(2 * ceil32(return_data.size)) + 654] = address(sub_9023d0da.field_0)
                idx = (2 * ceil32(return_data.size)) + 654
                s = 0
                while (2 * ceil32(return_data.size)) + (32 * sub_9023d0da.length) + 654 > idx + 32:
                    mem[idx + 32] = sub_9023d0da[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_9023d0da.length) - (2 * ceil32(return_data.size))]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 458
                require return_data.size >= 32
                _2297 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                _2373 = mem[_2297 + (2 * ceil32(return_data.size)) + 458]
                mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2297 + (2 * ceil32(return_data.size)) + 458])] = mem[_2297 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2297 + (2 * ceil32(return_data.size)) + 458])]
                require 2 < mem[(4 * ceil32(return_data.size)) + 458]
                mem[(32 * _2373) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
                return memory
                  from (32 * _2373) + (4 * ceil32(return_data.size)) + 490
                   len 32
            mem[(2 * ceil32(return_data.size)) + 622] = sub_1b8e25f1.length
            if not sub_1b8e25f1.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 458
                require return_data.size >= 32
                _1707 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                _1792 = mem[_1707 + (2 * ceil32(return_data.size)) + 458]
                mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1707 + (2 * ceil32(return_data.size)) + 458])] = mem[_1707 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1707 + (2 * ceil32(return_data.size)) + 458])]
                require 1 < mem[(4 * ceil32(return_data.size)) + 458]
                mem[(32 * _1792) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
                return memory
                  from (32 * _1792) + (4 * ceil32(return_data.size)) + 490
                   len 32
            mem[0] = 10
            mem[(2 * ceil32(return_data.size)) + 654] = address(sub_1b8e25f1.field_0)
            idx = (2 * ceil32(return_data.size)) + 654
            s = 0
            while (2 * ceil32(return_data.size)) + (32 * sub_1b8e25f1.length) + 654 > idx + 32:
                mem[idx + 32] = sub_1b8e25f1[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_1b8e25f1.length) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _2299 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _2374 = mem[_2299 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2299 + (2 * ceil32(return_data.size)) + 458])] = mem[_2299 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2299 + (2 * ceil32(return_data.size)) + 458])]
            require 1 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _2374) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
            return memory
              from (32 * _2374) + (4 * ceil32(return_data.size)) + 490
               len 32
        require return_data.size >= 32
        if not mem[ceil32(return_data.size) + 489]:
            revert with 0, 
                        32,
                        42,
                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                        mem[(2 * ceil32(return_data.size)) + 568 len (2 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 22]
        require 2 < sub_9023d0da.length
        require 1 < sub_9023d0da.length
        mem[0] = 11
        mem[(2 * ceil32(return_data.size)) + 458] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[(2 * ceil32(return_data.size)) + 462] = arg2
        mem[(2 * ceil32(return_data.size)) + 494] = 0
        mem[(2 * ceil32(return_data.size)) + 558] = arg1
        mem[(2 * ceil32(return_data.size)) + 590] = block.timestamp
        mem[(2 * ceil32(return_data.size)) + 526] = 160
        if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
            mem[(2 * ceil32(return_data.size)) + 622] = sub_9023d0da.length
            if not sub_9023d0da.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 458
                require return_data.size >= 32
                _1793 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                _1879 = mem[_1793 + (2 * ceil32(return_data.size)) + 458]
                mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1793 + (2 * ceil32(return_data.size)) + 458])] = mem[_1793 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1793 + (2 * ceil32(return_data.size)) + 458])]
                require 2 < mem[(4 * ceil32(return_data.size)) + 458]
                mem[(32 * _1879) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
                return memory
                  from (32 * _1879) + (4 * ceil32(return_data.size)) + 490
                   len 32
            mem[0] = 11
            mem[(2 * ceil32(return_data.size)) + 654] = address(sub_9023d0da.field_0)
            idx = (2 * ceil32(return_data.size)) + 654
            s = 0
            while (2 * ceil32(return_data.size)) + (32 * sub_9023d0da.length) + 654 > idx + 32:
                mem[idx + 32] = sub_9023d0da[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_9023d0da.length) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _2301 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _2375 = mem[_2301 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2301 + (2 * ceil32(return_data.size)) + 458])] = mem[_2301 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2301 + (2 * ceil32(return_data.size)) + 458])]
            require 2 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _2375) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
            return memory
              from (32 * _2375) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[(2 * ceil32(return_data.size)) + 622] = sub_1b8e25f1.length
        if not sub_1b8e25f1.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _1795 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _1880 = mem[_1795 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1795 + (2 * ceil32(return_data.size)) + 458])] = mem[_1795 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1795 + (2 * ceil32(return_data.size)) + 458])]
            require 1 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _1880) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
            return memory
              from (32 * _1880) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[0] = 10
        mem[(2 * ceil32(return_data.size)) + 654] = address(sub_1b8e25f1.field_0)
        idx = (2 * ceil32(return_data.size)) + 654
        s = 0
        while (2 * ceil32(return_data.size)) + (32 * sub_1b8e25f1.length) + 654 > idx + 32:
            mem[idx + 32] = sub_1b8e25f1[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_1b8e25f1.length) - (2 * ceil32(return_data.size))]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 458
        require return_data.size >= 32
        _2303 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
        mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
        _2376 = mem[_2303 + (2 * ceil32(return_data.size)) + 458]
        mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2303 + (2 * ceil32(return_data.size)) + 458])] = mem[_2303 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2303 + (2 * ceil32(return_data.size)) + 458])]
        require 1 < mem[(4 * ceil32(return_data.size)) + 458]
        mem[(32 * _2376) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
        return memory
          from (32 * _2376) + (4 * ceil32(return_data.size)) + 490
           len 32
    require return_data.size >= 32
    if not mem[324]:
        revert with 0, 
                    32,
                    42,
                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                    mem[ceil32(return_data.size) + 403 len 22]
    require ext_code.size(cakeAddress)
    if cakeAddress == address(token0Address):
        call cakeAddress.0xa9059cbb with:
             gas gas_remaining wei
            args address(arg1), arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return arg2
    staticcall cakeAddress.0xdd62ed3e with:
            gas gas_remaining wei
           args address(this.address), address(pancakeRouterAddress)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] + arg2 < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    mem[ceil32(return_data.size) + 329] = address(pancakeRouterAddress)
    mem[ceil32(return_data.size) + 361] = ext_call.return_data[0] + arg2
    mem[ceil32(return_data.size) + 293] = 68
    mem[ceil32(return_data.size) + 329 len 28] = Mask(224, 0, stor14)
    mem[ceil32(return_data.size) + 325 len 4] = approve(address arg1, uint256 arg2)
    mem[ceil32(return_data.size) + 393] = 32
    mem[ceil32(return_data.size) + 425] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 
                    32,
                    38,
                    0xfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                    mem[ceil32(return_data.size) + 563 len 26]
    if ext_code.size(cakeAddress) <= 0:
        revert with 0, 'Address: call to non-contract'
    mem[ceil32(return_data.size) + 457 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor14), uint32(stor14), Mask(224, 32, ext_call.return_data[0] + arg2) >> 32
    mem[ceil32(return_data.size) + 549 len 4] = 0
    call cakeAddress with:
       funct uint32(stor14)
         gas gas_remaining wei
        args Mask(224, 32, ext_call.return_data[0] + arg2) << 224, mem[ceil32(return_data.size) + 521 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), arg2
        if not unknown_0x23b872dd(?????), address(arg1) << 64:
            revert with 0, 
                        32,
                        42,
                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                        mem[ceil32(return_data.size) + 567 len 22]
        require 2 < sub_9023d0da.length
        require 1 < sub_9023d0da.length
        mem[0] = 11
        mem[ceil32(return_data.size) + 457] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 461] = arg2
        mem[ceil32(return_data.size) + 493] = 0
        mem[ceil32(return_data.size) + 557] = arg1
        mem[ceil32(return_data.size) + 589] = block.timestamp
        mem[ceil32(return_data.size) + 525] = 160
        if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
            mem[ceil32(return_data.size) + 621] = sub_9023d0da.length
            if not sub_9023d0da.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _1799 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _1883 = mem[_1799 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1799 + ceil32(return_data.size) + 457])] = mem[_1799 + ceil32(return_data.size) + 489 len floor32(mem[_1799 + ceil32(return_data.size) + 457])]
                require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _1883) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                return memory
                  from (32 * _1883) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[0] = 11
            mem[ceil32(return_data.size) + 653] = address(sub_9023d0da.field_0)
            idx = ceil32(return_data.size) + 653
            s = 0
            while ceil32(return_data.size) + (32 * sub_9023d0da.length) + 653 > idx + 32:
                mem[idx + 32] = sub_9023d0da[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[ceil32(return_data.size) + 653 len 32 * sub_9023d0da.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _2309 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _2379 = mem[_2309 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2309 + ceil32(return_data.size) + 457])] = mem[_2309 + ceil32(return_data.size) + 489 len floor32(mem[_2309 + ceil32(return_data.size) + 457])]
            require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _2379) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
            return memory
              from (32 * _2379) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[ceil32(return_data.size) + 621] = sub_1b8e25f1.length
        if not sub_1b8e25f1.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _1801 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _1884 = mem[_1801 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1801 + ceil32(return_data.size) + 457])] = mem[_1801 + ceil32(return_data.size) + 489 len floor32(mem[_1801 + ceil32(return_data.size) + 457])]
            require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _1884) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
            return memory
              from (32 * _1884) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[0] = 10
        mem[ceil32(return_data.size) + 653] = address(sub_1b8e25f1.field_0)
        idx = ceil32(return_data.size) + 653
        s = 0
        while ceil32(return_data.size) + (32 * sub_1b8e25f1.length) + 653 > idx + 32:
            mem[idx + 32] = sub_1b8e25f1[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[ceil32(return_data.size) + 653 len 32 * sub_1b8e25f1.length]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
        require return_data.size >= 32
        _2311 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
        require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
        mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
        _2380 = mem[_2311 + ceil32(return_data.size) + 457]
        mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2311 + ceil32(return_data.size) + 457])] = mem[_2311 + ceil32(return_data.size) + 489 len floor32(mem[_2311 + ceil32(return_data.size) + 457])]
        require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
        mem[(32 * _2380) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
        return memory
          from (32 * _2380) + ceil32(return_data.size) + ceil32(return_data.size) + 489
           len 32
    mem[ceil32(return_data.size) + 457] = return_data.size
    mem[ceil32(return_data.size) + 489 len return_data.size] = ext_call.return_data[0 len return_data.size]
    if not ext_call.success:
        if return_data.size > 0:
            revert with ext_call.return_data[0 len return_data.size]
        revert with 0, 'SafeERC20: low-level call failed'
    if return_data.size <= 0:
        require 2 < sub_9023d0da.length
        require 1 < sub_9023d0da.length
        mem[0] = 11
        mem[(2 * ceil32(return_data.size)) + 458] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[(2 * ceil32(return_data.size)) + 462] = arg2
        mem[(2 * ceil32(return_data.size)) + 494] = 0
        mem[(2 * ceil32(return_data.size)) + 558] = arg1
        mem[(2 * ceil32(return_data.size)) + 590] = block.timestamp
        mem[(2 * ceil32(return_data.size)) + 526] = 160
        if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
            mem[(2 * ceil32(return_data.size)) + 622] = sub_9023d0da.length
            if not sub_9023d0da.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 458
                require return_data.size >= 32
                _1721 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                _1803 = mem[_1721 + (2 * ceil32(return_data.size)) + 458]
                mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1721 + (2 * ceil32(return_data.size)) + 458])] = mem[_1721 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1721 + (2 * ceil32(return_data.size)) + 458])]
                require 2 < mem[(4 * ceil32(return_data.size)) + 458]
                mem[(32 * _1803) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
                return memory
                  from (32 * _1803) + (4 * ceil32(return_data.size)) + 490
                   len 32
            mem[0] = 11
            mem[(2 * ceil32(return_data.size)) + 654] = address(sub_9023d0da.field_0)
            idx = (2 * ceil32(return_data.size)) + 654
            s = 0
            while (2 * ceil32(return_data.size)) + (32 * sub_9023d0da.length) + 654 > idx + 32:
                mem[idx + 32] = sub_9023d0da[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_9023d0da.length) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _2313 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _2381 = mem[_2313 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2313 + (2 * ceil32(return_data.size)) + 458])] = mem[_2313 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2313 + (2 * ceil32(return_data.size)) + 458])]
            require 2 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _2381) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
            return memory
              from (32 * _2381) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[(2 * ceil32(return_data.size)) + 622] = sub_1b8e25f1.length
        if not sub_1b8e25f1.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _1723 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _1804 = mem[_1723 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1723 + (2 * ceil32(return_data.size)) + 458])] = mem[_1723 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1723 + (2 * ceil32(return_data.size)) + 458])]
            require 1 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _1804) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
            return memory
              from (32 * _1804) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[0] = 10
        mem[(2 * ceil32(return_data.size)) + 654] = address(sub_1b8e25f1.field_0)
        idx = (2 * ceil32(return_data.size)) + 654
        s = 0
        while (2 * ceil32(return_data.size)) + (32 * sub_1b8e25f1.length) + 654 > idx + 32:
            mem[idx + 32] = sub_1b8e25f1[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_1b8e25f1.length) - (2 * ceil32(return_data.size))]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 458
        require return_data.size >= 32
        _2315 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
        mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
        _2382 = mem[_2315 + (2 * ceil32(return_data.size)) + 458]
        mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2315 + (2 * ceil32(return_data.size)) + 458])] = mem[_2315 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2315 + (2 * ceil32(return_data.size)) + 458])]
        require 1 < mem[(4 * ceil32(return_data.size)) + 458]
        mem[(32 * _2382) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
        return memory
          from (32 * _2382) + (4 * ceil32(return_data.size)) + 490
           len 32
    require return_data.size >= 32
    if not mem[ceil32(return_data.size) + 489]:
        revert with 0, 
                    32,
                    42,
                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                    mem[(2 * ceil32(return_data.size)) + 568 len (2 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 22]
    require 2 < sub_9023d0da.length
    require 1 < sub_9023d0da.length
    mem[0] = 11
    mem[(2 * ceil32(return_data.size)) + 458] = 0x38ed173900000000000000000000000000000000000000000000000000000000
    mem[(2 * ceil32(return_data.size)) + 462] = arg2
    mem[(2 * ceil32(return_data.size)) + 494] = 0
    mem[(2 * ceil32(return_data.size)) + 558] = arg1
    mem[(2 * ceil32(return_data.size)) + 590] = block.timestamp
    mem[(2 * ceil32(return_data.size)) + 526] = 160
    if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
        mem[(2 * ceil32(return_data.size)) + 622] = sub_9023d0da.length
        if not sub_9023d0da.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _1805 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _1887 = mem[_1805 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1805 + (2 * ceil32(return_data.size)) + 458])] = mem[_1805 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1805 + (2 * ceil32(return_data.size)) + 458])]
            require 2 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _1887) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
            return memory
              from (32 * _1887) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[0] = 11
        mem[(2 * ceil32(return_data.size)) + 654] = address(sub_9023d0da.field_0)
        idx = (2 * ceil32(return_data.size)) + 654
        s = 0
        while (2 * ceil32(return_data.size)) + (32 * sub_9023d0da.length) + 654 > idx + 32:
            mem[idx + 32] = sub_9023d0da[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_9023d0da.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_9023d0da.length) - (2 * ceil32(return_data.size))]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 458
        require return_data.size >= 32
        _2317 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
        mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
        _2383 = mem[_2317 + (2 * ceil32(return_data.size)) + 458]
        mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2317 + (2 * ceil32(return_data.size)) + 458])] = mem[_2317 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2317 + (2 * ceil32(return_data.size)) + 458])]
        require 2 < mem[(4 * ceil32(return_data.size)) + 458]
        mem[(32 * _2383) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
        return memory
          from (32 * _2383) + (4 * ceil32(return_data.size)) + 490
           len 32
    mem[(2 * ceil32(return_data.size)) + 622] = sub_1b8e25f1.length
    if not sub_1b8e25f1.length:
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 458
        require return_data.size >= 32
        _1807 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
        mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
        _1888 = mem[_1807 + (2 * ceil32(return_data.size)) + 458]
        mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1807 + (2 * ceil32(return_data.size)) + 458])] = mem[_1807 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1807 + (2 * ceil32(return_data.size)) + 458])]
        require 1 < mem[(4 * ceil32(return_data.size)) + 458]
        mem[(32 * _1888) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
        return memory
          from (32 * _1888) + (4 * ceil32(return_data.size)) + 490
           len 32
    mem[0] = 10
    mem[(2 * ceil32(return_data.size)) + 654] = address(sub_1b8e25f1.field_0)
    idx = (2 * ceil32(return_data.size)) + 654
    s = 0
    while (2 * ceil32(return_data.size)) + (32 * sub_1b8e25f1.length) + 654 > idx + 32:
        mem[idx + 32] = sub_1b8e25f1[s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    require ext_code.size(address(pancakeRouterAddress))
    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
         gas gas_remaining wei
        args arg2, 0, 160, address(arg1), block.timestamp, sub_1b8e25f1.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_1b8e25f1.length) - (2 * ceil32(return_data.size))]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (4 * ceil32(return_data.size)) + 458
    require return_data.size >= 32
    _2319 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
    require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
    require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
    require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
    mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
    _2384 = mem[_2319 + (2 * ceil32(return_data.size)) + 458]
    mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2319 + (2 * ceil32(return_data.size)) + 458])] = mem[_2319 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2319 + (2 * ceil32(return_data.size)) + 458])]
    require 1 < mem[(4 * ceil32(return_data.size)) + 458]
    mem[(32 * _2384) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
    return memory
      from (32 * _2384) + (4 * ceil32(return_data.size)) + 490
       len 32
}

function sub_870b2dbc(?) payable {
    require calldata.size - 4 >= 64
    mem[132] = arg1
    mem[164] = this.address
    mem[196] = arg2
    mem[96] = 100
    mem[132 len 28] = address(arg1) << 64
    mem[128 len 4] = unknown_0x23b872dd(?????)
    mem[228] = 32
    mem[260] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 32, 38, 0xfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[398 len 26]
    if ext_code.size(sub_077b2e0fAddress) <= 0:
        revert with 0, 'Address: call to non-contract'
    mem[292 len 96] = unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), Mask(224, 32, arg2) >> 32
    mem[416 len 4] = 0
    call sub_077b2e0fAddress with:
         gas gas_remaining wei
        args Mask(224, 32, arg2) << 480, mem[388 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), arg2
        if not unknown_0x23b872dd(?????), address(arg1) << 64:
            revert with 0, 
                        32,
                        42,
                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                        mem[402 len 14],
                        0,
                        mem[420 len 4]
        require ext_code.size(sub_077b2e0fAddress)
        if sub_077b2e0fAddress == address(token0Address):
            call sub_077b2e0fAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(arg1), arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return arg2
        staticcall sub_077b2e0fAddress.0xdd62ed3e with:
                gas gas_remaining wei
               args address(this.address), address(pancakeRouterAddress)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] + arg2 < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        mem[328] = address(pancakeRouterAddress)
        mem[360] = ext_call.return_data[0] + arg2
        mem[292] = 68
        mem[328 len 28] = Mask(224, 0, stor14)
        mem[324 len 4] = approve(address arg1, uint256 arg2)
        mem[392] = 32
        mem[424] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 32, 38, 0xfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c, mem[562 len 26]
        if ext_code.size(sub_077b2e0fAddress) <= 0:
            revert with 0, 'Address: call to non-contract'
        mem[456 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor14), uint32(stor14), Mask(224, 32, ext_call.return_data[0] + arg2) >> 32
        mem[548 len 4] = 0
        call sub_077b2e0fAddress with:
           funct uint32(stor14)
             gas gas_remaining wei
            args Mask(224, 32, ext_call.return_data[0] + arg2) << 224, mem[520 len 4]
        if not return_data.size:
            if not ext_call.success:
                revert with unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), arg2
            if not unknown_0x23b872dd(?????), address(arg1) << 64:
                revert with 0, 32, 42, 0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[566 len 22]
            require 2 < sub_c88f1eae.length
            require 1 < sub_c88f1eae.length
            mem[456] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[460] = arg2
            mem[492] = 0
            mem[556] = arg1
            mem[588] = block.timestamp
            mem[524] = 160
            if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
                mem[620] = sub_c88f1eae.length
                if not sub_c88f1eae.length:
                    require ext_code.size(address(pancakeRouterAddress))
                    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[456 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = ceil32(return_data.size) + 456
                    require return_data.size >= 32
                    _1775 = mem[456 len 4], Mask(224, 32, arg2) >> 32
                    require mem[456 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                    require mem[456 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                    require mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456] <= 4294967296 and mem[456 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]) + 32 <= return_data.size
                    mem[ceil32(return_data.size) + 456] = mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]
                    _1867 = mem[_1775 + 456]
                    mem[ceil32(return_data.size) + 488 len floor32(mem[_1775 + 456])] = mem[_1775 + 488 len floor32(mem[_1775 + 456])]
                    require 2 < mem[ceil32(return_data.size) + 456]
                    mem[(32 * _1867) + ceil32(return_data.size) + 488] = mem[ceil32(return_data.size) + 552]
                    return memory
                      from (32 * _1867) + ceil32(return_data.size) + 488
                       len 32
                mem[0] = 13
                mem[652] = address(sub_c88f1eae.field_0)
                idx = 652
                s = 0
                while (32 * sub_c88f1eae.length) + 652 > idx + 32:
                    mem[idx + 32] = sub_c88f1eae[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[652 len 32 * sub_c88f1eae.length]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[456 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 456
                require return_data.size >= 32
                _2277 = mem[456 len 4], Mask(224, 32, arg2) >> 32
                require mem[456 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[456 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456] <= 4294967296 and mem[456 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + 456] = mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]
                _2363 = mem[_2277 + 456]
                mem[ceil32(return_data.size) + 488 len floor32(mem[_2277 + 456])] = mem[_2277 + 488 len floor32(mem[_2277 + 456])]
                require 2 < mem[ceil32(return_data.size) + 456]
                mem[(32 * _2363) + ceil32(return_data.size) + 488] = mem[ceil32(return_data.size) + 552]
                return memory
                  from (32 * _2363) + ceil32(return_data.size) + 488
                   len 32
            mem[620] = sub_448f2946.length
            if not sub_448f2946.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[456 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 456
                require return_data.size >= 32
                _1777 = mem[456 len 4], Mask(224, 32, arg2) >> 32
                require mem[456 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[456 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456] <= 4294967296 and mem[456 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + 456] = mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]
                _1868 = mem[_1777 + 456]
                mem[ceil32(return_data.size) + 488 len floor32(mem[_1777 + 456])] = mem[_1777 + 488 len floor32(mem[_1777 + 456])]
                require 1 < mem[ceil32(return_data.size) + 456]
                mem[(32 * _1868) + ceil32(return_data.size) + 488] = mem[ceil32(return_data.size) + 520]
                return memory
                  from (32 * _1868) + ceil32(return_data.size) + 488
                   len 32
            mem[0] = 12
            mem[652] = address(sub_448f2946.field_0)
            idx = 652
            s = 0
            while (32 * sub_448f2946.length) + 652 > idx + 32:
                mem[idx + 32] = sub_448f2946[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[652 len 32 * sub_448f2946.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[456 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 456
            require return_data.size >= 32
            _2279 = mem[456 len 4], Mask(224, 32, arg2) >> 32
            require mem[456 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[456 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456] <= 4294967296 and mem[456 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + 456] = mem[mem[456 len 4], Mask(224, 32, arg2) >> 32 + 456]
            _2364 = mem[_2279 + 456]
            mem[ceil32(return_data.size) + 488 len floor32(mem[_2279 + 456])] = mem[_2279 + 488 len floor32(mem[_2279 + 456])]
            require 1 < mem[ceil32(return_data.size) + 456]
            mem[(32 * _2364) + ceil32(return_data.size) + 488] = mem[ceil32(return_data.size) + 520]
            return memory
              from (32 * _2364) + ceil32(return_data.size) + 488
               len 32
        mem[456] = return_data.size
        mem[488 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size > 0:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size <= 0:
            require 2 < sub_c88f1eae.length
            require 1 < sub_c88f1eae.length
            mem[0] = 13
            mem[ceil32(return_data.size) + 457] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 461] = arg2
            mem[ceil32(return_data.size) + 493] = 0
            mem[ceil32(return_data.size) + 557] = arg1
            mem[ceil32(return_data.size) + 589] = block.timestamp
            mem[ceil32(return_data.size) + 525] = 160
            if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
                mem[ceil32(return_data.size) + 621] = sub_c88f1eae.length
                if not sub_c88f1eae.length:
                    require ext_code.size(address(pancakeRouterAddress))
                    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                    require return_data.size >= 32
                    _1689 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                    require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                    require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                    require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                    mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                    _1779 = mem[_1689 + ceil32(return_data.size) + 457]
                    mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1689 + ceil32(return_data.size) + 457])] = mem[_1689 + ceil32(return_data.size) + 489 len floor32(mem[_1689 + ceil32(return_data.size) + 457])]
                    require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                    mem[(32 * _1779) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                    return memory
                      from (32 * _1779) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                       len 32
                mem[0] = 13
                mem[ceil32(return_data.size) + 653] = address(sub_c88f1eae.field_0)
                idx = ceil32(return_data.size) + 653
                s = 0
                while ceil32(return_data.size) + (32 * sub_c88f1eae.length) + 653 > idx + 32:
                    mem[idx + 32] = sub_c88f1eae[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[ceil32(return_data.size) + 653 len 32 * sub_c88f1eae.length]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _2281 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _2365 = mem[_2281 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2281 + ceil32(return_data.size) + 457])] = mem[_2281 + ceil32(return_data.size) + 489 len floor32(mem[_2281 + ceil32(return_data.size) + 457])]
                require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _2365) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                return memory
                  from (32 * _2365) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[ceil32(return_data.size) + 621] = sub_448f2946.length
            if not sub_448f2946.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _1691 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _1780 = mem[_1691 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1691 + ceil32(return_data.size) + 457])] = mem[_1691 + ceil32(return_data.size) + 489 len floor32(mem[_1691 + ceil32(return_data.size) + 457])]
                require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _1780) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
                return memory
                  from (32 * _1780) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[0] = 12
            mem[ceil32(return_data.size) + 653] = address(sub_448f2946.field_0)
            idx = ceil32(return_data.size) + 653
            s = 0
            while ceil32(return_data.size) + (32 * sub_448f2946.length) + 653 > idx + 32:
                mem[idx + 32] = sub_448f2946[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[ceil32(return_data.size) + 653 len 32 * sub_448f2946.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _2283 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _2366 = mem[_2283 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2283 + ceil32(return_data.size) + 457])] = mem[_2283 + ceil32(return_data.size) + 489 len floor32(mem[_2283 + ceil32(return_data.size) + 457])]
            require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _2366) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
            return memory
              from (32 * _2366) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        require return_data.size >= 32
        if not mem[488]:
            revert with 0, 
                        32,
                        42,
                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                        mem[ceil32(return_data.size) + 567 len 22]
        require 2 < sub_c88f1eae.length
        require 1 < sub_c88f1eae.length
        mem[0] = 13
        mem[ceil32(return_data.size) + 457] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 461] = arg2
        mem[ceil32(return_data.size) + 493] = 0
        mem[ceil32(return_data.size) + 557] = arg1
        mem[ceil32(return_data.size) + 589] = block.timestamp
        mem[ceil32(return_data.size) + 525] = 160
        if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
            mem[ceil32(return_data.size) + 621] = sub_c88f1eae.length
            if not sub_c88f1eae.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _1781 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _1871 = mem[_1781 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1781 + ceil32(return_data.size) + 457])] = mem[_1781 + ceil32(return_data.size) + 489 len floor32(mem[_1781 + ceil32(return_data.size) + 457])]
                require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _1871) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                return memory
                  from (32 * _1871) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[0] = 13
            mem[ceil32(return_data.size) + 653] = address(sub_c88f1eae.field_0)
            idx = ceil32(return_data.size) + 653
            s = 0
            while ceil32(return_data.size) + (32 * sub_c88f1eae.length) + 653 > idx + 32:
                mem[idx + 32] = sub_c88f1eae[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[ceil32(return_data.size) + 653 len 32 * sub_c88f1eae.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _2285 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _2367 = mem[_2285 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2285 + ceil32(return_data.size) + 457])] = mem[_2285 + ceil32(return_data.size) + 489 len floor32(mem[_2285 + ceil32(return_data.size) + 457])]
            require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _2367) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
            return memory
              from (32 * _2367) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[ceil32(return_data.size) + 621] = sub_448f2946.length
        if not sub_448f2946.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _1783 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _1872 = mem[_1783 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1783 + ceil32(return_data.size) + 457])] = mem[_1783 + ceil32(return_data.size) + 489 len floor32(mem[_1783 + ceil32(return_data.size) + 457])]
            require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _1872) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
            return memory
              from (32 * _1872) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[0] = 12
        mem[ceil32(return_data.size) + 653] = address(sub_448f2946.field_0)
        idx = ceil32(return_data.size) + 653
        s = 0
        while ceil32(return_data.size) + (32 * sub_448f2946.length) + 653 > idx + 32:
            mem[idx + 32] = sub_448f2946[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[ceil32(return_data.size) + 653 len 32 * sub_448f2946.length]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
        require return_data.size >= 32
        _2287 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
        require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
        mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
        _2368 = mem[_2287 + ceil32(return_data.size) + 457]
        mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2287 + ceil32(return_data.size) + 457])] = mem[_2287 + ceil32(return_data.size) + 489 len floor32(mem[_2287 + ceil32(return_data.size) + 457])]
        require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
        mem[(32 * _2368) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
        return memory
          from (32 * _2368) + ceil32(return_data.size) + ceil32(return_data.size) + 489
           len 32
    mem[292] = return_data.size
    mem[324 len return_data.size] = ext_call.return_data[0 len return_data.size]
    if not ext_call.success:
        if return_data.size > 0:
            revert with ext_call.return_data[0 len return_data.size]
        revert with 0, 'SafeERC20: low-level call failed'
    if return_data.size <= 0:
        require ext_code.size(sub_077b2e0fAddress)
        if sub_077b2e0fAddress == address(token0Address):
            call sub_077b2e0fAddress.0xa9059cbb with:
                 gas gas_remaining wei
                args address(arg1), arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return arg2
        staticcall sub_077b2e0fAddress.0xdd62ed3e with:
                gas gas_remaining wei
               args address(this.address), address(pancakeRouterAddress)
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] + arg2 < ext_call.return_data[0]:
            revert with 0, 'SafeMath: addition overflow'
        mem[ceil32(return_data.size) + 329] = address(pancakeRouterAddress)
        mem[ceil32(return_data.size) + 361] = ext_call.return_data[0] + arg2
        mem[ceil32(return_data.size) + 293] = 68
        mem[ceil32(return_data.size) + 329 len 28] = Mask(224, 0, stor14)
        mem[ceil32(return_data.size) + 325 len 4] = approve(address arg1, uint256 arg2)
        mem[ceil32(return_data.size) + 393] = 32
        mem[ceil32(return_data.size) + 425] = 'SafeERC20: low-level call failed'
        if eth.balance(this.address) < 0:
            revert with 0, 
                        32,
                        38,
                        0xfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                        mem[ceil32(return_data.size) + 563 len 26]
        if ext_code.size(sub_077b2e0fAddress) <= 0:
            revert with 0, 'Address: call to non-contract'
        mem[ceil32(return_data.size) + 457 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor14), uint32(stor14), Mask(224, 32, ext_call.return_data[0] + arg2) >> 32
        mem[ceil32(return_data.size) + 549 len 4] = 0
        call sub_077b2e0fAddress with:
           funct uint32(stor14)
             gas gas_remaining wei
            args Mask(224, 32, ext_call.return_data[0] + arg2) << 224, mem[ceil32(return_data.size) + 521 len 4]
        if not return_data.size:
            if not ext_call.success:
                revert with unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), arg2
            if not unknown_0x23b872dd(?????), address(arg1) << 64:
                revert with 0, 
                            32,
                            42,
                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 567 len 22]
            require 2 < sub_c88f1eae.length
            require 1 < sub_c88f1eae.length
            mem[0] = 13
            mem[ceil32(return_data.size) + 457] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[ceil32(return_data.size) + 461] = arg2
            mem[ceil32(return_data.size) + 493] = 0
            mem[ceil32(return_data.size) + 557] = arg1
            mem[ceil32(return_data.size) + 589] = block.timestamp
            mem[ceil32(return_data.size) + 525] = 160
            if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
                mem[ceil32(return_data.size) + 621] = sub_c88f1eae.length
                if not sub_c88f1eae.length:
                    require ext_code.size(address(pancakeRouterAddress))
                    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                    require return_data.size >= 32
                    _1787 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                    require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                    require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                    require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                    mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                    _1875 = mem[_1787 + ceil32(return_data.size) + 457]
                    mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1787 + ceil32(return_data.size) + 457])] = mem[_1787 + ceil32(return_data.size) + 489 len floor32(mem[_1787 + ceil32(return_data.size) + 457])]
                    require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                    mem[(32 * _1875) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                    return memory
                      from (32 * _1875) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                       len 32
                mem[0] = 13
                mem[ceil32(return_data.size) + 653] = address(sub_c88f1eae.field_0)
                idx = ceil32(return_data.size) + 653
                s = 0
                while ceil32(return_data.size) + (32 * sub_c88f1eae.length) + 653 > idx + 32:
                    mem[idx + 32] = sub_c88f1eae[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[ceil32(return_data.size) + 653 len 32 * sub_c88f1eae.length]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _2293 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _2371 = mem[_2293 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2293 + ceil32(return_data.size) + 457])] = mem[_2293 + ceil32(return_data.size) + 489 len floor32(mem[_2293 + ceil32(return_data.size) + 457])]
                require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _2371) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                return memory
                  from (32 * _2371) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[ceil32(return_data.size) + 621] = sub_448f2946.length
            if not sub_448f2946.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _1789 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _1876 = mem[_1789 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1789 + ceil32(return_data.size) + 457])] = mem[_1789 + ceil32(return_data.size) + 489 len floor32(mem[_1789 + ceil32(return_data.size) + 457])]
                require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _1876) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
                return memory
                  from (32 * _1876) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[0] = 12
            mem[ceil32(return_data.size) + 653] = address(sub_448f2946.field_0)
            idx = ceil32(return_data.size) + 653
            s = 0
            while ceil32(return_data.size) + (32 * sub_448f2946.length) + 653 > idx + 32:
                mem[idx + 32] = sub_448f2946[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[ceil32(return_data.size) + 653 len 32 * sub_448f2946.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _2295 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _2372 = mem[_2295 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2295 + ceil32(return_data.size) + 457])] = mem[_2295 + ceil32(return_data.size) + 489 len floor32(mem[_2295 + ceil32(return_data.size) + 457])]
            require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _2372) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
            return memory
              from (32 * _2372) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[ceil32(return_data.size) + 457] = return_data.size
        mem[ceil32(return_data.size) + 489 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size > 0:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size <= 0:
            require 2 < sub_c88f1eae.length
            require 1 < sub_c88f1eae.length
            mem[0] = 13
            mem[(2 * ceil32(return_data.size)) + 458] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[(2 * ceil32(return_data.size)) + 462] = arg2
            mem[(2 * ceil32(return_data.size)) + 494] = 0
            mem[(2 * ceil32(return_data.size)) + 558] = arg1
            mem[(2 * ceil32(return_data.size)) + 590] = block.timestamp
            mem[(2 * ceil32(return_data.size)) + 526] = 160
            if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
                mem[(2 * ceil32(return_data.size)) + 622] = sub_c88f1eae.length
                if not sub_c88f1eae.length:
                    require ext_code.size(address(pancakeRouterAddress))
                    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                         gas gas_remaining wei
                        args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (4 * ceil32(return_data.size)) + 458
                    require return_data.size >= 32
                    _1705 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                    require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                    require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                    require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                    mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                    _1791 = mem[_1705 + (2 * ceil32(return_data.size)) + 458]
                    mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1705 + (2 * ceil32(return_data.size)) + 458])] = mem[_1705 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1705 + (2 * ceil32(return_data.size)) + 458])]
                    require 2 < mem[(4 * ceil32(return_data.size)) + 458]
                    mem[(32 * _1791) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
                    return memory
                      from (32 * _1791) + (4 * ceil32(return_data.size)) + 490
                       len 32
                mem[0] = 13
                mem[(2 * ceil32(return_data.size)) + 654] = address(sub_c88f1eae.field_0)
                idx = (2 * ceil32(return_data.size)) + 654
                s = 0
                while (2 * ceil32(return_data.size)) + (32 * sub_c88f1eae.length) + 654 > idx + 32:
                    mem[idx + 32] = sub_c88f1eae[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_c88f1eae.length) - (2 * ceil32(return_data.size))]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 458
                require return_data.size >= 32
                _2297 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                _2373 = mem[_2297 + (2 * ceil32(return_data.size)) + 458]
                mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2297 + (2 * ceil32(return_data.size)) + 458])] = mem[_2297 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2297 + (2 * ceil32(return_data.size)) + 458])]
                require 2 < mem[(4 * ceil32(return_data.size)) + 458]
                mem[(32 * _2373) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
                return memory
                  from (32 * _2373) + (4 * ceil32(return_data.size)) + 490
                   len 32
            mem[(2 * ceil32(return_data.size)) + 622] = sub_448f2946.length
            if not sub_448f2946.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 458
                require return_data.size >= 32
                _1707 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                _1792 = mem[_1707 + (2 * ceil32(return_data.size)) + 458]
                mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1707 + (2 * ceil32(return_data.size)) + 458])] = mem[_1707 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1707 + (2 * ceil32(return_data.size)) + 458])]
                require 1 < mem[(4 * ceil32(return_data.size)) + 458]
                mem[(32 * _1792) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
                return memory
                  from (32 * _1792) + (4 * ceil32(return_data.size)) + 490
                   len 32
            mem[0] = 12
            mem[(2 * ceil32(return_data.size)) + 654] = address(sub_448f2946.field_0)
            idx = (2 * ceil32(return_data.size)) + 654
            s = 0
            while (2 * ceil32(return_data.size)) + (32 * sub_448f2946.length) + 654 > idx + 32:
                mem[idx + 32] = sub_448f2946[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_448f2946.length) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _2299 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _2374 = mem[_2299 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2299 + (2 * ceil32(return_data.size)) + 458])] = mem[_2299 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2299 + (2 * ceil32(return_data.size)) + 458])]
            require 1 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _2374) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
            return memory
              from (32 * _2374) + (4 * ceil32(return_data.size)) + 490
               len 32
        require return_data.size >= 32
        if not mem[ceil32(return_data.size) + 489]:
            revert with 0, 
                        32,
                        42,
                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                        mem[(2 * ceil32(return_data.size)) + 568 len (2 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 22]
        require 2 < sub_c88f1eae.length
        require 1 < sub_c88f1eae.length
        mem[0] = 13
        mem[(2 * ceil32(return_data.size)) + 458] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[(2 * ceil32(return_data.size)) + 462] = arg2
        mem[(2 * ceil32(return_data.size)) + 494] = 0
        mem[(2 * ceil32(return_data.size)) + 558] = arg1
        mem[(2 * ceil32(return_data.size)) + 590] = block.timestamp
        mem[(2 * ceil32(return_data.size)) + 526] = 160
        if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
            mem[(2 * ceil32(return_data.size)) + 622] = sub_c88f1eae.length
            if not sub_c88f1eae.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 458
                require return_data.size >= 32
                _1793 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                _1879 = mem[_1793 + (2 * ceil32(return_data.size)) + 458]
                mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1793 + (2 * ceil32(return_data.size)) + 458])] = mem[_1793 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1793 + (2 * ceil32(return_data.size)) + 458])]
                require 2 < mem[(4 * ceil32(return_data.size)) + 458]
                mem[(32 * _1879) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
                return memory
                  from (32 * _1879) + (4 * ceil32(return_data.size)) + 490
                   len 32
            mem[0] = 13
            mem[(2 * ceil32(return_data.size)) + 654] = address(sub_c88f1eae.field_0)
            idx = (2 * ceil32(return_data.size)) + 654
            s = 0
            while (2 * ceil32(return_data.size)) + (32 * sub_c88f1eae.length) + 654 > idx + 32:
                mem[idx + 32] = sub_c88f1eae[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_c88f1eae.length) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _2301 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _2375 = mem[_2301 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2301 + (2 * ceil32(return_data.size)) + 458])] = mem[_2301 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2301 + (2 * ceil32(return_data.size)) + 458])]
            require 2 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _2375) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
            return memory
              from (32 * _2375) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[(2 * ceil32(return_data.size)) + 622] = sub_448f2946.length
        if not sub_448f2946.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _1795 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _1880 = mem[_1795 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1795 + (2 * ceil32(return_data.size)) + 458])] = mem[_1795 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1795 + (2 * ceil32(return_data.size)) + 458])]
            require 1 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _1880) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
            return memory
              from (32 * _1880) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[0] = 12
        mem[(2 * ceil32(return_data.size)) + 654] = address(sub_448f2946.field_0)
        idx = (2 * ceil32(return_data.size)) + 654
        s = 0
        while (2 * ceil32(return_data.size)) + (32 * sub_448f2946.length) + 654 > idx + 32:
            mem[idx + 32] = sub_448f2946[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_448f2946.length) - (2 * ceil32(return_data.size))]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 458
        require return_data.size >= 32
        _2303 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
        mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
        _2376 = mem[_2303 + (2 * ceil32(return_data.size)) + 458]
        mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2303 + (2 * ceil32(return_data.size)) + 458])] = mem[_2303 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2303 + (2 * ceil32(return_data.size)) + 458])]
        require 1 < mem[(4 * ceil32(return_data.size)) + 458]
        mem[(32 * _2376) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
        return memory
          from (32 * _2376) + (4 * ceil32(return_data.size)) + 490
           len 32
    require return_data.size >= 32
    if not mem[324]:
        revert with 0, 
                    32,
                    42,
                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                    mem[ceil32(return_data.size) + 403 len 22]
    require ext_code.size(sub_077b2e0fAddress)
    if sub_077b2e0fAddress == address(token0Address):
        call sub_077b2e0fAddress.0xa9059cbb with:
             gas gas_remaining wei
            args address(arg1), arg2
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return arg2
    staticcall sub_077b2e0fAddress.0xdd62ed3e with:
            gas gas_remaining wei
           args address(this.address), address(pancakeRouterAddress)
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] + arg2 < ext_call.return_data[0]:
        revert with 0, 'SafeMath: addition overflow'
    mem[ceil32(return_data.size) + 329] = address(pancakeRouterAddress)
    mem[ceil32(return_data.size) + 361] = ext_call.return_data[0] + arg2
    mem[ceil32(return_data.size) + 293] = 68
    mem[ceil32(return_data.size) + 329 len 28] = Mask(224, 0, stor14)
    mem[ceil32(return_data.size) + 325 len 4] = approve(address arg1, uint256 arg2)
    mem[ceil32(return_data.size) + 393] = 32
    mem[ceil32(return_data.size) + 425] = 'SafeERC20: low-level call failed'
    if eth.balance(this.address) < 0:
        revert with 0, 
                    32,
                    38,
                    0xfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c,
                    mem[ceil32(return_data.size) + 563 len 26]
    if ext_code.size(sub_077b2e0fAddress) <= 0:
        revert with 0, 'Address: call to non-contract'
    mem[ceil32(return_data.size) + 457 len 64] = approve(address arg1, uint256 arg2), Mask(224, 0, stor14), uint32(stor14), Mask(224, 32, ext_call.return_data[0] + arg2) >> 32
    mem[ceil32(return_data.size) + 549 len 4] = 0
    call sub_077b2e0fAddress with:
       funct uint32(stor14)
         gas gas_remaining wei
        args Mask(224, 32, ext_call.return_data[0] + arg2) << 224, mem[ceil32(return_data.size) + 521 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0x23b872dd(?????), address(arg1) << 64, 0, address(this.address), arg2
        if not unknown_0x23b872dd(?????), address(arg1) << 64:
            revert with 0, 
                        32,
                        42,
                        0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                        mem[ceil32(return_data.size) + 567 len 22]
        require 2 < sub_c88f1eae.length
        require 1 < sub_c88f1eae.length
        mem[0] = 13
        mem[ceil32(return_data.size) + 457] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[ceil32(return_data.size) + 461] = arg2
        mem[ceil32(return_data.size) + 493] = 0
        mem[ceil32(return_data.size) + 557] = arg1
        mem[ceil32(return_data.size) + 589] = block.timestamp
        mem[ceil32(return_data.size) + 525] = 160
        if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
            mem[ceil32(return_data.size) + 621] = sub_c88f1eae.length
            if not sub_c88f1eae.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
                require return_data.size >= 32
                _1799 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
                _1883 = mem[_1799 + ceil32(return_data.size) + 457]
                mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1799 + ceil32(return_data.size) + 457])] = mem[_1799 + ceil32(return_data.size) + 489 len floor32(mem[_1799 + ceil32(return_data.size) + 457])]
                require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
                mem[(32 * _1883) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
                return memory
                  from (32 * _1883) + ceil32(return_data.size) + ceil32(return_data.size) + 489
                   len 32
            mem[0] = 13
            mem[ceil32(return_data.size) + 653] = address(sub_c88f1eae.field_0)
            idx = ceil32(return_data.size) + 653
            s = 0
            while ceil32(return_data.size) + (32 * sub_c88f1eae.length) + 653 > idx + 32:
                mem[idx + 32] = sub_c88f1eae[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[ceil32(return_data.size) + 653 len 32 * sub_c88f1eae.length]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _2309 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _2379 = mem[_2309 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2309 + ceil32(return_data.size) + 457])] = mem[_2309 + ceil32(return_data.size) + 489 len floor32(mem[_2309 + ceil32(return_data.size) + 457])]
            require 2 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _2379) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 553]
            return memory
              from (32 * _2379) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[ceil32(return_data.size) + 621] = sub_448f2946.length
        if not sub_448f2946.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
            require return_data.size >= 32
            _1801 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
            _1884 = mem[_1801 + ceil32(return_data.size) + 457]
            mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_1801 + ceil32(return_data.size) + 457])] = mem[_1801 + ceil32(return_data.size) + 489 len floor32(mem[_1801 + ceil32(return_data.size) + 457])]
            require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
            mem[(32 * _1884) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
            return memory
              from (32 * _1884) + ceil32(return_data.size) + ceil32(return_data.size) + 489
               len 32
        mem[0] = 12
        mem[ceil32(return_data.size) + 653] = address(sub_448f2946.field_0)
        idx = ceil32(return_data.size) + 653
        s = 0
        while ceil32(return_data.size) + (32 * sub_448f2946.length) + 653 > idx + 32:
            mem[idx + 32] = sub_448f2946[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[ceil32(return_data.size) + 653 len 32 * sub_448f2946.length]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[ceil32(return_data.size) + 457 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + ceil32(return_data.size) + 457
        require return_data.size >= 32
        _2311 = mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32
        require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457] <= 4294967296 and mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]) + 32 <= return_data.size
        mem[ceil32(return_data.size) + ceil32(return_data.size) + 457] = mem[mem[ceil32(return_data.size) + 457 len 4], Mask(224, 32, arg2) >> 32 + ceil32(return_data.size) + 457]
        _2380 = mem[_2311 + ceil32(return_data.size) + 457]
        mem[ceil32(return_data.size) + ceil32(return_data.size) + 489 len floor32(mem[_2311 + ceil32(return_data.size) + 457])] = mem[_2311 + ceil32(return_data.size) + 489 len floor32(mem[_2311 + ceil32(return_data.size) + 457])]
        require 1 < mem[ceil32(return_data.size) + ceil32(return_data.size) + 457]
        mem[(32 * _2380) + ceil32(return_data.size) + ceil32(return_data.size) + 489] = mem[ceil32(return_data.size) + ceil32(return_data.size) + 521]
        return memory
          from (32 * _2380) + ceil32(return_data.size) + ceil32(return_data.size) + 489
           len 32
    mem[ceil32(return_data.size) + 457] = return_data.size
    mem[ceil32(return_data.size) + 489 len return_data.size] = ext_call.return_data[0 len return_data.size]
    if not ext_call.success:
        if return_data.size > 0:
            revert with ext_call.return_data[0 len return_data.size]
        revert with 0, 'SafeERC20: low-level call failed'
    if return_data.size <= 0:
        require 2 < sub_c88f1eae.length
        require 1 < sub_c88f1eae.length
        mem[0] = 13
        mem[(2 * ceil32(return_data.size)) + 458] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[(2 * ceil32(return_data.size)) + 462] = arg2
        mem[(2 * ceil32(return_data.size)) + 494] = 0
        mem[(2 * ceil32(return_data.size)) + 558] = arg1
        mem[(2 * ceil32(return_data.size)) + 590] = block.timestamp
        mem[(2 * ceil32(return_data.size)) + 526] = 160
        if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
            mem[(2 * ceil32(return_data.size)) + 622] = sub_c88f1eae.length
            if not sub_c88f1eae.length:
                require ext_code.size(address(pancakeRouterAddress))
                call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (4 * ceil32(return_data.size)) + 458
                require return_data.size >= 32
                _1721 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
                require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
                require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
                mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
                _1803 = mem[_1721 + (2 * ceil32(return_data.size)) + 458]
                mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1721 + (2 * ceil32(return_data.size)) + 458])] = mem[_1721 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1721 + (2 * ceil32(return_data.size)) + 458])]
                require 2 < mem[(4 * ceil32(return_data.size)) + 458]
                mem[(32 * _1803) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
                return memory
                  from (32 * _1803) + (4 * ceil32(return_data.size)) + 490
                   len 32
            mem[0] = 13
            mem[(2 * ceil32(return_data.size)) + 654] = address(sub_c88f1eae.field_0)
            idx = (2 * ceil32(return_data.size)) + 654
            s = 0
            while (2 * ceil32(return_data.size)) + (32 * sub_c88f1eae.length) + 654 > idx + 32:
                mem[idx + 32] = sub_c88f1eae[s].field_256
                idx = idx + 32
                s = s + 1
                continue 
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_c88f1eae.length) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _2313 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _2381 = mem[_2313 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2313 + (2 * ceil32(return_data.size)) + 458])] = mem[_2313 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2313 + (2 * ceil32(return_data.size)) + 458])]
            require 2 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _2381) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
            return memory
              from (32 * _2381) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[(2 * ceil32(return_data.size)) + 622] = sub_448f2946.length
        if not sub_448f2946.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _1723 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _1804 = mem[_1723 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1723 + (2 * ceil32(return_data.size)) + 458])] = mem[_1723 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1723 + (2 * ceil32(return_data.size)) + 458])]
            require 1 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _1804) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
            return memory
              from (32 * _1804) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[0] = 12
        mem[(2 * ceil32(return_data.size)) + 654] = address(sub_448f2946.field_0)
        idx = (2 * ceil32(return_data.size)) + 654
        s = 0
        while (2 * ceil32(return_data.size)) + (32 * sub_448f2946.length) + 654 > idx + 32:
            mem[idx + 32] = sub_448f2946[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_448f2946.length) - (2 * ceil32(return_data.size))]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 458
        require return_data.size >= 32
        _2315 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
        mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
        _2382 = mem[_2315 + (2 * ceil32(return_data.size)) + 458]
        mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2315 + (2 * ceil32(return_data.size)) + 458])] = mem[_2315 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2315 + (2 * ceil32(return_data.size)) + 458])]
        require 1 < mem[(4 * ceil32(return_data.size)) + 458]
        mem[(32 * _2382) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
        return memory
          from (32 * _2382) + (4 * ceil32(return_data.size)) + 490
           len 32
    require return_data.size >= 32
    if not mem[ceil32(return_data.size) + 489]:
        revert with 0, 
                    32,
                    42,
                    0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                    mem[(2 * ceil32(return_data.size)) + 568 len (2 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 22]
    require 2 < sub_c88f1eae.length
    require 1 < sub_c88f1eae.length
    mem[0] = 13
    mem[(2 * ceil32(return_data.size)) + 458] = 0x38ed173900000000000000000000000000000000000000000000000000000000
    mem[(2 * ceil32(return_data.size)) + 462] = arg2
    mem[(2 * ceil32(return_data.size)) + 494] = 0
    mem[(2 * ceil32(return_data.size)) + 558] = arg1
    mem[(2 * ceil32(return_data.size)) + 590] = block.timestamp
    mem[(2 * ceil32(return_data.size)) + 526] = 160
    if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
        mem[(2 * ceil32(return_data.size)) + 622] = sub_c88f1eae.length
        if not sub_c88f1eae.length:
            require ext_code.size(address(pancakeRouterAddress))
            call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (4 * ceil32(return_data.size)) + 458
            require return_data.size >= 32
            _1805 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
            require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
            require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
            mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
            _1887 = mem[_1805 + (2 * ceil32(return_data.size)) + 458]
            mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1805 + (2 * ceil32(return_data.size)) + 458])] = mem[_1805 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1805 + (2 * ceil32(return_data.size)) + 458])]
            require 2 < mem[(4 * ceil32(return_data.size)) + 458]
            mem[(32 * _1887) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
            return memory
              from (32 * _1887) + (4 * ceil32(return_data.size)) + 490
               len 32
        mem[0] = 13
        mem[(2 * ceil32(return_data.size)) + 654] = address(sub_c88f1eae.field_0)
        idx = (2 * ceil32(return_data.size)) + 654
        s = 0
        while (2 * ceil32(return_data.size)) + (32 * sub_c88f1eae.length) + 654 > idx + 32:
            mem[idx + 32] = sub_c88f1eae[s].field_256
            idx = idx + 32
            s = s + 1
            continue 
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_c88f1eae.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_c88f1eae.length) - (2 * ceil32(return_data.size))]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 458
        require return_data.size >= 32
        _2317 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
        mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
        _2383 = mem[_2317 + (2 * ceil32(return_data.size)) + 458]
        mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2317 + (2 * ceil32(return_data.size)) + 458])] = mem[_2317 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2317 + (2 * ceil32(return_data.size)) + 458])]
        require 2 < mem[(4 * ceil32(return_data.size)) + 458]
        mem[(32 * _2383) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 554]
        return memory
          from (32 * _2383) + (4 * ceil32(return_data.size)) + 490
           len 32
    mem[(2 * ceil32(return_data.size)) + 622] = sub_448f2946.length
    if not sub_448f2946.length:
        require ext_code.size(address(pancakeRouterAddress))
        call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (4 * ceil32(return_data.size)) + 458
        require return_data.size >= 32
        _1807 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
        require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
        require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
        mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
        _1888 = mem[_1807 + (2 * ceil32(return_data.size)) + 458]
        mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_1807 + (2 * ceil32(return_data.size)) + 458])] = mem[_1807 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_1807 + (2 * ceil32(return_data.size)) + 458])]
        require 1 < mem[(4 * ceil32(return_data.size)) + 458]
        mem[(32 * _1888) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
        return memory
          from (32 * _1888) + (4 * ceil32(return_data.size)) + 490
           len 32
    mem[0] = 12
    mem[(2 * ceil32(return_data.size)) + 654] = address(sub_448f2946.field_0)
    idx = (2 * ceil32(return_data.size)) + 654
    s = 0
    while (2 * ceil32(return_data.size)) + (32 * sub_448f2946.length) + 654 > idx + 32:
        mem[idx + 32] = sub_448f2946[s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    require ext_code.size(address(pancakeRouterAddress))
    call address(pancakeRouterAddress).swapExactTokensForTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
         gas gas_remaining wei
        args arg2, 0, 160, address(arg1), block.timestamp, sub_448f2946.length, mem[(2 * ceil32(return_data.size)) + 654 len (2 * ceil32(return_data.size)) + (32 * sub_448f2946.length) - (2 * ceil32(return_data.size))]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(2 * ceil32(return_data.size)) + 458 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (4 * ceil32(return_data.size)) + 458
    require return_data.size >= 32
    _2319 = mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32
    require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 <= 4294967296
    require mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + 32 <= return_data.size
    require mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458] <= 4294967296 and mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (32 * mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]) + 32 <= return_data.size
    mem[(4 * ceil32(return_data.size)) + 458] = mem[mem[(2 * ceil32(return_data.size)) + 458 len 4], Mask(224, 32, arg2) >> 32 + (2 * ceil32(return_data.size)) + 458]
    _2384 = mem[_2319 + (2 * ceil32(return_data.size)) + 458]
    mem[(4 * ceil32(return_data.size)) + 490 len floor32(mem[_2319 + (2 * ceil32(return_data.size)) + 458])] = mem[_2319 + (2 * ceil32(return_data.size)) + 490 len floor32(mem[_2319 + (2 * ceil32(return_data.size)) + 458])]
    require 1 < mem[(4 * ceil32(return_data.size)) + 458]
    mem[(32 * _2384) + (4 * ceil32(return_data.size)) + 490] = mem[(4 * ceil32(return_data.size)) + 522]
    return memory
      from (32 * _2384) + (4 * ceil32(return_data.size)) + 490
       len 32
}

function sub_64cf9556(?) payable {
    require calldata.size - 4 >= 32
    if cakeAddress != address(token0Address):
        require 2 < sub_9023d0da.length
        require 1 < sub_9023d0da.length
        if address(sub_9023d0da.field_256) != address(sub_9023d0da.field_512):
            if not sub_9023d0da.length:
                if sub_9023d0da.length < 2:
                    return 0
                require sub_9023d0da.length <= test266151307()
                mem[(32 * sub_9023d0da.length) + 128] = sub_9023d0da.length
                if not sub_9023d0da.length:
                    require 0 < sub_9023d0da.length
                    mem[(32 * sub_9023d0da.length) + 160] = arg1
                    idx = 0
                    while idx < sub_9023d0da.length - 1:
                        require idx < sub_9023d0da.length
                        _1131 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_9023d0da.length
                        _1139 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_9023d0da.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_9023d0da.length) + 164], address(_1139)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_9023d0da.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_9023d0da.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_1139) != address(_1131):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_1131) != address(_1131):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
                else:
                    mem[(32 * sub_9023d0da.length) + 160 len 32 * sub_9023d0da.length] = call.data[calldata.size len 32 * sub_9023d0da.length]
                    require 0 < sub_9023d0da.length
                    mem[(32 * sub_9023d0da.length) + 160] = arg1
                    idx = 0
                    while idx < sub_9023d0da.length - 1:
                        require idx < sub_9023d0da.length
                        _1133 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_9023d0da.length
                        _1140 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_9023d0da.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_9023d0da.length) + 164], address(_1140)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_9023d0da.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_9023d0da.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_1140) != address(_1133):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_1133) != address(_1133):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
            else:
                mem[128] = address(sub_9023d0da.field_0)
                idx = 128
                s = 0
                while (32 * sub_9023d0da.length) + 96 > idx:
                    mem[idx + 32] = sub_9023d0da[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                if sub_9023d0da.length < 2:
                    return 0
                require sub_9023d0da.length <= test266151307()
                mem[(32 * sub_9023d0da.length) + 128] = sub_9023d0da.length
                if not sub_9023d0da.length:
                    require 0 < sub_9023d0da.length
                    mem[(32 * sub_9023d0da.length) + 160] = arg1
                    idx = 0
                    while idx < sub_9023d0da.length - 1:
                        require idx < sub_9023d0da.length
                        _3345 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_9023d0da.length
                        _3353 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_9023d0da.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_9023d0da.length) + 164], address(_3353)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_9023d0da.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_9023d0da.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_3353) != address(_3345):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_3345) != address(_3345):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
                else:
                    mem[(32 * sub_9023d0da.length) + 160 len 32 * sub_9023d0da.length] = call.data[calldata.size len 32 * sub_9023d0da.length]
                    require 0 < sub_9023d0da.length
                    mem[(32 * sub_9023d0da.length) + 160] = arg1
                    idx = 0
                    while idx < sub_9023d0da.length - 1:
                        require idx < sub_9023d0da.length
                        _3347 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_9023d0da.length
                        _3354 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_9023d0da.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_9023d0da.length) + 164], address(_3354)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_9023d0da.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_9023d0da.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_3354) != address(_3347):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_3347) != address(_3347):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] / mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_9023d0da.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_9023d0da.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_9023d0da.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_9023d0da.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160])
                                            require idx + 1 < mem[(32 * sub_9023d0da.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_9023d0da.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
        else:
            if not sub_1b8e25f1.length:
                if sub_1b8e25f1.length < 2:
                    return 0
                require sub_1b8e25f1.length <= test266151307()
                mem[(32 * sub_1b8e25f1.length) + 128] = sub_1b8e25f1.length
                if not sub_1b8e25f1.length:
                    require 0 < sub_1b8e25f1.length
                    mem[(32 * sub_1b8e25f1.length) + 160] = arg1
                    idx = 0
                    while idx < sub_1b8e25f1.length - 1:
                        require idx < sub_1b8e25f1.length
                        _1135 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_1b8e25f1.length
                        _1141 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_1b8e25f1.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_1b8e25f1.length) + 164], address(_1141)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_1b8e25f1.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_1b8e25f1.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_1141) != address(_1135):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_1135) != address(_1135):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
                else:
                    mem[(32 * sub_1b8e25f1.length) + 160 len 32 * sub_1b8e25f1.length] = call.data[calldata.size len 32 * sub_1b8e25f1.length]
                    require 0 < sub_1b8e25f1.length
                    mem[(32 * sub_1b8e25f1.length) + 160] = arg1
                    idx = 0
                    while idx < sub_1b8e25f1.length - 1:
                        require idx < sub_1b8e25f1.length
                        _1137 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_1b8e25f1.length
                        _1142 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_1b8e25f1.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_1b8e25f1.length) + 164], address(_1142)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_1b8e25f1.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_1b8e25f1.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_1142) != address(_1137):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_1137) != address(_1137):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
            else:
                mem[128] = address(sub_1b8e25f1.field_0)
                idx = 128
                s = 0
                while (32 * sub_1b8e25f1.length) + 96 > idx:
                    mem[idx + 32] = sub_1b8e25f1[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                if sub_1b8e25f1.length < 2:
                    return 0
                require sub_1b8e25f1.length <= test266151307()
                mem[(32 * sub_1b8e25f1.length) + 128] = sub_1b8e25f1.length
                if not sub_1b8e25f1.length:
                    require 0 < sub_1b8e25f1.length
                    mem[(32 * sub_1b8e25f1.length) + 160] = arg1
                    idx = 0
                    while idx < sub_1b8e25f1.length - 1:
                        require idx < sub_1b8e25f1.length
                        _3349 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_1b8e25f1.length
                        _3355 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_1b8e25f1.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_1b8e25f1.length) + 164], address(_3355)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_1b8e25f1.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_1b8e25f1.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_3355) != address(_3349):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_3349) != address(_3349):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
                else:
                    mem[(32 * sub_1b8e25f1.length) + 160 len 32 * sub_1b8e25f1.length] = call.data[calldata.size len 32 * sub_1b8e25f1.length]
                    require 0 < sub_1b8e25f1.length
                    mem[(32 * sub_1b8e25f1.length) + 160] = arg1
                    idx = 0
                    while idx < sub_1b8e25f1.length - 1:
                        require idx < sub_1b8e25f1.length
                        _3351 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_1b8e25f1.length
                        _3356 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_1b8e25f1.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_1b8e25f1.length) + 164], address(_3356)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_1b8e25f1.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_1b8e25f1.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_3356) != address(_3351):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_3351) != address(_3351):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] / mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_1b8e25f1.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_1b8e25f1.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160])
                                            require idx + 1 < mem[(32 * sub_1b8e25f1.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_1b8e25f1.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
    return 1
}

function sub_28aca2d6(?) payable {
    require calldata.size - 4 >= 32
    if sub_077b2e0fAddress != address(token0Address):
        require 2 < sub_c88f1eae.length
        require 1 < sub_c88f1eae.length
        if address(sub_c88f1eae.field_256) != address(sub_c88f1eae.field_512):
            if not sub_c88f1eae.length:
                if sub_c88f1eae.length < 2:
                    return 0
                require sub_c88f1eae.length <= test266151307()
                mem[(32 * sub_c88f1eae.length) + 128] = sub_c88f1eae.length
                if not sub_c88f1eae.length:
                    require 0 < sub_c88f1eae.length
                    mem[(32 * sub_c88f1eae.length) + 160] = arg1
                    idx = 0
                    while idx < sub_c88f1eae.length - 1:
                        require idx < sub_c88f1eae.length
                        _1131 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_c88f1eae.length
                        _1139 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_c88f1eae.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_c88f1eae.length) + 164], address(_1139)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_c88f1eae.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_c88f1eae.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_1139) != address(_1131):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_1131) != address(_1131):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
                else:
                    mem[(32 * sub_c88f1eae.length) + 160 len 32 * sub_c88f1eae.length] = call.data[calldata.size len 32 * sub_c88f1eae.length]
                    require 0 < sub_c88f1eae.length
                    mem[(32 * sub_c88f1eae.length) + 160] = arg1
                    idx = 0
                    while idx < sub_c88f1eae.length - 1:
                        require idx < sub_c88f1eae.length
                        _1133 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_c88f1eae.length
                        _1140 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_c88f1eae.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_c88f1eae.length) + 164], address(_1140)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_c88f1eae.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_c88f1eae.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_1140) != address(_1133):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_1133) != address(_1133):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
            else:
                mem[128] = address(sub_c88f1eae.field_0)
                idx = 128
                s = 0
                while (32 * sub_c88f1eae.length) + 96 > idx:
                    mem[idx + 32] = sub_c88f1eae[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                if sub_c88f1eae.length < 2:
                    return 0
                require sub_c88f1eae.length <= test266151307()
                mem[(32 * sub_c88f1eae.length) + 128] = sub_c88f1eae.length
                if not sub_c88f1eae.length:
                    require 0 < sub_c88f1eae.length
                    mem[(32 * sub_c88f1eae.length) + 160] = arg1
                    idx = 0
                    while idx < sub_c88f1eae.length - 1:
                        require idx < sub_c88f1eae.length
                        _3345 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_c88f1eae.length
                        _3353 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_c88f1eae.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_c88f1eae.length) + 164], address(_3353)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_c88f1eae.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_c88f1eae.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_3353) != address(_3345):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_3345) != address(_3345):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
                else:
                    mem[(32 * sub_c88f1eae.length) + 160 len 32 * sub_c88f1eae.length] = call.data[calldata.size len 32 * sub_c88f1eae.length]
                    require 0 < sub_c88f1eae.length
                    mem[(32 * sub_c88f1eae.length) + 160] = arg1
                    idx = 0
                    while idx < sub_c88f1eae.length - 1:
                        require idx < sub_c88f1eae.length
                        _3347 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_c88f1eae.length
                        _3354 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_c88f1eae.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_c88f1eae.length) + 164], address(_3354)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_c88f1eae.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_c88f1eae.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_3354) != address(_3347):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_3347) != address(_3347):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] / mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_c88f1eae.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_c88f1eae.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160])
                                            require idx + 1 < mem[(32 * sub_c88f1eae.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_c88f1eae.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
        else:
            if not sub_448f2946.length:
                if sub_448f2946.length < 2:
                    return 0
                require sub_448f2946.length <= test266151307()
                mem[(32 * sub_448f2946.length) + 128] = sub_448f2946.length
                if not sub_448f2946.length:
                    require 0 < sub_448f2946.length
                    mem[(32 * sub_448f2946.length) + 160] = arg1
                    idx = 0
                    while idx < sub_448f2946.length - 1:
                        require idx < sub_448f2946.length
                        _1135 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_448f2946.length
                        _1141 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_448f2946.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_448f2946.length) + 164], address(_1141)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_448f2946.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_448f2946.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_1141) != address(_1135):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_1135) != address(_1135):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
                else:
                    mem[(32 * sub_448f2946.length) + 160 len 32 * sub_448f2946.length] = call.data[calldata.size len 32 * sub_448f2946.length]
                    require 0 < sub_448f2946.length
                    mem[(32 * sub_448f2946.length) + 160] = arg1
                    idx = 0
                    while idx < sub_448f2946.length - 1:
                        require idx < sub_448f2946.length
                        _1137 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_448f2946.length
                        _1142 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_448f2946.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_448f2946.length) + 164], address(_1142)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_448f2946.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_448f2946.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_1142) != address(_1137):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_1137) != address(_1137):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
            else:
                mem[128] = address(sub_448f2946.field_0)
                idx = 128
                s = 0
                while (32 * sub_448f2946.length) + 96 > idx:
                    mem[idx + 32] = sub_448f2946[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                if sub_448f2946.length < 2:
                    return 0
                require sub_448f2946.length <= test266151307()
                mem[(32 * sub_448f2946.length) + 128] = sub_448f2946.length
                if not sub_448f2946.length:
                    require 0 < sub_448f2946.length
                    mem[(32 * sub_448f2946.length) + 160] = arg1
                    idx = 0
                    while idx < sub_448f2946.length - 1:
                        require idx < sub_448f2946.length
                        _3349 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_448f2946.length
                        _3355 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_448f2946.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_448f2946.length) + 164], address(_3355)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_448f2946.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_448f2946.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_3355) != address(_3349):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_3349) != address(_3349):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
                else:
                    mem[(32 * sub_448f2946.length) + 160 len 32 * sub_448f2946.length] = call.data[calldata.size len 32 * sub_448f2946.length]
                    require 0 < sub_448f2946.length
                    mem[(32 * sub_448f2946.length) + 160] = arg1
                    idx = 0
                    while idx < sub_448f2946.length - 1:
                        require idx < sub_448f2946.length
                        _3351 = mem[(32 * idx) + 128]
                        require idx + 1 < sub_448f2946.length
                        _3356 = mem[(32 * idx + 1) + 128]
                        mem[(64 * sub_448f2946.length) + 164] = mem[(32 * idx) + 140 len 20]
                        require ext_code.size(pancakeFactoryAddress)
                        staticcall pancakeFactoryAddress.getPair(address arg1, address arg2) with:
                                gas gas_remaining wei
                               args mem[(64 * sub_448f2946.length) + 164], address(_3356)
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getReserves() with:
                                gas gas_remaining wei
                        mem[(64 * sub_448f2946.length) + 160 len 96] = ext_call.return_data[0 len 96]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 96
                        require idx < mem[(32 * sub_448f2946.length) + 128]
                        if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                            return 0
                        if mem[(32 * idx) + 140 len 20] >= mem[(32 * idx + 1) + 140 len 20]:
                            if address(_3356) != address(_3351):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        else:
                            if address(_3351) != address(_3351):
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[32])
                                    require Mask(112, 0, ext_call.return_data[32])
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[32]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[32])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[32]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[0]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[32]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[32])
                                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / Mask(112, 0, ext_call.return_data[32]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[32]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[0]) / (10000 * Mask(112, 0, ext_call.return_data[32])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                            else:
                                if not Mask(112, 0, ext_call.return_data[0]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not Mask(112, 0, ext_call.return_data[32]):
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    return 0
                                if not mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                    require Mask(112, 0, ext_call.return_data[0])
                                    require Mask(112, 0, ext_call.return_data[0])
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if 10000 * Mask(112, 0, ext_call.return_data[0]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 10000 * Mask(112, 0, ext_call.return_data[0])
                                    require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                    if 0 / 10000 * Mask(112, 0, ext_call.return_data[0]):
                                        idx = idx + 1
                                        continue 
                                else:
                                    require mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                    if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] / mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != 9975:
                                        revert with 0, 
                                                    32,
                                                    33,
                                                    0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[(64 * sub_448f2946.length) + 261 len 31]
                                    if not 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 0 / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                                    else:
                                        require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                        if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] != Mask(112, 0, ext_call.return_data[32]):
                                            revert with 0, 
                                                        32,
                                                        33,
                                                        0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[(64 * sub_448f2946.length) + 261 len 31]
                                        if not Mask(112, 0, ext_call.return_data[0]):
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            require 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]:
                                                idx = idx + 1
                                                continue 
                                        else:
                                            require Mask(112, 0, ext_call.return_data[0])
                                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / Mask(112, 0, ext_call.return_data[0]) != 10000:
                                                revert with 0, 
                                                            32,
                                                            33,
                                                            0x6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[(64 * sub_448f2946.length) + 261 len 31]
                                            if (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]) < 10000 * Mask(112, 0, ext_call.return_data[0]):
                                                revert with 0, 'SafeMath: addition overflow'
                                            require (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            mem[(32 * idx + 1) + (32 * sub_448f2946.length) + 160] = 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160])
                                            require idx + 1 < mem[(32 * sub_448f2946.length) + 128]
                                            if 9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160] * Mask(112, 0, ext_call.return_data[32]) / (10000 * Mask(112, 0, ext_call.return_data[0])) + (9975 * mem[(32 * idx) + (32 * sub_448f2946.length) + 160]):
                                                idx = idx + 1
                                                continue 
                        return 0
    return 1
}



}
