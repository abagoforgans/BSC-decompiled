contract main {




// =====================  Runtime code  =====================


#
#  - getReward()
#  - boost()
#  - stake(uint256 arg1)
#
const SECONDS_IN_A_DAY = (24 * 3600)


uint256 totalSupply;
address stakeTokenAddress;
mapping of struct balanceOf;
address owner;
address rewardTokenAddress;
address boostTokenAddress;
address treasuryAddress;
address swapRouterAddress;
address stablecoinAddress;
uint256 tokenCapAmount;
uint256 starttime;
uint256 duration;
uint256 periodFinish;
uint256 rewardRate;
uint256 lastUpdateTime;
uint256 rewardPerTokenStored;
mapping of uint256 userRewardPerTokenPaid;
mapping of uint256 rewards;
uint256 boostedTotalSupply;
uint256 sub_3004b466;
mapping of uint256 sub_3ba35551;
mapping of uint256 sub_e72c3c42;
mapping of uint256 sub_64044fd9;
uint256 sub_c675ccc1;
uint256 sub_4c5be6f3;
uint256 sub_8b8d67d5;
uint256 scaleFactor;

function rewards(address arg1) payable {
    require calldata.size - 4 >= 32
    return rewards[arg1]
}

function duration() payable {
    return duration
}

function totalSupply() payable {
    return totalSupply
}

function sub_3004b466(?) payable {
    return sub_3004b466
}

function boostToken() payable {
    return boostTokenAddress
}

function sub_3ba35551(?) payable {
    require calldata.size - 4 >= 32
    return sub_3ba35551[arg1]
}

function sub_4c5be6f3(?) payable {
    return sub_4c5be6f3
}

function stakeToken() payable {
    return stakeTokenAddress
}

function tokenCapAmount() payable {
    return tokenCapAmount
}

function treasury() payable {
    return treasuryAddress
}

function sub_64044fd9(?) payable {
    require calldata.size - 4 >= 32
    return sub_64044fd9[arg1]
}

function scaleFactor() payable {
    return scaleFactor
}

function balanceOf(address arg1) payable {
    require calldata.size - 4 >= 32
    return balanceOf[address(arg1)].field_0
}

function rewardRate() payable {
    return rewardRate
}

function boostedTotalSupply() payable {
    return boostedTotalSupply
}

function userRewardPerTokenPaid(address arg1) payable {
    require calldata.size - 4 >= 32
    return userRewardPerTokenPaid[arg1]
}

function sub_8b8d67d5(?) payable {
    return sub_8b8d67d5
}

function starttime() payable {
    return starttime
}

function owner() payable {
    return owner
}

function swapRouter() payable {
    return swapRouterAddress
}

function sub_c675ccc1(?) payable {
    return sub_c675ccc1
}

function lastUpdateTime() payable {
    return lastUpdateTime
}

function rewardPerTokenStored() payable {
    return rewardPerTokenStored
}

function sub_e72c3c42(?) payable {
    require calldata.size - 4 >= 32
    return sub_e72c3c42[arg1]
}

function stablecoin() payable {
    return stablecoinAddress
}

function periodFinish() payable {
    return periodFinish
}

function rewardToken() payable {
    return rewardTokenAddress
}

function _fallback() payable {
    revert
}

function lastTimeRewardApplicable() payable {
    if block.timestamp < periodFinish:
        return block.timestamp
    return periodFinish
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function setScaleFactorsAndThreshold(uint256 arg1, uint256 arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_4c5be6f3 = arg1
    sub_8b8d67d5 = arg2
    scaleFactor = arg3
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0xfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function rewardPerToken() payable {
    if 0 == boostedTotalSupply:
        return rewardPerTokenStored
    if block.timestamp < periodFinish:
        if lastUpdateTime > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - lastUpdateTime:
            if boostedTotalSupply <= 0:
                revert with 0, 'SafeMath: division by zero'
            require boostedTotalSupply
            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / boostedTotalSupply) + rewardPerTokenStored)
        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
            if boostedTotalSupply <= 0:
                revert with 0, 'SafeMath: division by zero'
            require boostedTotalSupply
            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                revert with 0, 'SafeMath: addition overflow'
            return ((0 / boostedTotalSupply) + rewardPerTokenStored)
        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if boostedTotalSupply <= 0:
            revert with 0, 'SafeMath: division by zero'
        require boostedTotalSupply
        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
            revert with 0, 'SafeMath: addition overflow'
        return (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored)
    if lastUpdateTime > periodFinish:
        revert with 0, 'SafeMath: subtraction overflow'
    if not periodFinish - lastUpdateTime:
        if boostedTotalSupply <= 0:
            revert with 0, 'SafeMath: division by zero'
        require boostedTotalSupply
        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / boostedTotalSupply) + rewardPerTokenStored)
    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
        if boostedTotalSupply <= 0:
            revert with 0, 'SafeMath: division by zero'
        require boostedTotalSupply
        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
            revert with 0, 'SafeMath: addition overflow'
        return ((0 / boostedTotalSupply) + rewardPerTokenStored)
    if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if boostedTotalSupply <= 0:
        revert with 0, 'SafeMath: division by zero'
    require boostedTotalSupply
    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
        revert with 0, 'SafeMath: addition overflow'
    return (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored)
}

function notifyRewardAmount(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if boostedTotalSupply != 0:
        if block.timestamp < periodFinish:
            if lastUpdateTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - lastUpdateTime:
                if boostedTotalSupply <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require boostedTotalSupply
                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                    revert with 0, 'SafeMath: addition overflow'
                rewardPerTokenStored += 0 / boostedTotalSupply
            else:
                if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += 0 / boostedTotalSupply
                else:
                    if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply
        else:
            if lastUpdateTime > periodFinish:
                revert with 0, 'SafeMath: subtraction overflow'
            if not periodFinish - lastUpdateTime:
                if boostedTotalSupply <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require boostedTotalSupply
                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                    revert with 0, 'SafeMath: addition overflow'
                rewardPerTokenStored += 0 / boostedTotalSupply
            else:
                if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += 0 / boostedTotalSupply
                else:
                    if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply
    if block.timestamp < periodFinish:
        lastUpdateTime = block.timestamp
    else:
        lastUpdateTime = periodFinish
    if duration <= 0:
        revert with 0, 'SafeMath: division by zero'
    require duration
    rewardRate = arg1 / duration
    lastUpdateTime = starttime
    if duration + starttime < starttime:
        revert with 0, 'SafeMath: addition overflow'
    periodFinish = duration + starttime
    emit RewardAdded(arg1);
}

function earned(address arg1) payable {
    require calldata.size - 4 >= 32
    if 0 == boostedTotalSupply:
        if userRewardPerTokenPaid[address(arg1)] > rewardPerTokenStored:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_3ba35551[address(arg1)]:
            if rewards[address(arg1)] < 0:
                revert with 0, 'SafeMath: addition overflow'
            return rewards[address(arg1)]
        if (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / sub_3ba35551[address(arg1)] != rewardPerTokenStored - userRewardPerTokenPaid[address(arg1)]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if rewards[address(arg1)] + ((rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        return (rewards[address(arg1)] + ((rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18))
    if block.timestamp < periodFinish:
        if lastUpdateTime > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - lastUpdateTime:
            if boostedTotalSupply <= 0:
                revert with 0, 'SafeMath: division by zero'
            require boostedTotalSupply
            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                revert with 0, 'SafeMath: addition overflow'
            if userRewardPerTokenPaid[address(arg1)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                revert with 0, 'SafeMath: subtraction overflow'
            if not sub_3ba35551[address(arg1)]:
                if rewards[address(arg1)] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return rewards[address(arg1)]
            if (0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / sub_3ba35551[address(arg1)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(arg1)]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if rewards[address(arg1)] + ((0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            return (rewards[address(arg1)] + ((0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18))
        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
            if boostedTotalSupply <= 0:
                revert with 0, 'SafeMath: division by zero'
            require boostedTotalSupply
            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                revert with 0, 'SafeMath: addition overflow'
            if userRewardPerTokenPaid[address(arg1)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                revert with 0, 'SafeMath: subtraction overflow'
            if not sub_3ba35551[address(arg1)]:
                if rewards[address(arg1)] < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return rewards[address(arg1)]
            if (0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / sub_3ba35551[address(arg1)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(arg1)]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if rewards[address(arg1)] + ((0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18:
                revert with 0, 'SafeMath: addition overflow'
            return (rewards[address(arg1)] + ((0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18))
        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if boostedTotalSupply <= 0:
            revert with 0, 'SafeMath: division by zero'
        require boostedTotalSupply
        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
            revert with 0, 'SafeMath: addition overflow'
        if userRewardPerTokenPaid[address(arg1)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_3ba35551[address(arg1)]:
            if rewards[address(arg1)] < 0:
                revert with 0, 'SafeMath: addition overflow'
            return rewards[address(arg1)]
        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / sub_3ba35551[address(arg1)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(arg1)]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if rewards[address(arg1)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        return (rewards[address(arg1)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18))
    if lastUpdateTime > periodFinish:
        revert with 0, 'SafeMath: subtraction overflow'
    if not periodFinish - lastUpdateTime:
        if boostedTotalSupply <= 0:
            revert with 0, 'SafeMath: division by zero'
        require boostedTotalSupply
        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
            revert with 0, 'SafeMath: addition overflow'
        if userRewardPerTokenPaid[address(arg1)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_3ba35551[address(arg1)]:
            if rewards[address(arg1)] < 0:
                revert with 0, 'SafeMath: addition overflow'
            return rewards[address(arg1)]
        if (0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / sub_3ba35551[address(arg1)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(arg1)]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if rewards[address(arg1)] + ((0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        return (rewards[address(arg1)] + ((0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18))
    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
        if boostedTotalSupply <= 0:
            revert with 0, 'SafeMath: division by zero'
        require boostedTotalSupply
        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
            revert with 0, 'SafeMath: addition overflow'
        if userRewardPerTokenPaid[address(arg1)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
            revert with 0, 'SafeMath: subtraction overflow'
        if not sub_3ba35551[address(arg1)]:
            if rewards[address(arg1)] < 0:
                revert with 0, 'SafeMath: addition overflow'
            return rewards[address(arg1)]
        if (0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / sub_3ba35551[address(arg1)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(arg1)]:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if rewards[address(arg1)] + ((0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18:
            revert with 0, 'SafeMath: addition overflow'
        return (rewards[address(arg1)] + ((0 / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18))
    if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if boostedTotalSupply <= 0:
        revert with 0, 'SafeMath: division by zero'
    require boostedTotalSupply
    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
        revert with 0, 'SafeMath: addition overflow'
    if userRewardPerTokenPaid[address(arg1)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
        revert with 0, 'SafeMath: subtraction overflow'
    if not sub_3ba35551[address(arg1)]:
        if rewards[address(arg1)] < 0:
            revert with 0, 'SafeMath: addition overflow'
        return rewards[address(arg1)]
    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / sub_3ba35551[address(arg1)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if rewards[address(arg1)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18:
        revert with 0, 'SafeMath: addition overflow'
    return (rewards[address(arg1)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(arg1)]) + (rewardPerTokenStored * sub_3ba35551[address(arg1)]) - (userRewardPerTokenPaid[address(arg1)] * sub_3ba35551[address(arg1)]) / 10^18))
}

function getBoosterPrice(address arg1) payable {
    require calldata.size - 4 >= 32
    if 0 == boostedTotalSupply:
        return 0
    if not sub_e72c3c42[address(arg1)]:
        if not sub_c675ccc1:
            if sub_e72c3c42[address(arg1)] + 1 < sub_e72c3c42[address(arg1)]:
                revert with 0, 'SafeMath: addition overflow'
            if sub_e72c3c42[address(arg1)] + 1 >= sub_4c5be6f3:
                if sub_4c5be6f3 > sub_e72c3c42[address(arg1)] + 1:
                    revert with 0, 'SafeMath: subtraction overflow'
                if sub_e72c3c42[address(arg1)] + -sub_4c5be6f3 + 1:
                    if sub_8b8d67d5 + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5) - (sub_4c5be6f3 * sub_8b8d67d5) / sub_e72c3c42[address(arg1)] + -sub_4c5be6f3 + 1 != sub_8b8d67d5:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
            if sub_3004b466 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if block.timestamp - sub_3004b466 / 2 * 3600:
                if block.timestamp - sub_3004b466 / 2 * 3600 != 1:
                    if not block.timestamp - sub_3004b466 / 2 * 3600:
                        idx = 1
                        while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                            idx = idx + 1
                            continue 
            if not sub_e72c3c42[address(arg1)] + 1:
                if not balanceOf[address(arg1)].field_0:
                    if sub_3ba35551[address(arg1)] > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if boostedTotalSupply:
                        return 0 / boostedTotalSupply, 0
                else:
                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if boostedTotalSupply:
                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
            else:
                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not balanceOf[address(arg1)].field_0:
                    if sub_3ba35551[address(arg1)] > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if boostedTotalSupply:
                        return 0 / boostedTotalSupply, 0
                else:
                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if boostedTotalSupply:
                        return 0 / boostedTotalSupply, 
                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
        else:
            if 100 * sub_c675ccc1 / sub_c675ccc1 != 100:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if sub_e72c3c42[address(arg1)] + 1 < sub_e72c3c42[address(arg1)]:
                revert with 0, 'SafeMath: addition overflow'
            if sub_e72c3c42[address(arg1)] + 1 < sub_4c5be6f3:
                if sub_3004b466 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - sub_3004b466 / 2 * 3600:
                    if not sub_e72c3c42[address(arg1)] + 1:
                        if not balanceOf[address(arg1)].field_0:
                            if sub_3ba35551[address(arg1)] > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 100 * sub_c675ccc1 / 100:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if -1 * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 / 100 * sub_c675ccc1 / 100 != -sub_3ba35551[address(arg1)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not -1 * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 0
                                else:
                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 / -1 * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 != scaleFactor:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 / boostedTotalSupply, 0
                        else:
                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 100 * sub_c675ccc1 / 100:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * sub_c675ccc1 / 100) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100) / 100 * sub_c675ccc1 / 100 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * sub_c675ccc1 / 100) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100):
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                else:
                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * sub_c675ccc1 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * sub_c675ccc1 / 100) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100) != scaleFactor:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * sub_c675ccc1 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 * scaleFactor) / boostedTotalSupply, 
                                               100 * balanceOf[address(arg1)].field_0 / 100
                    else:
                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not balanceOf[address(arg1)].field_0:
                            if sub_3ba35551[address(arg1)] > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 100 * sub_c675ccc1 / 100:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if -1 * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 / 100 * sub_c675ccc1 / 100 != -sub_3ba35551[address(arg1)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not -1 * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 0
                                else:
                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 / -1 * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 != scaleFactor:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 / boostedTotalSupply, 0
                        else:
                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not 100 * sub_c675ccc1 / 100:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 
                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                            else:
                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * sub_c675ccc1 / 100) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100) / 100 * sub_c675ccc1 / 100 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * sub_c675ccc1 / 100) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100):
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 
                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * sub_c675ccc1 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * sub_c675ccc1 / 100) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100) != scaleFactor:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * sub_c675ccc1 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * sub_c675ccc1 / 100 * scaleFactor) / boostedTotalSupply, 
                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                else:
                    if 1 == block.timestamp - sub_3004b466 / 2 * 3600:
                        if not 100 * sub_c675ccc1 / 100:
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 
                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                        else:
                            if 975 * 100 * sub_c675ccc1 / 100 / 100 * sub_c675ccc1 / 100 != 975:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 975 * 100 * sub_c675ccc1 / 100 / 1000:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 / 975 * 100 * sub_c675ccc1 / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 / boostedTotalSupply, 0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 975 * 100 * sub_c675ccc1 / 100 / 1000:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000) / 975 * 100 * sub_c675ccc1 / 100 / 1000 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                       100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 975 * 100 * sub_c675ccc1 / 100 / 1000:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 / 975 * 100 * sub_c675ccc1 / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 / boostedTotalSupply, 0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 975 * 100 * sub_c675ccc1 / 100 / 1000:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000) / 975 * 100 * sub_c675ccc1 / 100 / 1000 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * sub_c675ccc1 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * sub_c675ccc1 / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                    else:
                        if 100 * sub_c675ccc1 / 100:
                            if 975 * 100 * sub_c675ccc1 / 100 / 100 * sub_c675ccc1 / 100 != 975:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            idx = 1
                            s = 975 * 100 * sub_c675ccc1 / 100 / 1000
                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                if not s:
                                    idx = idx + 1
                                    s = 0
                                    continue 
                                if 975 * s / s != 975:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                idx = idx + 1
                                s = 975 * s / 1000
                                continue 
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not s:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not s:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                       100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not s:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not s:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                        else:
                            if block.timestamp - sub_3004b466 / 2 * 3600:
                                if not sub_e72c3c42[address(arg1)] + 1:
                                    if not balanceOf[address(arg1)].field_0:
                                        if sub_3ba35551[address(arg1)] > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                else:
                                    if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not balanceOf[address(arg1)].field_0:
                                        if sub_3ba35551[address(arg1)] > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                            else:
                                if not 100 * sub_c675ccc1 / 100:
                                    idx = 1
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        idx = idx + 1
                                        continue 
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if 975 * 100 * sub_c675ccc1 / 100 / 100 * sub_c675ccc1 / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    idx = 1
                                    s = 975 * 100 * sub_c675ccc1 / 100 / 1000
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not s:
                                            idx = idx + 1
                                            s = 0
                                            continue 
                                        if 975 * s / s != 975:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        idx = idx + 1
                                        s = 975 * s / 1000
                                        continue 
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
            else:
                if sub_4c5be6f3 > sub_e72c3c42[address(arg1)] + 1:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not sub_e72c3c42[address(arg1)] + -sub_4c5be6f3 + 1:
                    if not 100 * sub_c675ccc1 / 100:
                        if sub_3004b466 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if block.timestamp - sub_3004b466 / 2 * 3600:
                            if block.timestamp - sub_3004b466 / 2 * 3600 != 1:
                                if not block.timestamp - sub_3004b466 / 2 * 3600:
                                    idx = 1
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        idx = idx + 1
                                        continue 
                        if not sub_e72c3c42[address(arg1)] + 1:
                            if not balanceOf[address(arg1)].field_0:
                                if sub_3ba35551[address(arg1)] > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                        else:
                            if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not balanceOf[address(arg1)].field_0:
                                if sub_3ba35551[address(arg1)] > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 
                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                    else:
                        if 100 * 100 * sub_c675ccc1 / 100 / 100 * sub_c675ccc1 / 100 != 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if sub_3004b466 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - sub_3004b466 / 2 * 3600:
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 100 * 100 * sub_c675ccc1 / 100 / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 / 100 * 100 * sub_c675ccc1 / 100 / 100 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 / -1 * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 / boostedTotalSupply, 0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 100 * 100 * sub_c675ccc1 / 100 / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100) / 100 * 100 * sub_c675ccc1 / 100 / 100 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 * scaleFactor) / boostedTotalSupply, 
                                                       100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 100 * 100 * sub_c675ccc1 / 100 / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 / 100 * 100 * sub_c675ccc1 / 100 / 100 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 / -1 * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 / boostedTotalSupply, 0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 100 * 100 * sub_c675ccc1 / 100 / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100) / 100 * 100 * sub_c675ccc1 / 100 / 100 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * 100 * sub_c675ccc1 / 100 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * 100 * sub_c675ccc1 / 100 / 100 * scaleFactor) / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                        else:
                            if 1 == block.timestamp - sub_3004b466 / 2 * 3600:
                                if not 100 * 100 * sub_c675ccc1 / 100 / 100:
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 100 * 100 * sub_c675ccc1 / 100 / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 / 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 / boostedTotalSupply, 
                                                               0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) / 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 / 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 / boostedTotalSupply, 
                                                               0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) / 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                            else:
                                if 100 * 100 * sub_c675ccc1 / 100 / 100:
                                    if 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 100 * 100 * sub_c675ccc1 / 100 / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    idx = 1
                                    s = 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not s:
                                            idx = idx + 1
                                            s = 0
                                            continue 
                                        if 975 * s / s != 975:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        idx = idx + 1
                                        s = 975 * s / 1000
                                        continue 
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not sub_e72c3c42[address(arg1)] + 1:
                                            if not balanceOf[address(arg1)].field_0:
                                                if sub_3ba35551[address(arg1)] > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not balanceOf[address(arg1)].field_0:
                                                if sub_3ba35551[address(arg1)] > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if not 100 * 100 * sub_c675ccc1 / 100 / 100:
                                            idx = 1
                                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                                idx = idx + 1
                                                continue 
                                            if not sub_e72c3c42[address(arg1)] + 1:
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 100 * 100 * sub_c675ccc1 / 100 / 100 != 975:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            idx = 1
                                            s = 975 * 100 * 100 * sub_c675ccc1 / 100 / 100 / 1000
                                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                                if not s:
                                                    idx = idx + 1
                                                    s = 0
                                                    continue 
                                                if 975 * s / s != 975:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                idx = idx + 1
                                                s = 975 * s / 1000
                                                continue 
                                            if not sub_e72c3c42[address(arg1)] + 1:
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 0
                                                    else:
                                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 0
                                                        else:
                                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                                else:
                                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                    else:
                                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                        else:
                                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                                       100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 0
                                                    else:
                                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 0
                                                        else:
                                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                                else:
                                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 
                                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                    else:
                                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 
                                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                        else:
                                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                else:
                    if sub_8b8d67d5 + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5) - (sub_4c5be6f3 * sub_8b8d67d5) / sub_e72c3c42[address(arg1)] + -sub_4c5be6f3 + 1 != sub_8b8d67d5:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not 100 * sub_c675ccc1 / 100:
                        if sub_3004b466 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if block.timestamp - sub_3004b466 / 2 * 3600:
                            if block.timestamp - sub_3004b466 / 2 * 3600 != 1:
                                if not block.timestamp - sub_3004b466 / 2 * 3600:
                                    idx = 1
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        idx = idx + 1
                                        continue 
                        if not sub_e72c3c42[address(arg1)] + 1:
                            if not balanceOf[address(arg1)].field_0:
                                if sub_3ba35551[address(arg1)] > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                        else:
                            if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not balanceOf[address(arg1)].field_0:
                                if sub_3ba35551[address(arg1)] > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 
                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                    else:
                        if (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 * sub_c675ccc1 / 100 != sub_8b8d67d5 + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5) + (-1 * sub_4c5be6f3 * sub_8b8d67d5) + 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if sub_3004b466 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - sub_3004b466 / 2 * 3600:
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / -1 * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / boostedTotalSupply, 
                                                       0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) / (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 * scaleFactor) / boostedTotalSupply, 
                                                       100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / -1 * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / boostedTotalSupply, 
                                                       0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) / (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 * scaleFactor) / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                        else:
                            if 1 == block.timestamp - sub_3004b466 / 2 * 3600:
                                if not (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100:
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 / 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 / boostedTotalSupply, 
                                                               0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) / 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 / 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 / boostedTotalSupply, 
                                                               0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) / 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                            else:
                                if (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100:
                                    if 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    idx = 1
                                    s = 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not s:
                                            idx = idx + 1
                                            s = 0
                                            continue 
                                        if 975 * s / s != 975:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        idx = idx + 1
                                        s = 975 * s / 1000
                                        continue 
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not sub_e72c3c42[address(arg1)] + 1:
                                            if not balanceOf[address(arg1)].field_0:
                                                if sub_3ba35551[address(arg1)] > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not balanceOf[address(arg1)].field_0:
                                                if sub_3ba35551[address(arg1)] > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if not (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100:
                                            idx = 1
                                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                                idx = idx + 1
                                                continue 
                                            if not sub_e72c3c42[address(arg1)] + 1:
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 != 975:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            idx = 1
                                            s = 975 * (100 * 100 * sub_c675ccc1 / 100) + (sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * 100 * sub_c675ccc1 / 100) / 100 / 1000
                                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                                if not s:
                                                    idx = idx + 1
                                                    s = 0
                                                    continue 
                                                if 975 * s / s != 975:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                idx = idx + 1
                                                s = 975 * s / 1000
                                                continue 
                                            if not sub_e72c3c42[address(arg1)] + 1:
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 0
                                                    else:
                                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 0
                                                        else:
                                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                                else:
                                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                    else:
                                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                        else:
                                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                                       100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 0
                                                    else:
                                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 0
                                                        else:
                                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                                else:
                                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 
                                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                    else:
                                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 
                                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                        else:
                                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
    else:
        if 5 * sub_e72c3c42[address(arg1)] / sub_e72c3c42[address(arg1)] != 5:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if (5 * sub_e72c3c42[address(arg1)]) + 100 < 5 * sub_e72c3c42[address(arg1)]:
            revert with 0, 'SafeMath: addition overflow'
        if not sub_c675ccc1:
            if sub_e72c3c42[address(arg1)] + 1 < sub_e72c3c42[address(arg1)]:
                revert with 0, 'SafeMath: addition overflow'
            if sub_e72c3c42[address(arg1)] + 1 >= sub_4c5be6f3:
                if sub_4c5be6f3 > sub_e72c3c42[address(arg1)] + 1:
                    revert with 0, 'SafeMath: subtraction overflow'
                if sub_e72c3c42[address(arg1)] + -sub_4c5be6f3 + 1:
                    if sub_8b8d67d5 + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5) - (sub_4c5be6f3 * sub_8b8d67d5) / sub_e72c3c42[address(arg1)] + -sub_4c5be6f3 + 1 != sub_8b8d67d5:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
            if sub_3004b466 > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if block.timestamp - sub_3004b466 / 2 * 3600:
                if block.timestamp - sub_3004b466 / 2 * 3600 != 1:
                    if not block.timestamp - sub_3004b466 / 2 * 3600:
                        idx = 1
                        while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                            idx = idx + 1
                            continue 
            if not sub_e72c3c42[address(arg1)] + 1:
                if not balanceOf[address(arg1)].field_0:
                    if sub_3ba35551[address(arg1)] > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if boostedTotalSupply:
                        return 0 / boostedTotalSupply, 0
                else:
                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if boostedTotalSupply:
                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
            else:
                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not balanceOf[address(arg1)].field_0:
                    if sub_3ba35551[address(arg1)] > 0:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if boostedTotalSupply:
                        return 0 / boostedTotalSupply, 0
                else:
                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    if boostedTotalSupply:
                        return 0 / boostedTotalSupply, 
                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
        else:
            if (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / sub_c675ccc1 != (5 * sub_e72c3c42[address(arg1)]) + 100:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if sub_e72c3c42[address(arg1)] + 1 < sub_e72c3c42[address(arg1)]:
                revert with 0, 'SafeMath: addition overflow'
            if sub_e72c3c42[address(arg1)] + 1 < sub_4c5be6f3:
                if sub_3004b466 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - sub_3004b466 / 2 * 3600:
                    if not sub_e72c3c42[address(arg1)] + 1:
                        if not balanceOf[address(arg1)].field_0:
                            if sub_3ba35551[address(arg1)] > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if -1 * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != -sub_3ba35551[address(arg1)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not -1 * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 0
                                else:
                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / -1 * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != scaleFactor:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / boostedTotalSupply, 
                                               0
                        else:
                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100):
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                else:
                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) != scaleFactor:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 * scaleFactor) / boostedTotalSupply, 
                                               100 * balanceOf[address(arg1)].field_0 / 100
                    else:
                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if not balanceOf[address(arg1)].field_0:
                            if sub_3ba35551[address(arg1)] > 0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if -1 * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != -sub_3ba35551[address(arg1)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not -1 * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 0
                                else:
                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / -1 * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != scaleFactor:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / boostedTotalSupply, 
                                               0
                        else:
                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 
                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                            else:
                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100):
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 
                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) != scaleFactor:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 * scaleFactor) / boostedTotalSupply, 
                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                else:
                    if 1 == block.timestamp - sub_3004b466 / 2 * 3600:
                        if not (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    if boostedTotalSupply:
                                        return 0 / boostedTotalSupply, 
                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                        else:
                            if 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != 975:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 / 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 / boostedTotalSupply, 
                                                       0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) / 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                       100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 / 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 / boostedTotalSupply, 
                                                       0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) / 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                    else:
                        if (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                            if 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != 975:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            idx = 1
                            s = 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000
                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                if not s:
                                    idx = idx + 1
                                    s = 0
                                    continue 
                                if 975 * s / s != 975:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                idx = idx + 1
                                s = 975 * s / 1000
                                continue 
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not s:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not s:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                       100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not s:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not s:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                        else:
                            if block.timestamp - sub_3004b466 / 2 * 3600:
                                if not sub_e72c3c42[address(arg1)] + 1:
                                    if not balanceOf[address(arg1)].field_0:
                                        if sub_3ba35551[address(arg1)] > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                else:
                                    if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not balanceOf[address(arg1)].field_0:
                                        if sub_3ba35551[address(arg1)] > 0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                            else:
                                if not (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                                    idx = 1
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        idx = idx + 1
                                        continue 
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    idx = 1
                                    s = 975 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 1000
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not s:
                                            idx = idx + 1
                                            s = 0
                                            continue 
                                        if 975 * s / s != 975:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        idx = idx + 1
                                        s = 975 * s / 1000
                                        continue 
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
            else:
                if sub_4c5be6f3 > sub_e72c3c42[address(arg1)] + 1:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not sub_e72c3c42[address(arg1)] + -sub_4c5be6f3 + 1:
                    if not (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                        if sub_3004b466 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if block.timestamp - sub_3004b466 / 2 * 3600:
                            if block.timestamp - sub_3004b466 / 2 * 3600 != 1:
                                if not block.timestamp - sub_3004b466 / 2 * 3600:
                                    idx = 1
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        idx = idx + 1
                                        continue 
                        if not sub_e72c3c42[address(arg1)] + 1:
                            if not balanceOf[address(arg1)].field_0:
                                if sub_3ba35551[address(arg1)] > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                        else:
                            if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not balanceOf[address(arg1)].field_0:
                                if sub_3ba35551[address(arg1)] > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 
                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                    else:
                        if 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if sub_3004b466 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - sub_3004b466 / 2 * 3600:
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / -1 * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / boostedTotalSupply, 
                                                       0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 * scaleFactor) / boostedTotalSupply, 
                                                       100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / -1 * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / boostedTotalSupply, 
                                                       0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 * scaleFactor) / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                        else:
                            if 1 == block.timestamp - sub_3004b466 / 2 * 3600:
                                if not 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100:
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 / 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 / boostedTotalSupply, 
                                                               0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) / 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 / 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 / boostedTotalSupply, 
                                                               0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) / 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                            else:
                                if 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100:
                                    if 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    idx = 1
                                    s = 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not s:
                                            idx = idx + 1
                                            s = 0
                                            continue 
                                        if 975 * s / s != 975:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        idx = idx + 1
                                        s = 975 * s / 1000
                                        continue 
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not sub_e72c3c42[address(arg1)] + 1:
                                            if not balanceOf[address(arg1)].field_0:
                                                if sub_3ba35551[address(arg1)] > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not balanceOf[address(arg1)].field_0:
                                                if sub_3ba35551[address(arg1)] > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if not 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100:
                                            idx = 1
                                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                                idx = idx + 1
                                                continue 
                                            if not sub_e72c3c42[address(arg1)] + 1:
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 != 975:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            idx = 1
                                            s = 975 * 100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 / 100 / 1000
                                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                                if not s:
                                                    idx = idx + 1
                                                    s = 0
                                                    continue 
                                                if 975 * s / s != 975:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                idx = idx + 1
                                                s = 975 * s / 1000
                                                continue 
                                            if not sub_e72c3c42[address(arg1)] + 1:
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 0
                                                    else:
                                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 0
                                                        else:
                                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                                else:
                                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                    else:
                                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                        else:
                                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                                       100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 0
                                                    else:
                                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 0
                                                        else:
                                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                                else:
                                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 
                                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                    else:
                                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 
                                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                        else:
                                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                else:
                    if sub_8b8d67d5 + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5) - (sub_4c5be6f3 * sub_8b8d67d5) / sub_e72c3c42[address(arg1)] + -sub_4c5be6f3 + 1 != sub_8b8d67d5:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if not (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100:
                        if sub_3004b466 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if block.timestamp - sub_3004b466 / 2 * 3600:
                            if block.timestamp - sub_3004b466 / 2 * 3600 != 1:
                                if not block.timestamp - sub_3004b466 / 2 * 3600:
                                    idx = 1
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        idx = idx + 1
                                        continue 
                        if not sub_e72c3c42[address(arg1)] + 1:
                            if not balanceOf[address(arg1)].field_0:
                                if sub_3ba35551[address(arg1)] > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                        else:
                            if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not balanceOf[address(arg1)].field_0:
                                if sub_3ba35551[address(arg1)] > 0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 0
                            else:
                                if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                if boostedTotalSupply:
                                    return 0 / boostedTotalSupply, 
                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                    else:
                        if (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100 != sub_8b8d67d5 + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5) + (-1 * sub_4c5be6f3 * sub_8b8d67d5) + 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if sub_3004b466 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - sub_3004b466 / 2 * 3600:
                            if not sub_e72c3c42[address(arg1)] + 1:
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / -1 * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / boostedTotalSupply, 
                                                       0
                                else:
                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) / (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 * scaleFactor) / boostedTotalSupply, 
                                                       100 * balanceOf[address(arg1)].field_0 / 100
                            else:
                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if not balanceOf[address(arg1)].field_0:
                                    if sub_3ba35551[address(arg1)] > 0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 0
                                    else:
                                        if -1 * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 != -sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not -1 * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / -1 * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / boostedTotalSupply, 
                                                       0
                                else:
                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        if boostedTotalSupply:
                                            return 0 / boostedTotalSupply, 
                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) / (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100) != scaleFactor:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 * scaleFactor) - (sub_3ba35551[address(arg1)] * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 * scaleFactor) / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                        else:
                            if 1 == block.timestamp - sub_3004b466 / 2 * 3600:
                                if not (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100:
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            if boostedTotalSupply:
                                                return 0 / boostedTotalSupply, 
                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 / 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 / boostedTotalSupply, 
                                                               0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) / 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 / 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 / -1 * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 / boostedTotalSupply, 
                                                               0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) / 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 * scaleFactor) - (sub_3ba35551[address(arg1)] * 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000 * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                            else:
                                if (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100:
                                    if 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 != 975:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    idx = 1
                                    s = 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000
                                    while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not s:
                                            idx = idx + 1
                                            s = 0
                                            continue 
                                        if 975 * s / s != 975:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        idx = idx + 1
                                        s = 975 * s / 1000
                                        continue 
                                    if not sub_e72c3c42[address(arg1)] + 1:
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                else:
                                                    if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               100 * balanceOf[address(arg1)].field_0 / 100
                                    else:
                                        if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not balanceOf[address(arg1)].field_0:
                                            if sub_3ba35551[address(arg1)] > 0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not -1 * sub_3ba35551[address(arg1)] * s:
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                        else:
                                            if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not s:
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                            else:
                                                if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                else:
                                                    if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                else:
                                    if block.timestamp - sub_3004b466 / 2 * 3600:
                                        if not sub_e72c3c42[address(arg1)] + 1:
                                            if not balanceOf[address(arg1)].field_0:
                                                if sub_3ba35551[address(arg1)] > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                        else:
                                            if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if not balanceOf[address(arg1)].field_0:
                                                if sub_3ba35551[address(arg1)] > 0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 0
                                            else:
                                                if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                if boostedTotalSupply <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                if boostedTotalSupply:
                                                    return 0 / boostedTotalSupply, 
                                                           (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                    else:
                                        if not (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100:
                                            idx = 1
                                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                                idx = idx + 1
                                                continue 
                                            if not sub_e72c3c42[address(arg1)] + 1:
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 0
                                                else:
                                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if boostedTotalSupply <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    if boostedTotalSupply:
                                                        return 0 / boostedTotalSupply, 
                                                               (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                        else:
                                            if 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 != 975:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            idx = 1
                                            s = 975 * (100 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) + (sub_e72c3c42[address(arg1)] * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) - (sub_4c5be6f3 * sub_8b8d67d5 * (100 * sub_c675ccc1) + (5 * sub_e72c3c42[address(arg1)] * sub_c675ccc1) / 100) / 100 / 1000
                                            while idx < block.timestamp - sub_3004b466 / 2 * 3600:
                                                if not s:
                                                    idx = idx + 1
                                                    s = 0
                                                    continue 
                                                if 975 * s / s != 975:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                idx = idx + 1
                                                s = 975 * s / 1000
                                                continue 
                                            if not sub_e72c3c42[address(arg1)] + 1:
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 0
                                                    else:
                                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 0
                                                        else:
                                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                                else:
                                                    if 100 * balanceOf[address(arg1)].field_0 / balanceOf[address(arg1)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > 100 * balanceOf[address(arg1)].field_0 / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                    else:
                                                        if (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != (100 * balanceOf[address(arg1)].field_0 / 100) - sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 100 * balanceOf[address(arg1)].field_0 / 100
                                                        else:
                                                            if (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / (100 * balanceOf[address(arg1)].field_0 / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return (100 * balanceOf[address(arg1)].field_0 / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                                       100 * balanceOf[address(arg1)].field_0 / 100
                                            else:
                                                if (5 * sub_e72c3c42[address(arg1)]) + 5 / sub_e72c3c42[address(arg1)] + 1 != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if not balanceOf[address(arg1)].field_0:
                                                    if sub_3ba35551[address(arg1)] > 0:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 0
                                                    else:
                                                        if -1 * sub_3ba35551[address(arg1)] * s / s != -sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not -1 * sub_3ba35551[address(arg1)] * s:
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 0
                                                        else:
                                                            if -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / -1 * sub_3ba35551[address(arg1)] * s != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return -1 * scaleFactor * sub_3ba35551[address(arg1)] * s / boostedTotalSupply, 0
                                                else:
                                                    if (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / balanceOf[address(arg1)].field_0 != (5 * sub_e72c3c42[address(arg1)]) + 105:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if sub_3ba35551[address(arg1)] > (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100:
                                                        revert with 0, 'SafeMath: subtraction overflow'
                                                    if not s:
                                                        if boostedTotalSupply <= 0:
                                                            revert with 0, 'SafeMath: division by zero'
                                                        if boostedTotalSupply:
                                                            return 0 / boostedTotalSupply, 
                                                                   (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                    else:
                                                        if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) / s != ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100) - sub_3ba35551[address(arg1)]:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        if not ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s):
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return 0 / boostedTotalSupply, 
                                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
                                                        else:
                                                            if ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s) - (sub_3ba35551[address(arg1)] * s) != scaleFactor:
                                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                            32,
                                                                            33,
                                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                            mem[197 len 31]
                                                            if boostedTotalSupply <= 0:
                                                                revert with 0, 'SafeMath: division by zero'
                                                            if boostedTotalSupply:
                                                                return ((105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100 * s * scaleFactor) - (sub_3ba35551[address(arg1)] * s * scaleFactor) / boostedTotalSupply, 
                                                                       (105 * balanceOf[address(arg1)].field_0) + (5 * sub_e72c3c42[address(arg1)] * balanceOf[address(arg1)].field_0) / 100
    ('iszero', ('stor', ('name', 'boostedTotalSupply', 18)))
    revert
}

function withdraw(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if 0 == boostedTotalSupply:
        if block.timestamp < periodFinish:
            lastUpdateTime = block.timestamp
            if not msg.sender:
                if block.timestamp < starttime:
                    revert with 0, 'not start'
                if not arg1:
                    revert with 0, 'Cannot withdraw 0'
                if arg1 > totalSupply:
                    revert with 0, 'SafeMath: subtraction overflow'
                totalSupply -= arg1
                if arg1 > balanceOf[msg.sender].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                balanceOf[msg.sender].field_0 -= arg1
                sub_e72c3c42[msg.sender] = 0
                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                    revert with 0, 'SafeMath: subtraction overflow'
                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                if not sub_e72c3c42[address(msg.sender)]:
                    if not balanceOf[address(msg.sender)].field_0:
                        sub_3ba35551[address(msg.sender)] = 0
                        if boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                    else:
                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        mem[324 len 0] = 0
                else:
                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not balanceOf[address(msg.sender)].field_0:
                        sub_3ba35551[address(msg.sender)] = 0
                        if boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                    else:
                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        mem[324 len 0] = 0
            else:
                if 0 == boostedTotalSupply:
                    if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_3ba35551[address(msg.sender)]:
                        if rewards[address(msg.sender)] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not arg1:
                            revert with 0, 'Cannot withdraw 0'
                        if arg1 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= arg1
                        if arg1 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= arg1
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        mem[324 len 0] = 0
                    else:
                        if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not arg1:
                            revert with 0, 'Cannot withdraw 0'
                        if arg1 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= arg1
                        if arg1 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= arg1
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            mem[324 len 0] = 0
                else:
                    if block.timestamp >= periodFinish:
                        if lastUpdateTime > periodFinish:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not periodFinish - lastUpdateTime:
                            if boostedTotalSupply <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require boostedTotalSupply
                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                revert with 0, 'SafeMath: addition overflow'
                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                            else:
                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        else:
                            if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                    else:
                        if lastUpdateTime > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - lastUpdateTime:
                            if boostedTotalSupply <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require boostedTotalSupply
                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                revert with 0, 'SafeMath: addition overflow'
                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                            else:
                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                        else:
                            if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                            else:
                                if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
        else:
            lastUpdateTime = periodFinish
            if not msg.sender:
                if block.timestamp < starttime:
                    revert with 0, 'not start'
                if not arg1:
                    revert with 0, 'Cannot withdraw 0'
                if arg1 > totalSupply:
                    revert with 0, 'SafeMath: subtraction overflow'
                totalSupply -= arg1
                if arg1 > balanceOf[msg.sender].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                balanceOf[msg.sender].field_0 -= arg1
                sub_e72c3c42[msg.sender] = 0
                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                    revert with 0, 'SafeMath: subtraction overflow'
                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                if not sub_e72c3c42[address(msg.sender)]:
                    if not balanceOf[address(msg.sender)].field_0:
                        sub_3ba35551[address(msg.sender)] = 0
                        if boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                else:
                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not balanceOf[address(msg.sender)].field_0:
                        sub_3ba35551[address(msg.sender)] = 0
                        if boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                if not ext_code.size(stakeTokenAddress):
                    revert with 0, 'Address: call to non-contract'
                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                mem[324 len 0] = 0
            else:
                if 0 == boostedTotalSupply:
                    if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_3ba35551[address(msg.sender)]:
                        if rewards[address(msg.sender)] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not arg1:
                            revert with 0, 'Cannot withdraw 0'
                        if arg1 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= arg1
                        if arg1 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= arg1
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        mem[324 len 0] = 0
                    else:
                        if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not arg1:
                            revert with 0, 'Cannot withdraw 0'
                        if arg1 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= arg1
                        if arg1 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= arg1
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            mem[324 len 0] = 0
                else:
                    if block.timestamp < periodFinish:
                        if lastUpdateTime > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - lastUpdateTime:
                            if boostedTotalSupply <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require boostedTotalSupply
                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                revert with 0, 'SafeMath: addition overflow'
                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                        else:
                            if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                    else:
                        if lastUpdateTime > periodFinish:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not periodFinish - lastUpdateTime:
                            if boostedTotalSupply <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require boostedTotalSupply
                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                revert with 0, 'SafeMath: addition overflow'
                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                            else:
                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                        else:
                            if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                            else:
                                if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
    else:
        if block.timestamp < periodFinish:
            if lastUpdateTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - lastUpdateTime:
                if boostedTotalSupply <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require boostedTotalSupply
                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                    revert with 0, 'SafeMath: addition overflow'
                rewardPerTokenStored += 0 / boostedTotalSupply
                if block.timestamp < periodFinish:
                    lastUpdateTime = block.timestamp
                    if not msg.sender:
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not arg1:
                            revert with 0, 'Cannot withdraw 0'
                        if arg1 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= arg1
                        if arg1 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= arg1
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        mem[324 len 0] = 0
                    else:
                        if 0 == boostedTotalSupply:
                            if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                            else:
                                if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                        else:
                            if block.timestamp >= periodFinish:
                                if lastUpdateTime > periodFinish:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not periodFinish - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if lastUpdateTime > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                else:
                                    if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                else:
                    lastUpdateTime = periodFinish
                    if not msg.sender:
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not arg1:
                            revert with 0, 'Cannot withdraw 0'
                        if arg1 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= arg1
                        if arg1 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= arg1
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            mem[324 len 0] = 0
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                    else:
                        if 0 == boostedTotalSupply:
                            if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                        else:
                            if block.timestamp < periodFinish:
                                if lastUpdateTime > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                            else:
                                if lastUpdateTime > periodFinish:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not periodFinish - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
            else:
                if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += 0 / boostedTotalSupply
                    if block.timestamp < periodFinish:
                        lastUpdateTime = block.timestamp
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not arg1:
                                revert with 0, 'Cannot withdraw 0'
                            if arg1 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= arg1
                            if arg1 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= arg1
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                    else:
                        lastUpdateTime = periodFinish
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not arg1:
                                revert with 0, 'Cannot withdraw 0'
                            if arg1 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= arg1
                            if arg1 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= arg1
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                else:
                    if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply
                    if block.timestamp < periodFinish:
                        lastUpdateTime = block.timestamp
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not arg1:
                                revert with 0, 'Cannot withdraw 0'
                            if arg1 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= arg1
                            if arg1 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= arg1
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                    else:
                        lastUpdateTime = periodFinish
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not arg1:
                                revert with 0, 'Cannot withdraw 0'
                            if arg1 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= arg1
                            if arg1 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= arg1
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
        else:
            if lastUpdateTime > periodFinish:
                revert with 0, 'SafeMath: subtraction overflow'
            if not periodFinish - lastUpdateTime:
                if boostedTotalSupply <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require boostedTotalSupply
                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                    revert with 0, 'SafeMath: addition overflow'
                rewardPerTokenStored += 0 / boostedTotalSupply
                if block.timestamp >= periodFinish:
                    lastUpdateTime = periodFinish
                    if not msg.sender:
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not arg1:
                            revert with 0, 'Cannot withdraw 0'
                        if arg1 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= arg1
                        if arg1 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= arg1
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                    else:
                        if 0 == boostedTotalSupply:
                            if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                            else:
                                if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                        else:
                            if block.timestamp < periodFinish:
                                if lastUpdateTime > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                            else:
                                if lastUpdateTime > periodFinish:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not periodFinish - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                        if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                else:
                    lastUpdateTime = block.timestamp
                    if not msg.sender:
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not arg1:
                            revert with 0, 'Cannot withdraw 0'
                        if arg1 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= arg1
                        if arg1 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= arg1
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            mem[324 len 0] = 0
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                    else:
                        if 0 == boostedTotalSupply:
                            if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                            else:
                                if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not arg1:
                                    revert with 0, 'Cannot withdraw 0'
                                if arg1 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= arg1
                                if arg1 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= arg1
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                        else:
                            if block.timestamp < periodFinish:
                                if lastUpdateTime > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                else:
                                    if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                            else:
                                if lastUpdateTime > periodFinish:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not periodFinish - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not arg1:
                                            revert with 0, 'Cannot withdraw 0'
                                        if arg1 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= arg1
                                        if arg1 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= arg1
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                    else:
                                        if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
            else:
                if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += 0 / boostedTotalSupply
                    if block.timestamp < periodFinish:
                        lastUpdateTime = block.timestamp
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not arg1:
                                revert with 0, 'Cannot withdraw 0'
                            if arg1 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= arg1
                            if arg1 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= arg1
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                    else:
                        lastUpdateTime = periodFinish
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not arg1:
                                revert with 0, 'Cannot withdraw 0'
                            if arg1 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= arg1
                            if arg1 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= arg1
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                mem[324 len 0] = 0
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                else:
                    if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply
                    if block.timestamp < periodFinish:
                        lastUpdateTime = block.timestamp
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not arg1:
                                revert with 0, 'Cannot withdraw 0'
                            if arg1 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= arg1
                            if arg1 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= arg1
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    mem[324 len 0] = 0
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                    else:
                        lastUpdateTime = periodFinish
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not arg1:
                                revert with 0, 'Cannot withdraw 0'
                            if arg1 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= arg1
                            if arg1 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= arg1
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not arg1:
                                        revert with 0, 'Cannot withdraw 0'
                                    if arg1 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= arg1
                                    if arg1 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= arg1
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not arg1:
                                                revert with 0, 'Cannot withdraw 0'
                                            if arg1 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= arg1
                                            if arg1 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= arg1
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not arg1:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if arg1 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= arg1
                                                if arg1 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= arg1
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, Mask(224, 32, arg1) >> 32
                                                mem[324 len 0] = 0
    call stakeTokenAddress with:
       funct uint32(msg.sender)
         gas gas_remaining wei
        args Mask(224, 32, arg1) << 224, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), msg.sender, arg1
        if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
            revert with 0, 32, 42, 0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
}

function exit() payable {
    if 0 == boostedTotalSupply:
        if block.timestamp < periodFinish:
            lastUpdateTime = block.timestamp
            if not msg.sender:
                if block.timestamp < starttime:
                    revert with 0, 'not start'
                if not balanceOf[address(msg.sender)].field_0:
                    revert with 0, 'Cannot withdraw 0'
                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                    revert with 0, 'SafeMath: subtraction overflow'
                totalSupply -= balanceOf[address(msg.sender)].field_0
                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                sub_e72c3c42[msg.sender] = 0
                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                    revert with 0, 'SafeMath: subtraction overflow'
                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                if not sub_e72c3c42[address(msg.sender)]:
                    if not balanceOf[address(msg.sender)].field_0:
                        sub_3ba35551[address(msg.sender)] = 0
                        if boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                        mem[324 len 0] = 0
                    else:
                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                else:
                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not balanceOf[address(msg.sender)].field_0:
                        sub_3ba35551[address(msg.sender)] = 0
                        if boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                    if not ext_code.size(stakeTokenAddress):
                        revert with 0, 'Address: call to non-contract'
                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
            else:
                if 0 == boostedTotalSupply:
                    if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_3ba35551[address(msg.sender)]:
                        if rewards[address(msg.sender)] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not balanceOf[address(msg.sender)].field_0:
                            revert with 0, 'Cannot withdraw 0'
                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= balanceOf[address(msg.sender)].field_0
                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            mem[324 len 0] = 0
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                    else:
                        if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not balanceOf[address(msg.sender)].field_0:
                            revert with 0, 'Cannot withdraw 0'
                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= balanceOf[address(msg.sender)].field_0
                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                        mem[324 len 0] = 0
                else:
                    if block.timestamp < periodFinish:
                        if lastUpdateTime > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - lastUpdateTime:
                            if boostedTotalSupply <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require boostedTotalSupply
                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                revert with 0, 'SafeMath: addition overflow'
                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                        else:
                            if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                            else:
                                if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                    else:
                        if lastUpdateTime > periodFinish:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not periodFinish - lastUpdateTime:
                            if boostedTotalSupply <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require boostedTotalSupply
                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                revert with 0, 'SafeMath: addition overflow'
                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                            else:
                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                        else:
                            if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
        else:
            lastUpdateTime = periodFinish
            if not msg.sender:
                if block.timestamp < starttime:
                    revert with 0, 'not start'
                if not balanceOf[address(msg.sender)].field_0:
                    revert with 0, 'Cannot withdraw 0'
                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                    revert with 0, 'SafeMath: subtraction overflow'
                totalSupply -= balanceOf[address(msg.sender)].field_0
                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                    revert with 0, 'SafeMath: subtraction overflow'
                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                sub_e72c3c42[msg.sender] = 0
                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                    revert with 0, 'SafeMath: subtraction overflow'
                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                if not sub_e72c3c42[address(msg.sender)]:
                    if not balanceOf[address(msg.sender)].field_0:
                        sub_3ba35551[address(msg.sender)] = 0
                        if boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                    if not ext_code.size(stakeTokenAddress):
                        revert with 0, 'Address: call to non-contract'
                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                    mem[324 len 0] = 0
                else:
                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                        revert with 0, 'SafeMath: addition overflow'
                    if not balanceOf[address(msg.sender)].field_0:
                        sub_3ba35551[address(msg.sender)] = 0
                        if boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                        mem[324 len 0] = 0
                    else:
                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                            revert with 0, 'SafeMath: addition overflow'
                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
            else:
                if 0 == boostedTotalSupply:
                    if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not sub_3ba35551[address(msg.sender)]:
                        if rewards[address(msg.sender)] < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not balanceOf[address(msg.sender)].field_0:
                            revert with 0, 'Cannot withdraw 0'
                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= balanceOf[address(msg.sender)].field_0
                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            mem[324 len 0] = 0
                    else:
                        if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                            revert with 0, 'SafeMath: addition overflow'
                        rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not balanceOf[address(msg.sender)].field_0:
                            revert with 0, 'Cannot withdraw 0'
                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= balanceOf[address(msg.sender)].field_0
                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            mem[324 len 0] = 0
                else:
                    if block.timestamp < periodFinish:
                        if lastUpdateTime > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - lastUpdateTime:
                            if boostedTotalSupply <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require boostedTotalSupply
                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                revert with 0, 'SafeMath: addition overflow'
                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not balanceOf[address(msg.sender)].field_0:
                                revert with 0, 'Cannot withdraw 0'
                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= balanceOf[address(msg.sender)].field_0
                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            mem[324 len 0] = 0
                        else:
                            if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                    else:
                        if lastUpdateTime > periodFinish:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not periodFinish - lastUpdateTime:
                            if boostedTotalSupply <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require boostedTotalSupply
                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                revert with 0, 'SafeMath: addition overflow'
                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                            else:
                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                        else:
                            if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if boostedTotalSupply <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require boostedTotalSupply
                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                    revert with 0, 'SafeMath: addition overflow'
                                if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                else:
                                    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
    else:
        if block.timestamp < periodFinish:
            if lastUpdateTime > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - lastUpdateTime:
                if boostedTotalSupply <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require boostedTotalSupply
                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                    revert with 0, 'SafeMath: addition overflow'
                rewardPerTokenStored += 0 / boostedTotalSupply
                if block.timestamp < periodFinish:
                    lastUpdateTime = block.timestamp
                    if not msg.sender:
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not balanceOf[address(msg.sender)].field_0:
                            revert with 0, 'Cannot withdraw 0'
                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= balanceOf[address(msg.sender)].field_0
                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                    else:
                        if 0 == boostedTotalSupply:
                            if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                            else:
                                if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                        else:
                            if block.timestamp < periodFinish:
                                if lastUpdateTime > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                            else:
                                if lastUpdateTime > periodFinish:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not periodFinish - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                else:
                                    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                else:
                    lastUpdateTime = periodFinish
                    if not msg.sender:
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not balanceOf[address(msg.sender)].field_0:
                            revert with 0, 'Cannot withdraw 0'
                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= balanceOf[address(msg.sender)].field_0
                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                        mem[324 len 0] = 0
                    else:
                        if 0 == boostedTotalSupply:
                            if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                            else:
                                if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                        else:
                            if block.timestamp < periodFinish:
                                if lastUpdateTime > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if lastUpdateTime > periodFinish:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not periodFinish - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
            else:
                if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += 0 / boostedTotalSupply
                    if block.timestamp >= periodFinish:
                        lastUpdateTime = periodFinish
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not balanceOf[address(msg.sender)].field_0:
                                revert with 0, 'Cannot withdraw 0'
                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= balanceOf[address(msg.sender)].field_0
                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                    else:
                        lastUpdateTime = block.timestamp
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not balanceOf[address(msg.sender)].field_0:
                                revert with 0, 'Cannot withdraw 0'
                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= balanceOf[address(msg.sender)].field_0
                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                else:
                    if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply
                    if block.timestamp < periodFinish:
                        lastUpdateTime = block.timestamp
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not balanceOf[address(msg.sender)].field_0:
                                revert with 0, 'Cannot withdraw 0'
                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= balanceOf[address(msg.sender)].field_0
                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                            else:
                                if block.timestamp >= periodFinish:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                    else:
                        lastUpdateTime = periodFinish
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not balanceOf[address(msg.sender)].field_0:
                                revert with 0, 'Cannot withdraw 0'
                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= balanceOf[address(msg.sender)].field_0
                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                            else:
                                if block.timestamp >= periodFinish:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
        else:
            if lastUpdateTime > periodFinish:
                revert with 0, 'SafeMath: subtraction overflow'
            if not periodFinish - lastUpdateTime:
                if boostedTotalSupply <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require boostedTotalSupply
                if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                    revert with 0, 'SafeMath: addition overflow'
                rewardPerTokenStored += 0 / boostedTotalSupply
                if block.timestamp < periodFinish:
                    lastUpdateTime = block.timestamp
                    if not msg.sender:
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not balanceOf[address(msg.sender)].field_0:
                            revert with 0, 'Cannot withdraw 0'
                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= balanceOf[address(msg.sender)].field_0
                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            mem[324 len 0] = 0
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                    else:
                        if 0 == boostedTotalSupply:
                            if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                            else:
                                if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                        else:
                            if block.timestamp < periodFinish:
                                if lastUpdateTime > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                        else:
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                            else:
                                if lastUpdateTime > periodFinish:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not periodFinish - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                else:
                    lastUpdateTime = periodFinish
                    if not msg.sender:
                        if block.timestamp < starttime:
                            revert with 0, 'not start'
                        if not balanceOf[address(msg.sender)].field_0:
                            revert with 0, 'Cannot withdraw 0'
                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        totalSupply -= balanceOf[address(msg.sender)].field_0
                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                            revert with 0, 'SafeMath: subtraction overflow'
                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                        sub_e72c3c42[msg.sender] = 0
                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                            revert with 0, 'SafeMath: subtraction overflow'
                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                        if not sub_e72c3c42[address(msg.sender)]:
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                        else:
                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                            32,
                                            33,
                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                            mem[197 len 31]
                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                revert with 0, 'SafeMath: addition overflow'
                            if not balanceOf[address(msg.sender)].field_0:
                                sub_3ba35551[address(msg.sender)] = 0
                                if boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                    revert with 0, 'SafeMath: addition overflow'
                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                        if not ext_code.size(stakeTokenAddress):
                            revert with 0, 'Address: call to non-contract'
                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                        mem[324 len 0] = 0
                    else:
                        if 0 == boostedTotalSupply:
                            if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not sub_3ba35551[address(msg.sender)]:
                                if rewards[address(msg.sender)] < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                            else:
                                if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                    revert with 0, 'SafeMath: addition overflow'
                                rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                        else:
                            if block.timestamp < periodFinish:
                                if lastUpdateTime > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                            else:
                                if lastUpdateTime > periodFinish:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not periodFinish - lastUpdateTime:
                                    if boostedTotalSupply <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require boostedTotalSupply
                                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not sub_3ba35551[address(msg.sender)]:
                                        if rewards[address(msg.sender)] < 0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                            revert with 0, 'SafeMath: addition overflow'
                                        rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
            else:
                if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += 0 / boostedTotalSupply
                    if block.timestamp < periodFinish:
                        lastUpdateTime = block.timestamp
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not balanceOf[address(msg.sender)].field_0:
                                revert with 0, 'Cannot withdraw 0'
                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= balanceOf[address(msg.sender)].field_0
                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                            if not ext_code.size(stakeTokenAddress):
                                revert with 0, 'Address: call to non-contract'
                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                if block.timestamp < starttime:
                                    revert with 0, 'not start'
                                if not balanceOf[address(msg.sender)].field_0:
                                    revert with 0, 'Cannot withdraw 0'
                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                sub_e72c3c42[msg.sender] = 0
                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                if not sub_e72c3c42[address(msg.sender)]:
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        sub_3ba35551[address(msg.sender)] = 0
                                        if boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                    else:
                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                            revert with 0, 'SafeMath: addition overflow'
                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                    else:
                        lastUpdateTime = periodFinish
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not balanceOf[address(msg.sender)].field_0:
                                revert with 0, 'Cannot withdraw 0'
                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= balanceOf[address(msg.sender)].field_0
                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                else:
                    if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if boostedTotalSupply <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require boostedTotalSupply
                    if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                        revert with 0, 'SafeMath: addition overflow'
                    rewardPerTokenStored += (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply
                    if block.timestamp < periodFinish:
                        lastUpdateTime = block.timestamp
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not balanceOf[address(msg.sender)].field_0:
                                revert with 0, 'Cannot withdraw 0'
                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= balanceOf[address(msg.sender)].field_0
                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                        userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                        if block.timestamp < starttime:
                                            revert with 0, 'not start'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            revert with 0, 'Cannot withdraw 0'
                                        if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        totalSupply -= balanceOf[address(msg.sender)].field_0
                                        if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                        sub_e72c3c42[msg.sender] = 0
                                        if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                        if not sub_e72c3c42[address(msg.sender)]:
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                sub_3ba35551[address(msg.sender)] = 0
                                                if boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                    else:
                        lastUpdateTime = periodFinish
                        if not msg.sender:
                            if block.timestamp < starttime:
                                revert with 0, 'not start'
                            if not balanceOf[address(msg.sender)].field_0:
                                revert with 0, 'Cannot withdraw 0'
                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            totalSupply -= balanceOf[address(msg.sender)].field_0
                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                revert with 0, 'SafeMath: subtraction overflow'
                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                            sub_e72c3c42[msg.sender] = 0
                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                revert with 0, 'SafeMath: subtraction overflow'
                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                            if not sub_e72c3c42[address(msg.sender)]:
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    mem[324 len 0] = 0
                                else:
                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                    if not ext_code.size(stakeTokenAddress):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                            else:
                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                32,
                                                33,
                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                mem[197 len 31]
                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                    revert with 0, 'SafeMath: addition overflow'
                                if not balanceOf[address(msg.sender)].field_0:
                                    sub_3ba35551[address(msg.sender)] = 0
                                    if boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                        revert with 0, 'SafeMath: addition overflow'
                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                if not ext_code.size(stakeTokenAddress):
                                    revert with 0, 'Address: call to non-contract'
                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                mem[324 len 0] = 0
                        else:
                            if 0 == boostedTotalSupply:
                                if userRewardPerTokenPaid[address(msg.sender)] > rewardPerTokenStored:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not sub_3ba35551[address(msg.sender)]:
                                    if rewards[address(msg.sender)] < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                    32,
                                                    33,
                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                    mem[197 len 31]
                                    if rewards[address(msg.sender)] + ((rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                        revert with 0, 'SafeMath: addition overflow'
                                    rewards[address(msg.sender)] += (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                    userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                    if block.timestamp < starttime:
                                        revert with 0, 'not start'
                                    if not balanceOf[address(msg.sender)].field_0:
                                        revert with 0, 'Cannot withdraw 0'
                                    if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    totalSupply -= balanceOf[address(msg.sender)].field_0
                                    if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                    sub_e72c3c42[msg.sender] = 0
                                    if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                    if not sub_e72c3c42[address(msg.sender)]:
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                        else:
                                            if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                    else:
                                        if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if not balanceOf[address(msg.sender)].field_0:
                                            sub_3ba35551[address(msg.sender)] = 0
                                            if boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                        else:
                                            if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                revert with 0, 'SafeMath: addition overflow'
                                            boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                        if not ext_code.size(stakeTokenAddress):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        mem[324 len 0] = 0
                            else:
                                if block.timestamp < periodFinish:
                                    if lastUpdateTime > block.timestamp:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not block.timestamp - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                            if not ext_code.size(stakeTokenAddress):
                                                revert with 0, 'Address: call to non-contract'
                                            mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            mem[324 len 0] = 0
                                    else:
                                        if (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) / block.timestamp - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                        else:
                                            if (10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (block.timestamp * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * block.timestamp * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                else:
                                    if lastUpdateTime > periodFinish:
                                        revert with 0, 'SafeMath: subtraction overflow'
                                    if not periodFinish - lastUpdateTime:
                                        if boostedTotalSupply <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require boostedTotalSupply
                                        if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                            revert with 0, 'SafeMath: addition overflow'
                                        if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                            revert with 0, 'SafeMath: subtraction overflow'
                                        if not sub_3ba35551[address(msg.sender)]:
                                            if rewards[address(msg.sender)] < 0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                        else:
                                            if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                revert with 0, 'SafeMath: addition overflow'
                                            rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                    else:
                                        if (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) / periodFinish - lastUpdateTime != rewardRate:
                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                        32,
                                                        33,
                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                        mem[197 len 31]
                                        if not (periodFinish * rewardRate) - (lastUpdateTime * rewardRate):
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if (0 / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > (0 / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                            else:
                                                if (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != (0 / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + ((0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += (0 / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                            userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                            if block.timestamp < starttime:
                                                revert with 0, 'not start'
                                            if not balanceOf[address(msg.sender)].field_0:
                                                revert with 0, 'Cannot withdraw 0'
                                            if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            totalSupply -= balanceOf[address(msg.sender)].field_0
                                            if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                            sub_e72c3c42[msg.sender] = 0
                                            if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                            if not sub_e72c3c42[address(msg.sender)]:
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                else:
                                                    if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                if not ext_code.size(stakeTokenAddress):
                                                    revert with 0, 'Address: call to non-contract'
                                                mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                mem[324 len 0] = 0
                                            else:
                                                if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    sub_3ba35551[address(msg.sender)] = 0
                                                    if boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                        else:
                                            if (10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / (periodFinish * rewardRate) - (lastUpdateTime * rewardRate) != 10^18:
                                                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                            32,
                                                            33,
                                                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                            mem[197 len 31]
                                            if boostedTotalSupply <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require boostedTotalSupply
                                            if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored < rewardPerTokenStored:
                                                revert with 0, 'SafeMath: addition overflow'
                                            if userRewardPerTokenPaid[address(msg.sender)] > ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored:
                                                revert with 0, 'SafeMath: subtraction overflow'
                                            if not sub_3ba35551[address(msg.sender)]:
                                                if rewards[address(msg.sender)] < 0:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                            else:
                                                if ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / sub_3ba35551[address(msg.sender)] != ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply) + rewardPerTokenStored - userRewardPerTokenPaid[address(msg.sender)]:
                                                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                32,
                                                                33,
                                                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                mem[197 len 31]
                                                if rewards[address(msg.sender)] + (((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18) < ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18:
                                                    revert with 0, 'SafeMath: addition overflow'
                                                rewards[address(msg.sender)] += ((10^18 * periodFinish * rewardRate) - (10^18 * lastUpdateTime * rewardRate) / boostedTotalSupply * sub_3ba35551[address(msg.sender)]) + (rewardPerTokenStored * sub_3ba35551[address(msg.sender)]) - (userRewardPerTokenPaid[address(msg.sender)] * sub_3ba35551[address(msg.sender)]) / 10^18
                                                userRewardPerTokenPaid[address(msg.sender)] = rewardPerTokenStored
                                                if block.timestamp < starttime:
                                                    revert with 0, 'not start'
                                                if not balanceOf[address(msg.sender)].field_0:
                                                    revert with 0, 'Cannot withdraw 0'
                                                if balanceOf[address(msg.sender)].field_0 > totalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                totalSupply -= balanceOf[address(msg.sender)].field_0
                                                if balanceOf[address(msg.sender)].field_0 > balanceOf[msg.sender].field_0:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                balanceOf[msg.sender].field_0 -= balanceOf[address(msg.sender)].field_0
                                                sub_e72c3c42[msg.sender] = 0
                                                if sub_3ba35551[address(msg.sender)] > boostedTotalSupply:
                                                    revert with 0, 'SafeMath: subtraction overflow'
                                                boostedTotalSupply -= sub_3ba35551[address(msg.sender)]
                                                if not sub_e72c3c42[address(msg.sender)]:
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                    else:
                                                        if 100 * balanceOf[address(msg.sender)].field_0 / balanceOf[address(msg.sender)].field_0 != 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                        if (100 * balanceOf[address(msg.sender)].field_0 / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += 100 * balanceOf[address(msg.sender)].field_0 / 100
                                                    if not ext_code.size(stakeTokenAddress):
                                                        revert with 0, 'Address: call to non-contract'
                                                    mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    mem[324 len 0] = 0
                                                else:
                                                    if 5 * sub_e72c3c42[address(msg.sender)] / sub_e72c3c42[address(msg.sender)] != 5:
                                                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                    32,
                                                                    33,
                                                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                    mem[197 len 31]
                                                    if (5 * sub_e72c3c42[address(msg.sender)]) + 100 < 5 * sub_e72c3c42[address(msg.sender)]:
                                                        revert with 0, 'SafeMath: addition overflow'
                                                    if not balanceOf[address(msg.sender)].field_0:
                                                        sub_3ba35551[address(msg.sender)] = 0
                                                        if boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                    else:
                                                        if (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / balanceOf[address(msg.sender)].field_0 != (5 * sub_e72c3c42[address(msg.sender)]) + 100:
                                                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                                                        32,
                                                                        33,
                                                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                                                        mem[197 len 31]
                                                        sub_3ba35551[address(msg.sender)] = (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if ((100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100) + boostedTotalSupply < boostedTotalSupply:
                                                            revert with 0, 'SafeMath: addition overflow'
                                                        boostedTotalSupply += (100 * balanceOf[address(msg.sender)].field_0) + (5 * sub_e72c3c42[address(msg.sender)] * balanceOf[address(msg.sender)].field_0) / 100
                                                        if not ext_code.size(stakeTokenAddress):
                                                            revert with 0, 'Address: call to non-contract'
                                                        mem[260 len 64] = unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_32
                                                        mem[324 len 0] = 0
    call stakeTokenAddress with:
       funct uint32(msg.sender)
         gas gas_remaining wei
        args balanceOf[address(msg.sender)].field_0, mem[324 len 4]
    if not return_data.size:
        if not ext_call.success:
            revert with unknown_0xa9059cbb(?????), msg.sender, balanceOf[address(msg.sender)].field_0
        if not unknown_0xa9059cbb(?????), Mask(224, 32, msg.sender) >> 32:
            revert with 0, 32, 42, 0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565, mem[370 len 22]
    else:
        mem[292 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if return_data.size:
            require return_data.size >= 32
            if not mem[292]:
                revert with 0, 
                            32,
                            42,
                            0x775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565,
                            mem[ceil32(return_data.size) + 371 len 22]
}



}
