contract main {




// =====================  Runtime code  =====================


#
#  - unstake(uint256 arg1)
#  - stakeFor(address arg1, uint256 arg2)
#  - unstakeQuery(uint256 arg1)
#  - getUserReward(address arg1, uint256 arg2)
#
const BONUS_DECIMALS = 2


address owner;
address stor1;
address stor2;
address stor3;
uint256 startBonus;
uint256 bonusPeriodSec;
uint256 totalLockedShares;
uint256 totalStakingShares;
uint256 _totalStakingShareSeconds;
uint256 _lastAccountingTimestampSec;
uint256 _maxUnlockSchedules;
uint256 _initialSharesPerToken;
uint256 _taxFee;
mapping of struct _userTotals;
array of struct _userStakes;
array of struct unlockSchedules;

function _userStakes(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 < _userStakes[arg1].field_0
    return _userStakes[arg1][arg2].field_0, _userStakes[arg1][arg2].field_256
}

function _lastAccountingTimestampSec() payable {
    return _lastAccountingTimestampSec
}

function _initialSharesPerToken() payable {
    return _initialSharesPerToken
}

function startBonus() payable {
    return startBonus
}

function _taxFee() payable {
    return _taxFee
}

function unlockSchedules(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < unlockSchedules.length
    return unlockSchedules[arg1].field_0, 
           unlockSchedules[arg1].field_256,
           unlockSchedules[arg1].field_512,
           unlockSchedules[arg1].field_768,
           unlockSchedules[arg1].field_1024
}

function totalStakingShares() payable {
    return totalStakingShares
}

function bonusPeriodSec() payable {
    return bonusPeriodSec
}

function totalLockedShares() payable {
    return totalLockedShares
}

function owner() payable {
    return owner
}

function _maxUnlockSchedules() payable {
    return _maxUnlockSchedules
}

function _userTotals(address arg1) payable {
    require calldata.size - 4 >= 32
    return _userTotals[arg1].field_0, _userTotals[arg1].field_256, _userTotals[arg1].field_512
}

function unlockScheduleCount() payable {
    return unlockSchedules.length
}

function _totalStakingShareSeconds() payable {
    return _totalStakingShareSeconds
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    emit OwnershipTransferred(owner, 0);
    owner = 0
}

function updateTaxFee(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    _taxFee = arg1
}

function totalLocked() payable {
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function totalStaked() payable {
    require ext_code.size(stor1)
    staticcall stor1.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function totalUnlocked() payable {
    require ext_code.size(stor2)
    staticcall stor2.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function token() payable {
    require ext_code.size(stor1)
    staticcall stor1.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function getStakingToken() payable {
    require ext_code.size(stor1)
    staticcall stor1.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function getLatestUnlockEndTime() payable {
    idx = 0
    s = 0
    while idx < unlockSchedules.length:
        mem[0] = 15
        if s >= unlockSchedules[idx].field_768:
            idx = idx + 1
            s = s
            continue 
        require idx < unlockSchedules.length
        mem[0] = 15
        idx = idx + 1
        s = unlockSchedules[idx].field_768
        continue 
    return s
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    38,
                    0x6c4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                    mem[202 len 26]
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function rescueFundsFromStakingPool(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(stor1)
    call stor1.rescueFunds(address arg1, address arg2, uint256 arg3) with:
         gas gas_remaining wei
        args address(arg1), address(arg2), arg3
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return bool(ext_call.return_data[0])
}

function getUserFirstStakeTime(address arg1) payable {
    require calldata.size - 4 >= 32
    mem[0] = arg1
    mem[32] = 14
    mem[64] = (32 * _userStakes[address(arg1)].field_0) + 128
    mem[96] = _userStakes[address(arg1)].field_0
    s = 128
    idx = 0
    while idx < _userStakes[address(arg1)].field_0:
        mem[0] = sha3(address(arg1), 14)
        _15 = mem[64]
        mem[64] = mem[64] + 64
        mem[_15] = _userStakes[address(arg1)][idx].field_0
        mem[_15 + 32] = _userStakes[address(arg1)][idx].field_256
        mem[s] = _15
        s = s + 32
        idx = idx + 1
        continue 
    if mem[96] <= 0:
        return 0
    require 0 < mem[96]
    mem[mem[64]] = mem[mem[128] + 32]
    return memory
      from mem[64]
       len 32
}

function getDistributionToken() payable {
    require ext_code.size(stor3)
    staticcall stor3.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor2)
    staticcall stor2.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[12 len 20] == address(ext_call.return_data[0])
    require ext_code.size(stor2)
    staticcall stor2.0xfc0c546a with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[12 len 20]
}

function totalStakedFor(address arg1) payable {
    require calldata.size - 4 >= 32
    if totalStakingShares <= 0:
        return 0
    require ext_code.size(stor1)
    staticcall stor1.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if totalStakingShares <= 0:
            revert with 0, 'SafeMath: division by zero'
        if totalStakingShares:
            return (0 / totalStakingShares)
    else:
        if ext_call.return_data[0]:
            if ext_call.return_data[0] * _userTotals[address(arg1)].field_0 / ext_call.return_data[0] != _userTotals[address(arg1)].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if totalStakingShares <= 0:
                revert with 0, 'SafeMath: division by zero'
            if totalStakingShares:
                return (ext_call.return_data[0] * _userTotals[address(arg1)].field_0 / totalStakingShares)
    revert
}

function unlockableScheduleShares(uint256 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 < unlockSchedules.length
    if unlockSchedules[arg1].field_256 >= unlockSchedules[arg1].field_0:
        return 0
    if arg2 >= unlockSchedules[arg1].field_768:
        if unlockSchedules[arg1].field_256 > unlockSchedules[arg1].field_0:
            revert with 0, 'SafeMath: subtraction overflow'
        return (unlockSchedules[arg1].field_0 - unlockSchedules[arg1].field_256)
    if unlockSchedules[arg1].field_512 > arg2:
        revert with 0, 'SafeMath: subtraction overflow'
    if not arg2 - unlockSchedules[arg1].field_512:
        if unlockSchedules[arg1].field_1024 <= 0:
            revert with 0, 'SafeMath: division by zero'
        if unlockSchedules[arg1].field_1024:
            return (0 / unlockSchedules[arg1].field_1024)
    else:
        if arg2 - unlockSchedules[arg1].field_512:
            if (arg2 * unlockSchedules[arg1].field_0) - (unlockSchedules[arg1].field_512 * unlockSchedules[arg1].field_0) / arg2 - unlockSchedules[arg1].field_512 != unlockSchedules[arg1].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
            if unlockSchedules[arg1].field_1024 <= 0:
                revert with 0, 'SafeMath: division by zero'
            if unlockSchedules[arg1].field_1024:
                return ((arg2 * unlockSchedules[arg1].field_0) - (unlockSchedules[arg1].field_512 * unlockSchedules[arg1].field_0) / unlockSchedules[arg1].field_1024)
    revert
}

function getUnlockableAmount(uint256 arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not totalLockedShares:
        return ext_call.return_data[0]
    idx = 0
    while idx < unlockSchedules.length:
        _68 = mem[64]
        mem[64] = mem[64] + 160
        mem[_68] = 0
        mem[_68 + 32] = 0
        mem[_68 + 64] = 0
        mem[_68 + 96] = 0
        mem[_68 + 128] = 0
        mem[0] = 15
        _70 = mem[64]
        mem[64] = mem[64] + 160
        mem[_70] = unlockSchedules[idx].field_0
        mem[_70 + 32] = unlockSchedules[idx].field_256
        mem[_70 + 64] = unlockSchedules[idx].field_512
        mem[_70 + 96] = unlockSchedules[idx].field_768
        mem[_70 + 128] = unlockSchedules[idx].field_1024
        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
            idx = idx + 1
            continue 
        if arg1 >= unlockSchedules[idx].field_768:
            _84 = mem[64]
            mem[64] = mem[64] + 64
            mem[_84] = 30
            mem[_84 + 32] = 'SafeMath: subtraction overflow'
            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _89 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_89 + idx + 68] = mem[_84 + idx + 32]
                idx = idx + 32
                continue 
            mem[_89 + 68] = mem[_89 + 70 len 30]
            revert with memory
              from mem[64]
               len _89 + -mem[64] + 100
        _83 = mem[64]
        mem[64] = mem[64] + 64
        mem[_83] = 30
        mem[_83 + 32] = 'SafeMath: subtraction overflow'
        if unlockSchedules[idx].field_512 > arg1:
            _86 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_86 + idx + 68] = mem[_83 + idx + 32]
                idx = idx + 32
                continue 
            mem[_86 + 68] = mem[_86 + 70 len 30]
            revert with memory
              from mem[64]
               len _86 + -mem[64] + 100
        if not arg1 - unlockSchedules[idx].field_512:
            _107 = mem[64]
            mem[64] = mem[64] + 64
            mem[_107] = 26
            mem[_107 + 32] = 'SafeMath: division by zero'
            if unlockSchedules[idx].field_1024 > 0:
                require unlockSchedules[idx].field_1024
                if 0 / unlockSchedules[idx].field_1024 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _111 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_111 + idx + 68] = mem[_107 + idx + 32]
                idx = idx + 32
                continue 
            mem[_111 + 68] = mem[_111 + 74 len 26]
            revert with memory
              from mem[64]
               len _111 + -mem[64] + 100
        require arg1 - unlockSchedules[idx].field_512
        if (arg1 * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / arg1 - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _110 = mem[64]
        mem[64] = mem[64] + 64
        mem[_110] = 26
        mem[_110 + 32] = 'SafeMath: division by zero'
        if unlockSchedules[idx].field_1024 > 0:
            require unlockSchedules[idx].field_1024
            if (arg1 * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        _114 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[_114 + idx + 68] = mem[_110 + idx + 32]
            idx = idx + 32
            continue 
        mem[_114 + 68] = mem[_114 + 74 len 26]
        revert with memory
          from mem[64]
           len _114 + -mem[64] + 100
    if totalLockedShares <= 0:
        revert with 0, 'SafeMath: division by zero'
    if totalLockedShares:
        return (0 / totalLockedShares)
    revert
}

function unlockTokens() payable {
    mem[64] = 96
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not totalLockedShares:
        if ext_call.return_data[0] > 0:
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[211 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
        return ext_call.return_data[0]
    idx = 0
    while idx < unlockSchedules.length:
        mem[0] = 15
        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
            idx = idx + 1
            continue 
        if block.timestamp >= unlockSchedules[idx].field_768:
            _103 = mem[64]
            mem[64] = mem[64] + 64
            mem[_103] = 30
            mem[_103 + 32] = 'SafeMath: subtraction overflow'
            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                    revert with 0, 'SafeMath: addition overflow'
                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _110 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_110 + idx + 68] = mem[_103 + idx + 32]
                idx = idx + 32
                continue 
            mem[_110 + 68] = mem[_110 + 70 len 30]
            revert with memory
              from mem[64]
               len _110 + -mem[64] + 100
        _102 = mem[64]
        mem[64] = mem[64] + 64
        mem[_102] = 30
        mem[_102 + 32] = 'SafeMath: subtraction overflow'
        if unlockSchedules[idx].field_512 > block.timestamp:
            _107 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 30
            idx = 0
            while idx < 30:
                mem[_107 + idx + 68] = mem[_102 + idx + 32]
                idx = idx + 32
                continue 
            mem[_107 + 68] = mem[_107 + 70 len 30]
            revert with memory
              from mem[64]
               len _107 + -mem[64] + 100
        if not block.timestamp - unlockSchedules[idx].field_512:
            _133 = mem[64]
            mem[64] = mem[64] + 64
            mem[_133] = 26
            mem[_133 + 32] = 'SafeMath: division by zero'
            if unlockSchedules[idx].field_1024 > 0:
                require unlockSchedules[idx].field_1024
                unlockSchedules[idx].field_512 = block.timestamp
                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                    revert with 0, 'SafeMath: addition overflow'
                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                if 0 / unlockSchedules[idx].field_1024 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _138 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_138 + idx + 68] = mem[_133 + idx + 32]
                idx = idx + 32
                continue 
            mem[_138 + 68] = mem[_138 + 74 len 26]
            revert with memory
              from mem[64]
               len _138 + -mem[64] + 100
        require block.timestamp - unlockSchedules[idx].field_512
        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
        _137 = mem[64]
        mem[64] = mem[64] + 64
        mem[_137] = 26
        mem[_137 + 32] = 'SafeMath: division by zero'
        if unlockSchedules[idx].field_1024 > 0:
            require unlockSchedules[idx].field_1024
            unlockSchedules[idx].field_512 = block.timestamp
            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                revert with 0, 'SafeMath: addition overflow'
            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                revert with 0, 'SafeMath: addition overflow'
            idx = idx + 1
            continue 
        _148 = mem[64]
        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = 32
        mem[mem[64] + 36] = 26
        idx = 0
        while idx < 26:
            mem[_148 + idx + 68] = mem[_137 + idx + 32]
            idx = idx + 32
            continue 
        mem[_148 + 68] = mem[_148 + 74 len 26]
        revert with memory
          from mem[64]
           len _148 + -mem[64] + 100
    _101 = mem[64]
    mem[64] = mem[64] + 64
    mem[_101] = 26
    mem[_101 + 32] = 'SafeMath: division by zero'
    if totalLockedShares <= 0:
        revert with 0, 'SafeMath: division by zero'
    require totalLockedShares
    _122 = mem[64]
    mem[64] = mem[64] + 64
    mem[_122] = 30
    mem[_122 + 32] = 'SafeMath: subtraction overflow'
    if 0 > totalLockedShares:
        revert with 0, 'SafeMath: subtraction overflow'
    if 0 / totalLockedShares > 0:
        require ext_code.size(stor3)
        call stor3.0xa9059cbb with:
             gas gas_remaining wei
            args stor2, 0 / totalLockedShares
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 
                        32,
                        47,
                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                        mem[mem[64] + 115 len 17]
        require ext_code.size(stor3)
        staticcall stor3.balance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
    return (0 / totalLockedShares)
}

function updateAccounting() payable {
    mem[64] = 96
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not totalLockedShares:
        if ext_call.return_data[0] > 0:
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[211 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
        if _lastAccountingTimestampSec > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _lastAccountingTimestampSec:
            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _lastAccountingTimestampSec
            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                revert with 0, 'SafeMath: addition overflow'
            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
        _lastAccountingTimestampSec = block.timestamp
        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _userTotals[address(msg.sender)].field_512
            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
        _userTotals[address(msg.sender)].field_512 = block.timestamp
        if _totalStakingShareSeconds <= 0:
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _userTotals[address(msg.sender)].field_256,
                   _totalStakingShareSeconds,
                   0,
                   block.timestamp
        require ext_code.size(stor2)
        staticcall stor2.balance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if _totalStakingShareSeconds <= 0:
                revert with 0, 'SafeMath: division by zero'
            require _totalStakingShareSeconds
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _userTotals[address(msg.sender)].field_256,
                   _totalStakingShareSeconds,
                   0 / _totalStakingShareSeconds,
                   block.timestamp
        require ext_call.return_data[0]
        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
    else:
        idx = 0
        while idx < unlockSchedules.length:
            mem[0] = 15
            if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                idx = idx + 1
                continue 
            if block.timestamp >= unlockSchedules[idx].field_768:
                _1191 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1191] = 30
                mem[_1191 + 32] = 'SafeMath: subtraction overflow'
                if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                    unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                    if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                    if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _1198 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1198 + idx + 68] = mem[_1191 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1198 + 68] = mem[_1198 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1198 + -mem[64] + 100
            _1190 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1190] = 30
            mem[_1190 + 32] = 'SafeMath: subtraction overflow'
            if unlockSchedules[idx].field_512 > block.timestamp:
                _1195 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_1195 + idx + 68] = mem[_1190 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1195 + 68] = mem[_1195 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _1195 + -mem[64] + 100
            if not block.timestamp - unlockSchedules[idx].field_512:
                _1221 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1221] = 26
                mem[_1221 + 32] = 'SafeMath: division by zero'
                if unlockSchedules[idx].field_1024 > 0:
                    require unlockSchedules[idx].field_1024
                    unlockSchedules[idx].field_512 = block.timestamp
                    if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                    if 0 / unlockSchedules[idx].field_1024 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _1226 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_1226 + idx + 68] = mem[_1221 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_1226 + 68] = mem[_1226 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _1226 + -mem[64] + 100
            require block.timestamp - unlockSchedules[idx].field_512
            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _1225 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1225] = 26
            mem[_1225 + 32] = 'SafeMath: division by zero'
            if unlockSchedules[idx].field_1024 > 0:
                require unlockSchedules[idx].field_1024
                unlockSchedules[idx].field_512 = block.timestamp
                if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                    revert with 0, 'SafeMath: addition overflow'
                unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _1234 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_1234 + idx + 68] = mem[_1225 + idx + 32]
                idx = idx + 32
                continue 
            mem[_1234 + 68] = mem[_1234 + 74 len 26]
            revert with memory
              from mem[64]
               len _1234 + -mem[64] + 100
        _1189 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1189] = 26
        mem[_1189 + 32] = 'SafeMath: division by zero'
        if totalLockedShares <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalLockedShares
        _1210 = mem[64]
        mem[64] = mem[64] + 64
        mem[_1210] = 30
        mem[_1210 + 32] = 'SafeMath: subtraction overflow'
        if 0 > totalLockedShares:
            revert with 0, 'SafeMath: subtraction overflow'
        if 0 / totalLockedShares <= 0:
            _1238 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1238] = 30
            mem[_1238 + 32] = 'SafeMath: subtraction overflow'
            if _lastAccountingTimestampSec > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - _lastAccountingTimestampSec:
                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 13
                _1279 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1279] = 30
                mem[_1279 + 32] = 'SafeMath: subtraction overflow'
            else:
                require block.timestamp - _lastAccountingTimestampSec
                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 13
                _1284 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1284] = 30
                mem[_1284 + 32] = 'SafeMath: subtraction overflow'
        else:
            mem[mem[64] + 36] = 0 / totalLockedShares
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, 0 / totalLockedShares
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[mem[64] + 115 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 32] = ext_call.return_data[0]
            emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
            _1273 = mem[64]
            mem[64] = mem[64] + 64
            mem[_1273] = 30
            mem[_1273 + 32] = 'SafeMath: subtraction overflow'
            if _lastAccountingTimestampSec > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - _lastAccountingTimestampSec:
                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 13
                _1316 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1316] = 30
                mem[_1316 + 32] = 'SafeMath: subtraction overflow'
            else:
                require block.timestamp - _lastAccountingTimestampSec
                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 13
                _1322 = mem[64]
                mem[64] = mem[64] + 64
                mem[_1322] = 30
                mem[_1322 + 32] = 'SafeMath: subtraction overflow'
        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _userTotals[address(msg.sender)].field_512
            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
        _userTotals[address(msg.sender)].field_512 = block.timestamp
        if _totalStakingShareSeconds <= 0:
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _userTotals[address(msg.sender)].field_256,
                   _totalStakingShareSeconds,
                   0,
                   block.timestamp
        require ext_code.size(stor2)
        staticcall stor2.balance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            if _totalStakingShareSeconds <= 0:
                revert with 0, 'SafeMath: division by zero'
            require _totalStakingShareSeconds
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            return ext_call.return_data[0], 
                   ext_call.return_data[0],
                   _userTotals[address(msg.sender)].field_256,
                   _totalStakingShareSeconds,
                   0 / _totalStakingShareSeconds,
                   block.timestamp
        require ext_call.return_data[0]
        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
    ('eq', ('div', ('mul', ('ext_call.return_data', 0, 32), ('field', 256, ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', '_userTotals', 13))))), ('ext_call.return_data', 0, 32)), ('field', 256, ('stor', ('map', ('mask_shl', 160, 0, 0, 'msg.sender'), ('name', '_userTotals', 13)))))
    if _totalStakingShareSeconds <= 0:
        revert with 0, 'SafeMath: division by zero'
    require _totalStakingShareSeconds
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor2)
    staticcall stor2.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0], 
           ext_call.return_data[0],
           _userTotals[address(msg.sender)].field_256,
           _totalStakingShareSeconds,
           ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / _totalStakingShareSeconds,
           block.timestamp
}

function lockTokens(uint256 arg1, uint256 arg2) payable {
    mem[64] = 96
    require calldata.size - 4 >= 64
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if unlockSchedules.length >= _maxUnlockSchedules:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    45,
                    0x6f546f6b656e4765797365723a2072656163686564206d6178696d756d20756e6c6f636b207363686564756c65,
                    mem[209 len 19]
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not totalLockedShares:
        if ext_call.return_data[0] > 0:
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[211 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
        if _lastAccountingTimestampSec > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _lastAccountingTimestampSec:
            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _lastAccountingTimestampSec
            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                revert with 0, 'SafeMath: addition overflow'
            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
        _lastAccountingTimestampSec = block.timestamp
        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
            revert with 0, 'SafeMath: subtraction overflow'
        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
        else:
            require block.timestamp - _userTotals[address(msg.sender)].field_512
            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                revert with 0, 'SafeMath: addition overflow'
            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
        _userTotals[address(msg.sender)].field_512 = block.timestamp
        if _totalStakingShareSeconds <= 0:
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] <= 0:
                if not arg1:
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = 0
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                else:
                    require arg1
                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += arg1 * _initialSharesPerToken
                require ext_code.size(stor3)
                staticcall stor3.0xfc0c546a with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).0x23b872dd with:
                     gas gas_remaining wei
                    args msg.sender, stor3, arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                                mem[497 len 19]
            else:
                if not totalLockedShares:
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += 0 / ext_call.return_data[0]
                else:
                    require totalLockedShares
                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                require ext_code.size(stor3)
                staticcall stor3.0xfc0c546a with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).0x23b872dd with:
                     gas gas_remaining wei
                    args msg.sender, stor3, arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                                mem[561 len 19]
        else:
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                require ext_call.return_data[0]
                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
            if _totalStakingShareSeconds <= 0:
                revert with 0, 'SafeMath: division by zero'
            require _totalStakingShareSeconds
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor2)
            staticcall stor2.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0] <= 0:
                if not arg1:
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = 0
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                else:
                    require arg1
                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += arg1 * _initialSharesPerToken
                require ext_code.size(stor3)
                staticcall stor3.0xfc0c546a with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).0x23b872dd with:
                     gas gas_remaining wei
                    args msg.sender, stor3, arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                                mem[561 len 19]
            else:
                if not totalLockedShares:
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += 0 / ext_call.return_data[0]
                else:
                    require totalLockedShares
                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if block.timestamp + arg2 < block.timestamp:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules.length++
                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                    unlockSchedules[unlockSchedules.length].field_256 = 0
                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                        revert with 0, 'SafeMath: addition overflow'
                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                require ext_code.size(stor3)
                staticcall stor3.0xfc0c546a with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_code.size(address(ext_call.return_data[0]))
                call address(ext_call.return_data[0]).0x23b872dd with:
                     gas gas_remaining wei
                    args msg.sender, stor3, arg1
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    revert with 0, 
                                32,
                                45,
                                0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                                mem[625 len 19]
    else:
        idx = 0
        while idx < unlockSchedules.length:
            mem[0] = 15
            if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                idx = idx + 1
                continue 
            if block.timestamp >= unlockSchedules[idx].field_768:
                _7627 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7627] = 30
                mem[_7627 + 32] = 'SafeMath: subtraction overflow'
                if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                    unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                    if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                    if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _7634 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_7634 + idx + 68] = mem[_7627 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_7634 + 68] = mem[_7634 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _7634 + -mem[64] + 100
            _7626 = mem[64]
            mem[64] = mem[64] + 64
            mem[_7626] = 30
            mem[_7626 + 32] = 'SafeMath: subtraction overflow'
            if unlockSchedules[idx].field_512 > block.timestamp:
                _7631 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 30
                idx = 0
                while idx < 30:
                    mem[_7631 + idx + 68] = mem[_7626 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_7631 + 68] = mem[_7631 + 70 len 30]
                revert with memory
                  from mem[64]
                   len _7631 + -mem[64] + 100
            if not block.timestamp - unlockSchedules[idx].field_512:
                _7657 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7657] = 26
                mem[_7657 + 32] = 'SafeMath: division by zero'
                if unlockSchedules[idx].field_1024 > 0:
                    require unlockSchedules[idx].field_1024
                    unlockSchedules[idx].field_512 = block.timestamp
                    if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                    if 0 / unlockSchedules[idx].field_1024 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    idx = idx + 1
                    continue 
                _7662 = mem[64]
                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = 32
                mem[mem[64] + 36] = 26
                idx = 0
                while idx < 26:
                    mem[_7662 + idx + 68] = mem[_7657 + idx + 32]
                    idx = idx + 32
                    continue 
                mem[_7662 + 68] = mem[_7662 + 74 len 26]
                revert with memory
                  from mem[64]
                   len _7662 + -mem[64] + 100
            require block.timestamp - unlockSchedules[idx].field_512
            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
            _7661 = mem[64]
            mem[64] = mem[64] + 64
            mem[_7661] = 26
            mem[_7661 + 32] = 'SafeMath: division by zero'
            if unlockSchedules[idx].field_1024 > 0:
                require unlockSchedules[idx].field_1024
                unlockSchedules[idx].field_512 = block.timestamp
                if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                    revert with 0, 'SafeMath: addition overflow'
                unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                idx = idx + 1
                continue 
            _7670 = mem[64]
            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[mem[64] + 4] = 32
            mem[mem[64] + 36] = 26
            idx = 0
            while idx < 26:
                mem[_7670 + idx + 68] = mem[_7661 + idx + 32]
                idx = idx + 32
                continue 
            mem[_7670 + 68] = mem[_7670 + 74 len 26]
            revert with memory
              from mem[64]
               len _7670 + -mem[64] + 100
        _7625 = mem[64]
        mem[64] = mem[64] + 64
        mem[_7625] = 26
        mem[_7625 + 32] = 'SafeMath: division by zero'
        if totalLockedShares <= 0:
            revert with 0, 'SafeMath: division by zero'
        require totalLockedShares
        _7646 = mem[64]
        mem[64] = mem[64] + 64
        mem[_7646] = 30
        mem[_7646 + 32] = 'SafeMath: subtraction overflow'
        if 0 > totalLockedShares:
            revert with 0, 'SafeMath: subtraction overflow'
        if 0 / totalLockedShares <= 0:
            _7674 = mem[64]
            mem[64] = mem[64] + 64
            mem[_7674] = 30
            mem[_7674 + 32] = 'SafeMath: subtraction overflow'
            if _lastAccountingTimestampSec > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - _lastAccountingTimestampSec:
                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 13
                _7715 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7715] = 30
                mem[_7715 + 32] = 'SafeMath: subtraction overflow'
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8039 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8039 + 32] = 0
                                mem[_8039] = 0
                                mem[_8039 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8039 + 96] = block.timestamp + arg2
                                mem[_8039 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8085 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8085 + 32] = 0
                                mem[_8085] = arg1 * _initialSharesPerToken
                                mem[_8085 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8085 + 96] = block.timestamp + arg2
                                mem[_8085 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8015 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8015] = 26
                                mem[_8015 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8224 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8224 + 32] = 0
                                mem[_8224] = 0 / ext_call.return_data[0]
                                mem[_8224 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8224 + 96] = block.timestamp + arg2
                                mem[_8224 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8058 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8058] = 26
                                mem[_8058 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8308 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8308 + 32] = 0
                                mem[_8308] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8308 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8308 + 96] = block.timestamp + arg2
                                mem[_8308 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7822 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7822] = 26
                            mem[_7822 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8588 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8588 + 32] = 0
                                    mem[_8588] = 0
                                    mem[_8588 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8588 + 96] = block.timestamp + arg2
                                    mem[_8588 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8718 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8718 + 32] = 0
                                    mem[_8718] = arg1 * _initialSharesPerToken
                                    mem[_8718 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8718 + 96] = block.timestamp + arg2
                                    mem[_8718 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8543 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8543] = 26
                                    mem[_8543 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9006 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9006 + 32] = 0
                                    mem[_9006] = 0 / ext_call.return_data[0]
                                    mem[_9006 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9006 + 96] = block.timestamp + arg2
                                    mem[_9006 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8643 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8643] = 26
                                    mem[_8643 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9197 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9197 + 32] = 0
                                    mem[_9197] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9197 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9197 + 96] = block.timestamp + arg2
                                    mem[_9197 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _7842 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7842] = 26
                            mem[_7842 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8717 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8717 + 32] = 0
                                    mem[_8717] = 0
                                    mem[_8717 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8717 + 96] = block.timestamp + arg2
                                    mem[_8717 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8848 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8848 + 32] = 0
                                    mem[_8848] = arg1 * _initialSharesPerToken
                                    mem[_8848 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8848 + 96] = block.timestamp + arg2
                                    mem[_8848 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8642 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8642] = 26
                                    mem[_8642 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9188 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9188 + 32] = 0
                                    mem[_9188] = 0 / ext_call.return_data[0]
                                    mem[_9188 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9188 + 96] = block.timestamp + arg2
                                    mem[_9188 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8768 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8768] = 26
                                    mem[_8768 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9360 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9360 + 32] = 0
                                    mem[_9360] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9360 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9360 + 96] = block.timestamp + arg2
                                    mem[_9360 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8083 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8083 + 32] = 0
                                mem[_8083] = 0
                                mem[_8083 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8083 + 96] = block.timestamp + arg2
                                mem[_8083 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8138 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8138 + 32] = 0
                                mem[_8138] = arg1 * _initialSharesPerToken
                                mem[_8138 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8138 + 96] = block.timestamp + arg2
                                mem[_8138 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8056 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8056] = 26
                                mem[_8056 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8298 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8298 + 32] = 0
                                mem[_8298] = 0 / ext_call.return_data[0]
                                mem[_8298 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8298 + 96] = block.timestamp + arg2
                                mem[_8298 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8108 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8108] = 26
                                mem[_8108 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8364 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8364 + 32] = 0
                                mem[_8364] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8364 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8364 + 96] = block.timestamp + arg2
                                mem[_8364 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7840 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7840] = 26
                            mem[_7840 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8710 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8710 + 32] = 0
                                    mem[_8710] = 0
                                    mem[_8710 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8710 + 96] = block.timestamp + arg2
                                    mem[_8710 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8843 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8843 + 32] = 0
                                    mem[_8843] = arg1 * _initialSharesPerToken
                                    mem[_8843 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8843 + 96] = block.timestamp + arg2
                                    mem[_8843 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8636 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8636] = 26
                                    mem[_8636 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9172 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9172 + 32] = 0
                                    mem[_9172] = 0 / ext_call.return_data[0]
                                    mem[_9172 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9172 + 96] = block.timestamp + arg2
                                    mem[_9172 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8759 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8759] = 26
                                    mem[_8759 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9354 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9354 + 32] = 0
                                    mem[_9354] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9354 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9354 + 96] = block.timestamp + arg2
                                    mem[_9354 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _7866 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7866] = 26
                            mem[_7866 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8842 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8842 + 32] = 0
                                    mem[_8842] = 0
                                    mem[_8842 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8842 + 96] = block.timestamp + arg2
                                    mem[_8842 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8983 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8983 + 32] = 0
                                    mem[_8983] = arg1 * _initialSharesPerToken
                                    mem[_8983 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8983 + 96] = block.timestamp + arg2
                                    mem[_8983 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8758 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8758] = 26
                                    mem[_8758 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9345 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9345 + 32] = 0
                                    mem[_9345] = 0 / ext_call.return_data[0]
                                    mem[_9345 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9345 + 96] = block.timestamp + arg2
                                    mem[_9345 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8904 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8904] = 26
                                    mem[_8904 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9505 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9505 + 32] = 0
                                    mem[_9505] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9505 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9505 + 96] = block.timestamp + arg2
                                    mem[_9505 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
            else:
                require block.timestamp - _lastAccountingTimestampSec
                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 13
                _7720 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7720] = 30
                mem[_7720 + 32] = 'SafeMath: subtraction overflow'
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8079 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8079 + 32] = 0
                                mem[_8079] = 0
                                mem[_8079 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8079 + 96] = block.timestamp + arg2
                                mem[_8079 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8136 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8136 + 32] = 0
                                mem[_8136] = arg1 * _initialSharesPerToken
                                mem[_8136 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8136 + 96] = block.timestamp + arg2
                                mem[_8136 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8055 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8055] = 26
                                mem[_8055 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8284 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8284 + 32] = 0
                                mem[_8284] = 0 / ext_call.return_data[0]
                                mem[_8284 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8284 + 96] = block.timestamp + arg2
                                mem[_8284 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8103 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8103] = 26
                                mem[_8103 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8360 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8360 + 32] = 0
                                mem[_8360] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8360 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8360 + 96] = block.timestamp + arg2
                                mem[_8360 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7838 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7838] = 26
                            mem[_7838 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8699 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8699 + 32] = 0
                                    mem[_8699] = 0
                                    mem[_8699 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8699 + 96] = block.timestamp + arg2
                                    mem[_8699 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8837 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8837 + 32] = 0
                                    mem[_8837] = arg1 * _initialSharesPerToken
                                    mem[_8837 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8837 + 96] = block.timestamp + arg2
                                    mem[_8837 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8630 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8630] = 26
                                    mem[_8630 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9148 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9148 + 32] = 0
                                    mem[_9148] = 0 / ext_call.return_data[0]
                                    mem[_9148 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9148 + 96] = block.timestamp + arg2
                                    mem[_9148 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8749 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8749] = 26
                                    mem[_8749 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9337 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9337 + 32] = 0
                                    mem[_9337] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9337 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9337 + 96] = block.timestamp + arg2
                                    mem[_9337 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _7862 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7862] = 26
                            mem[_7862 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8836 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8836 + 32] = 0
                                    mem[_8836] = 0
                                    mem[_8836 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8836 + 96] = block.timestamp + arg2
                                    mem[_8836 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8970 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8970 + 32] = 0
                                    mem[_8970] = arg1 * _initialSharesPerToken
                                    mem[_8970 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8970 + 96] = block.timestamp + arg2
                                    mem[_8970 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8748 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8748] = 26
                                    mem[_8748 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9328 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9328 + 32] = 0
                                    mem[_9328] = 0 / ext_call.return_data[0]
                                    mem[_9328 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9328 + 96] = block.timestamp + arg2
                                    mem[_9328 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8889 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8889] = 26
                                    mem[_8889 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9490 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9490 + 32] = 0
                                    mem[_9490] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9490 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9490 + 96] = block.timestamp + arg2
                                    mem[_9490 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8134 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8134 + 32] = 0
                                mem[_8134] = 0
                                mem[_8134 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8134 + 96] = block.timestamp + arg2
                                mem[_8134 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8198 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8198 + 32] = 0
                                mem[_8198] = arg1 * _initialSharesPerToken
                                mem[_8198 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8198 + 96] = block.timestamp + arg2
                                mem[_8198 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8101 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8101] = 26
                                mem[_8101 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8350 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8350 + 32] = 0
                                mem[_8350] = 0 / ext_call.return_data[0]
                                mem[_8350 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8350 + 96] = block.timestamp + arg2
                                mem[_8350 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8161 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8161] = 26
                                mem[_8161 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8423 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8423 + 32] = 0
                                mem[_8423] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8423 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8423 + 96] = block.timestamp + arg2
                                mem[_8423 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7860 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7860] = 26
                            mem[_7860 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8829 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8829 + 32] = 0
                                    mem[_8829] = 0
                                    mem[_8829 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8829 + 96] = block.timestamp + arg2
                                    mem[_8829 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8965 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8965 + 32] = 0
                                    mem[_8965] = arg1 * _initialSharesPerToken
                                    mem[_8965 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8965 + 96] = block.timestamp + arg2
                                    mem[_8965 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8742 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8742] = 26
                                    mem[_8742 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9312 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9312 + 32] = 0
                                    mem[_9312] = 0 / ext_call.return_data[0]
                                    mem[_9312 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9312 + 96] = block.timestamp + arg2
                                    mem[_9312 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _8880 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8880] = 26
                                    mem[_8880 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9484 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9484 + 32] = 0
                                    mem[_9484] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9484 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9484 + 96] = block.timestamp + arg2
                                    mem[_9484 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _7892 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7892] = 26
                            mem[_7892 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _8964 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_8964 + 32] = 0
                                    mem[_8964] = 0
                                    mem[_8964 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_8964 + 96] = block.timestamp + arg2
                                    mem[_8964 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9125 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9125 + 32] = 0
                                    mem[_9125] = arg1 * _initialSharesPerToken
                                    mem[_9125 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9125 + 96] = block.timestamp + arg2
                                    mem[_9125 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _8879 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_8879] = 26
                                    mem[_8879 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9475 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9475 + 32] = 0
                                    mem[_9475] = 0 / ext_call.return_data[0]
                                    mem[_9475 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9475 + 96] = block.timestamp + arg2
                                    mem[_9475 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9039 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9039] = 26
                                    mem[_9039 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9652 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9652 + 32] = 0
                                    mem[_9652] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_9652 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9652 + 96] = block.timestamp + arg2
                                    mem[_9652 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
        else:
            mem[mem[64] + 36] = 0 / totalLockedShares
            require ext_code.size(stor3)
            call stor3.0xa9059cbb with:
                 gas gas_remaining wei
                args stor2, 0 / totalLockedShares
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not ext_call.return_data[0]:
                revert with 0, 
                            32,
                            47,
                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                            mem[mem[64] + 115 len 17]
            require ext_code.size(stor3)
            staticcall stor3.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            mem[mem[64] + 32] = ext_call.return_data[0]
            emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
            _7709 = mem[64]
            mem[64] = mem[64] + 64
            mem[_7709] = 30
            mem[_7709 + 32] = 'SafeMath: subtraction overflow'
            if _lastAccountingTimestampSec > block.timestamp:
                revert with 0, 'SafeMath: subtraction overflow'
            if not block.timestamp - _lastAccountingTimestampSec:
                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 13
                _7752 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7752] = 30
                mem[_7752 + 32] = 'SafeMath: subtraction overflow'
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8394 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8394 + 32] = 0
                                mem[_8394] = 0
                                mem[_8394 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8394 + 96] = block.timestamp + arg2
                                mem[_8394 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8472 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8472 + 32] = 0
                                mem[_8472] = arg1 * _initialSharesPerToken
                                mem[_8472 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8472 + 96] = block.timestamp + arg2
                                mem[_8472 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8344 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8344] = 26
                                mem[_8344 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8679 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8679 + 32] = 0
                                mem[_8679] = 0 / ext_call.return_data[0]
                                mem[_8679 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8679 + 96] = block.timestamp + arg2
                                mem[_8679 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8418 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8418] = 26
                                mem[_8418 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8822 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8822 + 32] = 0
                                mem[_8822] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8822 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8822 + 96] = block.timestamp + arg2
                                mem[_8822 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _7971 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_7971] = 26
                            mem[_7971 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9396 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9396 + 32] = 0
                                    mem[_9396] = 0
                                    mem[_9396 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9396 + 96] = block.timestamp + arg2
                                    mem[_9396 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9573 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9573 + 32] = 0
                                    mem[_9573] = arg1 * _initialSharesPerToken
                                    mem[_9573 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9573 + 96] = block.timestamp + arg2
                                    mem[_9573 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9296 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9296] = 26
                                    mem[_9296 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _9959 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9959 + 32] = 0
                                    mem[_9959] = 0 / ext_call.return_data[0]
                                    mem[_9959 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9959 + 96] = block.timestamp + arg2
                                    mem[_9959 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9464 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9464] = 26
                                    mem[_9464 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10178 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10178 + 32] = 0
                                    mem[_10178] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10178 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10178 + 96] = block.timestamp + arg2
                                    mem[_10178 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _8006 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8006] = 26
                            mem[_8006 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9572 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9572 + 32] = 0
                                    mem[_9572] = 0
                                    mem[_9572 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9572 + 96] = block.timestamp + arg2
                                    mem[_9572 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9753 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9753 + 32] = 0
                                    mem[_9753] = arg1 * _initialSharesPerToken
                                    mem[_9753 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9753 + 96] = block.timestamp + arg2
                                    mem[_9753 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9463 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9463] = 26
                                    mem[_9463 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10169 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10169 + 32] = 0
                                    mem[_10169] = 0 / ext_call.return_data[0]
                                    mem[_10169 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10169 + 96] = block.timestamp + arg2
                                    mem[_10169 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9637 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9637] = 26
                                    mem[_9637 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10359 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10359 + 32] = 0
                                    mem[_10359] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10359 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10359 + 96] = block.timestamp + arg2
                                    mem[_10359 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8470 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8470 + 32] = 0
                                mem[_8470] = 0
                                mem[_8470 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8470 + 96] = block.timestamp + arg2
                                mem[_8470 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8556 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8556 + 32] = 0
                                mem[_8556] = arg1 * _initialSharesPerToken
                                mem[_8556 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8556 + 96] = block.timestamp + arg2
                                mem[_8556 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8416 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8416] = 26
                                mem[_8416 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8812 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8812 + 32] = 0
                                mem[_8812] = 0 / ext_call.return_data[0]
                                mem[_8812 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8812 + 96] = block.timestamp + arg2
                                mem[_8812 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8499 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8499] = 26
                                mem[_8499 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8952 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8952 + 32] = 0
                                mem[_8952] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8952 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8952 + 96] = block.timestamp + arg2
                                mem[_8952 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _8004 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8004] = 26
                            mem[_8004 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9565 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9565 + 32] = 0
                                    mem[_9565] = 0
                                    mem[_9565 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9565 + 96] = block.timestamp + arg2
                                    mem[_9565 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9748 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9748 + 32] = 0
                                    mem[_9748] = arg1 * _initialSharesPerToken
                                    mem[_9748 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9748 + 96] = block.timestamp + arg2
                                    mem[_9748 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9457 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9457] = 26
                                    mem[_9457 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10153 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10153 + 32] = 0
                                    mem[_10153] = 0 / ext_call.return_data[0]
                                    mem[_10153 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10153 + 96] = block.timestamp + arg2
                                    mem[_10153 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9628 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9628] = 26
                                    mem[_9628 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10353 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10353 + 32] = 0
                                    mem[_10353] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10353 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10353 + 96] = block.timestamp + arg2
                                    mem[_10353 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _8046 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8046] = 26
                            mem[_8046 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9747 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9747 + 32] = 0
                                    mem[_9747] = 0
                                    mem[_9747 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9747 + 96] = block.timestamp + arg2
                                    mem[_9747 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9936 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9936 + 32] = 0
                                    mem[_9936] = arg1 * _initialSharesPerToken
                                    mem[_9936 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9936 + 96] = block.timestamp + arg2
                                    mem[_9936 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9627 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9627] = 26
                                    mem[_9627 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10344 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10344 + 32] = 0
                                    mem[_10344] = 0 / ext_call.return_data[0]
                                    mem[_10344 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10344 + 96] = block.timestamp + arg2
                                    mem[_10344 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9821 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9821] = 26
                                    mem[_9821 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10511 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10511 + 32] = 0
                                    mem[_10511] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10511 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10511 + 96] = block.timestamp + arg2
                                    mem[_10511 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
            else:
                require block.timestamp - _lastAccountingTimestampSec
                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                    revert with 0, 'SafeMath: addition overflow'
                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                _lastAccountingTimestampSec = block.timestamp
                mem[0] = msg.sender
                mem[32] = 13
                _7758 = mem[64]
                mem[64] = mem[64] + 64
                mem[_7758] = 30
                mem[_7758 + 32] = 'SafeMath: subtraction overflow'
                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                    revert with 0, 'SafeMath: subtraction overflow'
                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8466 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8466 + 32] = 0
                                mem[_8466] = 0
                                mem[_8466 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8466 + 96] = block.timestamp + arg2
                                mem[_8466 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8554 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8554 + 32] = 0
                                mem[_8554] = arg1 * _initialSharesPerToken
                                mem[_8554 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8554 + 96] = block.timestamp + arg2
                                mem[_8554 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8415 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8415] = 26
                                mem[_8415 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8798 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8798 + 32] = 0
                                mem[_8798] = 0 / ext_call.return_data[0]
                                mem[_8798 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8798 + 96] = block.timestamp + arg2
                                mem[_8798 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8494 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8494] = 26
                                mem[_8494 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8948 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8948 + 32] = 0
                                mem[_8948] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_8948 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8948 + 96] = block.timestamp + arg2
                                mem[_8948 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _8002 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8002] = 26
                            mem[_8002 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9554 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9554 + 32] = 0
                                    mem[_9554] = 0
                                    mem[_9554 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9554 + 96] = block.timestamp + arg2
                                    mem[_9554 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9742 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9742 + 32] = 0
                                    mem[_9742] = arg1 * _initialSharesPerToken
                                    mem[_9742 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9742 + 96] = block.timestamp + arg2
                                    mem[_9742 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9451 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9451] = 26
                                    mem[_9451 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10129 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10129 + 32] = 0
                                    mem[_10129] = 0 / ext_call.return_data[0]
                                    mem[_10129 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10129 + 96] = block.timestamp + arg2
                                    mem[_10129 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9618 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9618] = 26
                                    mem[_9618 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10336 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10336 + 32] = 0
                                    mem[_10336] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10336 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10336 + 96] = block.timestamp + arg2
                                    mem[_10336 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _8042 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8042] = 26
                            mem[_8042 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9741 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9741 + 32] = 0
                                    mem[_9741] = 0
                                    mem[_9741 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9741 + 96] = block.timestamp + arg2
                                    mem[_9741 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9923 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9923 + 32] = 0
                                    mem[_9923] = arg1 * _initialSharesPerToken
                                    mem[_9923 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9923 + 96] = block.timestamp + arg2
                                    mem[_9923 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9617 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9617] = 26
                                    mem[_9617 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10327 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10327 + 32] = 0
                                    mem[_10327] = 0 / ext_call.return_data[0]
                                    mem[_10327 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10327 + 96] = block.timestamp + arg2
                                    mem[_10327 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9806 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9806] = 26
                                    mem[_9806 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10496 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10496 + 32] = 0
                                    mem[_10496] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10496 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10496 + 96] = block.timestamp + arg2
                                    mem[_10496 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                else:
                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                        revert with 0, 'SafeMath: addition overflow'
                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] <= 0:
                            if not arg1:
                                _8552 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8552 + 32] = 0
                                mem[_8552] = 0
                                mem[_8552 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8552 + 96] = block.timestamp + arg2
                                mem[_8552 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                            else:
                                require arg1
                                if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8653 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8653 + 32] = 0
                                mem[_8653] = arg1 * _initialSharesPerToken
                                mem[_8653 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8653 + 96] = block.timestamp + arg2
                                mem[_8653 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += arg1 * _initialSharesPerToken
                        else:
                            if not totalLockedShares:
                                _8492 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8492] = 26
                                mem[_8492 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _8938 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_8938 + 32] = 0
                                mem[_8938] = 0 / ext_call.return_data[0]
                                mem[_8938 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_8938 + 96] = block.timestamp + arg2
                                mem[_8938 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += 0 / ext_call.return_data[0]
                            else:
                                require totalLockedShares
                                if totalLockedShares * arg1 / totalLockedShares != arg1:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                _8596 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_8596] = 26
                                mem[_8596 + 32] = 'SafeMath: division by zero'
                                if ext_call.return_data[0] <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require ext_call.return_data[0]
                                _9092 = mem[64]
                                mem[64] = mem[64] + 160
                                mem[_9092 + 32] = 0
                                mem[_9092] = totalLockedShares * arg1 / ext_call.return_data[0]
                                mem[_9092 + 64] = block.timestamp
                                if block.timestamp + arg2 < block.timestamp:
                                    revert with 0, 'SafeMath: addition overflow'
                                mem[_9092 + 96] = block.timestamp + arg2
                                mem[_9092 + 128] = arg2
                                unlockSchedules.length++
                                unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                unlockSchedules[unlockSchedules.length].field_256 = 0
                                unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                    revert with 0, 'SafeMath: addition overflow'
                                totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            _8040 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8040] = 26
                            mem[_8040 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9734 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9734 + 32] = 0
                                    mem[_9734] = 0
                                    mem[_9734 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9734 + 96] = block.timestamp + arg2
                                    mem[_9734 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9918 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9918 + 32] = 0
                                    mem[_9918] = arg1 * _initialSharesPerToken
                                    mem[_9918 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9918 + 96] = block.timestamp + arg2
                                    mem[_9918 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9611 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9611] = 26
                                    mem[_9611 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10311 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10311 + 32] = 0
                                    mem[_10311] = 0 / ext_call.return_data[0]
                                    mem[_10311 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10311 + 96] = block.timestamp + arg2
                                    mem[_10311 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _9797 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9797] = 26
                                    mem[_9797 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10490 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10490 + 32] = 0
                                    mem[_10490] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10490 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10490 + 96] = block.timestamp + arg2
                                    mem[_10490 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
                        else:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _8086 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_8086] = 26
                            mem[_8086 + 32] = 'SafeMath: division by zero'
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0] <= 0:
                                if not arg1:
                                    _9917 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_9917 + 32] = 0
                                    mem[_9917] = 0
                                    mem[_9917 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_9917 + 96] = block.timestamp + arg2
                                    mem[_9917 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                else:
                                    require arg1
                                    if arg1 * _initialSharesPerToken / arg1 != _initialSharesPerToken:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _10106 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10106 + 32] = 0
                                    mem[_10106] = arg1 * _initialSharesPerToken
                                    mem[_10106 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10106 + 96] = block.timestamp + arg2
                                    mem[_10106 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = arg1 * _initialSharesPerToken
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (arg1 * _initialSharesPerToken) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += arg1 * _initialSharesPerToken
                            else:
                                if not totalLockedShares:
                                    _9796 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_9796] = 26
                                    mem[_9796 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10481 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10481 + 32] = 0
                                    mem[_10481] = 0 / ext_call.return_data[0]
                                    mem[_10481 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10481 + 96] = block.timestamp + arg2
                                    mem[_10481 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = 0 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (0 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += 0 / ext_call.return_data[0]
                                else:
                                    require totalLockedShares
                                    if totalLockedShares * arg1 / totalLockedShares != arg1:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    _10007 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_10007] = 26
                                    mem[_10007 + 32] = 'SafeMath: division by zero'
                                    if ext_call.return_data[0] <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require ext_call.return_data[0]
                                    _10640 = mem[64]
                                    mem[64] = mem[64] + 160
                                    mem[_10640 + 32] = 0
                                    mem[_10640] = totalLockedShares * arg1 / ext_call.return_data[0]
                                    mem[_10640 + 64] = block.timestamp
                                    if block.timestamp + arg2 < block.timestamp:
                                        revert with 0, 'SafeMath: addition overflow'
                                    mem[_10640 + 96] = block.timestamp + arg2
                                    mem[_10640 + 128] = arg2
                                    unlockSchedules.length++
                                    unlockSchedules[unlockSchedules.length].field_0 = totalLockedShares * arg1 / ext_call.return_data[0]
                                    unlockSchedules[unlockSchedules.length].field_256 = 0
                                    unlockSchedules[unlockSchedules.length].field_512 = block.timestamp
                                    unlockSchedules[unlockSchedules.length].field_768 = block.timestamp + arg2
                                    unlockSchedules[unlockSchedules.length].field_1024 = arg2
                                    if totalLockedShares + (totalLockedShares * arg1 / ext_call.return_data[0]) < totalLockedShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalLockedShares += totalLockedShares * arg1 / ext_call.return_data[0]
        require ext_code.size(stor3)
        staticcall stor3.0xfc0c546a with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        call address(ext_call.return_data[0]).0x23b872dd with:
             gas gas_remaining wei
            args msg.sender, stor3, arg1
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not ext_call.return_data[0]:
            revert with 0, 
                        32,
                        45,
                        0xfe546f6b656e4765797365723a207472616e7366657220696e746f206c6f636b656420706f6f6c206661696c65,
                        mem[mem[64] + 113 len 19]
    ('bool', ('ext_call.return_data', 0, 32))
    require ext_code.size(stor3)
    staticcall stor3.balance() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    emit TokensLocked(arg1, arg2, ext_call.return_data[0]);
}

function stake(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 <= 0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x64546f6b656e4765797365723a207374616b6520616d6f756e74206973207a6572,
                    mem[197 len 31]
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    40,
                    0x73546f6b656e4765797365723a2062656e6566696369617279206973207a65726f20616464726573,
                    mem[204 len 24]
    if not totalStakingShares:
        if not arg1:
            mem[96] = 26
            mem[128] = 'SafeMath: division by zero'
            if totalStakingShares <= 0:
                revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
            require ext_code.size(stor1)
            staticcall stor1.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not totalStakingShares:
                mem[64] = 224
                mem[160] = 26
                mem[192] = 'SafeMath: division by zero'
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0] <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[330 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[224] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[339 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[658 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[672],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[736],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[736],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 15
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _37025 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37025] = 30
                            mem[_37025 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37083 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37083 + idx + 68] = mem[_37025 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37083 + 68] = mem[_37083 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37083 + -mem[64] + 100
                        _37024 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37024] = 30
                        mem[_37024 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _37080 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37080 + idx + 68] = mem[_37024 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37080 + 68] = mem[_37080 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37080 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _37335 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37335] = 26
                            mem[_37335 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37378 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37378 + idx + 68] = mem[_37335 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37378 + 68] = mem[_37378 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37378 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _37377 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37377] = 26
                        mem[_37377 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _37477 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_37477 + idx + 68] = mem[_37377 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_37477 + 68] = mem[_37477 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _37477 + -mem[64] + 100
                    _37023 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37023] = 26
                    mem[_37023 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _37237 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37237] = 30
                    mem[_37237 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _37517 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37517] = 30
                        mem[_37517 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37917 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37917] = 30
                            mem[_37917 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _39784 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39784] = 0
                                    mem[_39784 + 32] = 0
                                    _40001 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40001] = 0 / ext_call.return_data[0]
                                    mem[_40001 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45256 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45256] = 26
                                            mem[_45256 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _45715 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45715] = 26
                                            mem[_45715 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39005 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39005] = 26
                                        mem[_39005 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43153 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43153] = 0
                                        mem[_43153 + 32] = 0
                                        _43449 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43449] = 0 / ext_call.return_data[0]
                                        mem[_43449 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49460 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49460] = 26
                                                mem[_49460 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49922 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49922] = 26
                                                mem[_49922 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39197 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39197] = 26
                                        mem[_39197 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43689 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43689] = 0
                                        mem[_43689 + 32] = 0
                                        _43985 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43985] = 0 / ext_call.return_data[0]
                                        mem[_43985 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49921 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49921] = 26
                                                mem[_49921 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50494 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50494] = 26
                                                mem[_50494 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40172 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40172] = 0
                                    mem[_40172 + 32] = 0
                                    _40398 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40398] = 0 / ext_call.return_data[0]
                                    mem[_40398 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45713 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45713] = 26
                                            mem[_45713 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46281 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46281] = 26
                                            mem[_46281 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39195 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39195] = 26
                                        mem[_39195 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43686 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43686] = 0
                                        mem[_43686 + 32] = 0
                                        _43979 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43979] = 0 / ext_call.return_data[0]
                                        mem[_43979 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49920 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49920] = 26
                                                mem[_49920 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50490 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50490] = 26
                                                mem[_50490 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39454 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39454] = 26
                                        mem[_39454 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44268 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44268] = 0
                                        mem[_44268 + 32] = 0
                                        _44530 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44530] = 0 / ext_call.return_data[0]
                                        mem[_44530 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50489 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50489] = 26
                                                mem[_50489 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51104 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51104] = 26
                                                mem[_51104 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37981 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37981] = 30
                            mem[_37981 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40169 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40169] = 0
                                    mem[_40169 + 32] = 0
                                    _40389 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40389] = 0 / ext_call.return_data[0]
                                    mem[_40389 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45711 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45711] = 26
                                            mem[_45711 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46276 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46276] = 26
                                            mem[_46276 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39193 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39193] = 26
                                        mem[_39193 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43681 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43681] = 0
                                        mem[_43681 + 32] = 0
                                        _43973 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43973] = 0 / ext_call.return_data[0]
                                        mem[_43973 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49919 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49919] = 26
                                                mem[_49919 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50485 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50485] = 26
                                                mem[_50485 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39449 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39449] = 26
                                        mem[_39449 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44266 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44266] = 0
                                        mem[_44266 + 32] = 0
                                        _44523 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44523] = 0 / ext_call.return_data[0]
                                        mem[_44523 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50484 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50484] = 26
                                                mem[_50484 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51096 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51096] = 26
                                                mem[_51096 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40623 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40623] = 0
                                    mem[_40623 + 32] = 0
                                    _40797 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40797] = 0 / ext_call.return_data[0]
                                    mem[_40797 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _46274 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46274] = 26
                                            mem[_46274 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46952 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46952] = 26
                                            mem[_46952 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39447 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39447] = 26
                                        mem[_39447 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44263 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44263] = 0
                                        mem[_44263 + 32] = 0
                                        _44517 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44517] = 0 / ext_call.return_data[0]
                                        mem[_44517 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50483 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50483] = 26
                                                mem[_50483 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51092 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51092] = 26
                                                mem[_51092 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39765 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39765] = 26
                                        mem[_39765 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44801 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44801] = 0
                                        mem[_44801 + 32] = 0
                                        _45013 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45013] = 0 / ext_call.return_data[0]
                                        mem[_45013 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _51091 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51091] = 26
                                                mem[_51091 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51641 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51641] = 26
                                                mem[_51641 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _37853 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37853] = 30
                        mem[_37853 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38255 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38255] = 30
                            mem[_38255 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _41880 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41880] = 0
                                    mem[_41880 + 32] = 0
                                    _42156 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42156] = 0 / ext_call.return_data[0]
                                    mem[_42156 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48325 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48325] = 26
                                            mem[_48325 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _48867 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48867] = 26
                                            mem[_48867 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _40629 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40629] = 26
                                        mem[_40629 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _45733 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45733] = 0
                                        mem[_45733 + 32] = 0
                                        _46005 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46005] = 0 / ext_call.return_data[0]
                                        mem[_46005 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52125 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52125] = 26
                                                mem[_52125 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52517 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52517] = 26
                                                mem[_52517 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41056 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41056] = 26
                                        mem[_41056 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46304 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46304] = 0
                                        mem[_46304 + 32] = 0
                                        _46644 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46644] = 0 / ext_call.return_data[0]
                                        mem[_46644 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52516 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52516] = 26
                                                mem[_52516 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52833 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52833] = 26
                                                mem[_52833 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42379 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42379] = 0
                                    mem[_42379 + 32] = 0
                                    _42666 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42666] = 0 / ext_call.return_data[0]
                                    mem[_42666 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48865 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48865] = 26
                                            mem[_48865 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49282 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49282] = 26
                                            mem[_49282 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41054 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41054] = 26
                                        mem[_41054 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46301 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46301] = 0
                                        mem[_46301 + 32] = 0
                                        _46638 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46638] = 0 / ext_call.return_data[0]
                                        mem[_46638 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52515 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52515] = 26
                                                mem[_52515 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52829 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52829] = 26
                                                mem[_52829 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41440 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41440] = 26
                                        mem[_41440 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46977 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46977] = 0
                                        mem[_46977 + 32] = 0
                                        _47332 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47332] = 0 / ext_call.return_data[0]
                                        mem[_47332 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52828 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52828] = 26
                                                mem[_52828 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53122 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53122] = 26
                                                mem[_53122 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38337 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38337] = 30
                            mem[_38337 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42376 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42376] = 0
                                    mem[_42376 + 32] = 0
                                    _42657 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42657] = 0 / ext_call.return_data[0]
                                    mem[_42657 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48863 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48863] = 26
                                            mem[_48863 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49277 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49277] = 26
                                            mem[_49277 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41052 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41052] = 26
                                        mem[_41052 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46296 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46296] = 0
                                        mem[_46296 + 32] = 0
                                        _46632 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46632] = 0 / ext_call.return_data[0]
                                        mem[_46632 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52514 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52514] = 26
                                                mem[_52514 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52824 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52824] = 26
                                                mem[_52824 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41435 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41435] = 26
                                        mem[_41435 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46975 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46975] = 0
                                        mem[_46975 + 32] = 0
                                        _47325 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47325] = 0 / ext_call.return_data[0]
                                        mem[_47325 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52823 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52823] = 26
                                                mem[_52823 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53114 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53114] = 26
                                                mem[_53114 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42925 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42925] = 0
                                    mem[_42925 + 32] = 0
                                    _43160 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43160] = 0 / ext_call.return_data[0]
                                    mem[_43160 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _49275 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49275] = 26
                                            mem[_49275 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49668 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49668] = 26
                                            mem[_49668 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41433 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41433] = 26
                                        mem[_41433 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46972 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46972] = 0
                                        mem[_46972 + 32] = 0
                                        _47319 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47319] = 0 / ext_call.return_data[0]
                                        mem[_47319 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52822 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52822] = 26
                                                mem[_52822 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53110 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53110] = 26
                                                mem[_53110 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41861 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41861] = 26
                                        mem[_41861 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47672 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47672] = 0
                                        mem[_47672 + 32] = 0
                                        _47995 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47995] = 0 / ext_call.return_data[0]
                                        mem[_47995 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _53109 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53109] = 26
                                                mem[_53109 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53463 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53463] = 26
                                                mem[_53463 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
            else:
                require totalStakingShares
                if 0 / totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                mem[64] = 224
                mem[160] = 26
                mem[192] = 'SafeMath: division by zero'
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0] <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[330 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[224] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[339 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[658 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[672],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[736],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[736],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 15
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _37022 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37022] = 30
                            mem[_37022 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37074 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37074 + idx + 68] = mem[_37022 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37074 + 68] = mem[_37074 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37074 + -mem[64] + 100
                        _37021 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37021] = 30
                        mem[_37021 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _37071 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37071 + idx + 68] = mem[_37021 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37071 + 68] = mem[_37071 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37071 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _37334 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37334] = 26
                            mem[_37334 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37372 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37372 + idx + 68] = mem[_37334 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37372 + 68] = mem[_37372 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37372 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _37371 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37371] = 26
                        mem[_37371 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _37473 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_37473 + idx + 68] = mem[_37371 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_37473 + 68] = mem[_37473 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _37473 + -mem[64] + 100
                    _37020 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37020] = 26
                    mem[_37020 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _37233 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37233] = 30
                    mem[_37233 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _37513 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37513] = 30
                        mem[_37513 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37911 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37911] = 30
                            mem[_37911 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _39758 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39758] = 0
                                    mem[_39758 + 32] = 0
                                    _39983 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39983] = 0 / ext_call.return_data[0]
                                    mem[_39983 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45232 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45232] = 26
                                            mem[_45232 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _45686 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45686] = 26
                                            mem[_45686 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _38999 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38999] = 26
                                        mem[_38999 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43116 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43116] = 0
                                        mem[_43116 + 32] = 0
                                        _43428 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43428] = 0 / ext_call.return_data[0]
                                        mem[_43428 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49443 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49443] = 26
                                                mem[_49443 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49895 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49895] = 26
                                                mem[_49895 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39184 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39184] = 26
                                        mem[_39184 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43663 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43663] = 0
                                        mem[_43663 + 32] = 0
                                        _43950 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43950] = 0 / ext_call.return_data[0]
                                        mem[_43950 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49894 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49894] = 26
                                                mem[_49894 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50451 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50451] = 26
                                                mem[_50451 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40157 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40157] = 0
                                    mem[_40157 + 32] = 0
                                    _40365 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40365] = 0 / ext_call.return_data[0]
                                    mem[_40365 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45684 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45684] = 26
                                            mem[_45684 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46248 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46248] = 26
                                            mem[_46248 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39182 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39182] = 26
                                        mem[_39182 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43660 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43660] = 0
                                        mem[_43660 + 32] = 0
                                        _43944 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43944] = 0 / ext_call.return_data[0]
                                        mem[_43944 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49893 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49893] = 26
                                                mem[_49893 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50447 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50447] = 26
                                                mem[_50447 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39430 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39430] = 26
                                        mem[_39430 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44248 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44248] = 0
                                        mem[_44248 + 32] = 0
                                        _44496 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44496] = 0 / ext_call.return_data[0]
                                        mem[_44496 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50446 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50446] = 26
                                                mem[_50446 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51059 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51059] = 26
                                                mem[_51059 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37976 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37976] = 30
                            mem[_37976 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40154 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40154] = 0
                                    mem[_40154 + 32] = 0
                                    _40356 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40356] = 0 / ext_call.return_data[0]
                                    mem[_40356 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45682 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45682] = 26
                                            mem[_45682 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46243 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46243] = 26
                                            mem[_46243 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39180 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39180] = 26
                                        mem[_39180 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43655 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43655] = 0
                                        mem[_43655 + 32] = 0
                                        _43938 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43938] = 0 / ext_call.return_data[0]
                                        mem[_43938 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49892 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49892] = 26
                                                mem[_49892 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50442 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50442] = 26
                                                mem[_50442 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39425 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39425] = 26
                                        mem[_39425 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44246 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44246] = 0
                                        mem[_44246 + 32] = 0
                                        _44489 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44489] = 0 / ext_call.return_data[0]
                                        mem[_44489 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50441 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50441] = 26
                                                mem[_50441 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51051 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51051] = 26
                                                mem[_51051 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40613 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40613] = 0
                                    mem[_40613 + 32] = 0
                                    _40769 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40769] = 0 / ext_call.return_data[0]
                                    mem[_40769 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _46241 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46241] = 26
                                            mem[_46241 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46922 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46922] = 26
                                            mem[_46922 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39423 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39423] = 26
                                        mem[_39423 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44243 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44243] = 0
                                        mem[_44243 + 32] = 0
                                        _44483 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44483] = 0 / ext_call.return_data[0]
                                        mem[_44483 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50440 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50440] = 26
                                                mem[_50440 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51047 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51047] = 26
                                                mem[_51047 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39739 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39739] = 26
                                        mem[_39739 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44781 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44781] = 0
                                        mem[_44781 + 32] = 0
                                        _44990 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44990] = 0 / ext_call.return_data[0]
                                        mem[_44990 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _51046 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51046] = 26
                                                mem[_51046 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51611 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51611] = 26
                                                mem[_51611 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _37848 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37848] = 30
                        mem[_37848 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38248 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38248] = 30
                            mem[_38248 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _41848 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41848] = 0
                                    mem[_41848 + 32] = 0
                                    _42132 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42132] = 0 / ext_call.return_data[0]
                                    mem[_42132 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48302 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48302] = 26
                                            mem[_48302 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _48849 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48849] = 26
                                            mem[_48849 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _40619 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40619] = 26
                                        mem[_40619 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _45704 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45704] = 0
                                        mem[_45704 + 32] = 0
                                        _45979 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45979] = 0 / ext_call.return_data[0]
                                        mem[_45979 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52110 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52110] = 26
                                                mem[_52110 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52505 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52505] = 26
                                                mem[_52505 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41036 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41036] = 26
                                        mem[_41036 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46271 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46271] = 0
                                        mem[_46271 + 32] = 0
                                        _46608 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46608] = 0 / ext_call.return_data[0]
                                        mem[_46608 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52504 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52504] = 26
                                                mem[_52504 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52813 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52813] = 26
                                                mem[_52813 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42359 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42359] = 0
                                    mem[_42359 + 32] = 0
                                    _42627 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42627] = 0 / ext_call.return_data[0]
                                    mem[_42627 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48847 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48847] = 26
                                            mem[_48847 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49262 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49262] = 26
                                            mem[_49262 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41034 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41034] = 26
                                        mem[_41034 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46268 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46268] = 0
                                        mem[_46268 + 32] = 0
                                        _46602 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46602] = 0 / ext_call.return_data[0]
                                        mem[_46602 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52503 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52503] = 26
                                                mem[_52503 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52809 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52809] = 26
                                                mem[_52809 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41408 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41408] = 26
                                        mem[_41408 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46947 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46947] = 0
                                        mem[_46947 + 32] = 0
                                        _47290 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47290] = 0 / ext_call.return_data[0]
                                        mem[_47290 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52808 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52808] = 26
                                                mem[_52808 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53095 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53095] = 26
                                                mem[_53095 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38329 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38329] = 30
                            mem[_38329 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42356 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42356] = 0
                                    mem[_42356 + 32] = 0
                                    _42618 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42618] = 0 / ext_call.return_data[0]
                                    mem[_42618 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48845 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48845] = 26
                                            mem[_48845 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49257 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49257] = 26
                                            mem[_49257 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41032 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41032] = 26
                                        mem[_41032 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46263 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46263] = 0
                                        mem[_46263 + 32] = 0
                                        _46596 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46596] = 0 / ext_call.return_data[0]
                                        mem[_46596 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52502 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52502] = 26
                                                mem[_52502 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52804 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52804] = 26
                                                mem[_52804 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41403 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41403] = 26
                                        mem[_41403 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46945 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46945] = 0
                                        mem[_46945 + 32] = 0
                                        _47283 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47283] = 0 / ext_call.return_data[0]
                                        mem[_47283 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52803 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52803] = 26
                                                mem[_52803 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53087 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53087] = 26
                                                mem[_53087 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42913 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42913] = 0
                                    mem[_42913 + 32] = 0
                                    _43123 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43123] = 0 / ext_call.return_data[0]
                                    mem[_43123 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _49255 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49255] = 26
                                            mem[_49255 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49643 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49643] = 26
                                            mem[_49643 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41401 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41401] = 26
                                        mem[_41401 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46942 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46942] = 0
                                        mem[_46942 + 32] = 0
                                        _47277 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47277] = 0 / ext_call.return_data[0]
                                        mem[_47277 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52802 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52802] = 26
                                                mem[_52802 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53083 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53083] = 26
                                                mem[_53083 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41829 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41829] = 26
                                        mem[_41829 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47646 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47646] = 0
                                        mem[_47646 + 32] = 0
                                        _47955 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47955] = 0 / ext_call.return_data[0]
                                        mem[_47955 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _53082 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53082] = 26
                                                mem[_53082 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53440 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53440] = 26
                                                mem[_53440 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
        else:
            require arg1
            if (100 * arg1) - (_taxFee * arg1) / arg1 != -_taxFee + 100:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            mem[64] = 160
            mem[96] = 26
            mem[128] = 'SafeMath: division by zero'
            if totalStakingShares <= 0:
                if not (100 * arg1) - (_taxFee * arg1) / 100:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
                require (100 * arg1) - (_taxFee * arg1) / 100
                if (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken / (100 * arg1) - (_taxFee * arg1) / 100 != _initialSharesPerToken:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[275 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[530 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 15
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _37019 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37019] = 30
                            mem[_37019 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37065 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37065 + idx + 68] = mem[_37019 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37065 + 68] = mem[_37065 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37065 + -mem[64] + 100
                        _37018 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37018] = 30
                        mem[_37018 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _37062 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37062 + idx + 68] = mem[_37018 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37062 + 68] = mem[_37062 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37062 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _37333 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37333] = 26
                            mem[_37333 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37366 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37366 + idx + 68] = mem[_37333 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37366 + 68] = mem[_37366 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37366 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _37365 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37365] = 26
                        mem[_37365 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _37469 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_37469 + idx + 68] = mem[_37365 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_37469 + 68] = mem[_37469 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _37469 + -mem[64] + 100
                    _37017 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37017] = 26
                    mem[_37017 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _37229 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37229] = 30
                    mem[_37229 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _37509 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37509] = 30
                        mem[_37509 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37905 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37905] = 30
                            mem[_37905 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _39732 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39732] = 0
                                    mem[_39732 + 32] = 0
                                    _39965 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39965] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_39965 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45208 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45208] = 26
                                            mem[_45208 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _45657 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45657] = 26
                                            mem[_45657 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _38993 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_38993] = 26
                                        mem[_38993 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43079 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43079] = 0
                                        mem[_43079 + 32] = 0
                                        _43407 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43407] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_43407 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49426 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49426] = 26
                                                mem[_49426 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49868 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49868] = 26
                                                mem[_49868 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39171 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39171] = 26
                                        mem[_39171 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43637 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43637] = 0
                                        mem[_43637 + 32] = 0
                                        _43915 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43915] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_43915 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49867 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49867] = 26
                                                mem[_49867 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50408 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50408] = 26
                                                mem[_50408 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40142 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40142] = 0
                                    mem[_40142 + 32] = 0
                                    _40332 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40332] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_40332 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45655 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45655] = 26
                                            mem[_45655 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46215 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46215] = 26
                                            mem[_46215 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39169 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39169] = 26
                                        mem[_39169 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43634 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43634] = 0
                                        mem[_43634 + 32] = 0
                                        _43909 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43909] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_43909 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49866 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49866] = 26
                                                mem[_49866 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50404 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50404] = 26
                                                mem[_50404 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39406 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39406] = 26
                                        mem[_39406 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44228 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44228] = 0
                                        mem[_44228 + 32] = 0
                                        _44462 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44462] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44462 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50403 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50403] = 26
                                                mem[_50403 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51014 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51014] = 26
                                                mem[_51014 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37971 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37971] = 30
                            mem[_37971 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40139 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40139] = 0
                                    mem[_40139 + 32] = 0
                                    _40323 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40323] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_40323 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45653 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45653] = 26
                                            mem[_45653 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46210 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46210] = 26
                                            mem[_46210 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39167 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39167] = 26
                                        mem[_39167 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43629 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43629] = 0
                                        mem[_43629 + 32] = 0
                                        _43903 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43903] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_43903 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49865 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49865] = 26
                                                mem[_49865 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50399 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50399] = 26
                                                mem[_50399 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39401 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39401] = 26
                                        mem[_39401 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44226 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44226] = 0
                                        mem[_44226 + 32] = 0
                                        _44455 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44455] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44455 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50398 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50398] = 26
                                                mem[_50398 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51006 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51006] = 26
                                                mem[_51006 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40603 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40603] = 0
                                    mem[_40603 + 32] = 0
                                    _40741 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40741] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_40741 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _46208 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46208] = 26
                                            mem[_46208 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46892 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46892] = 26
                                            mem[_46892 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39399 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39399] = 26
                                        mem[_39399 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44223 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44223] = 0
                                        mem[_44223 + 32] = 0
                                        _44449 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44449] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44449 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50397 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50397] = 26
                                                mem[_50397 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51002 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51002] = 26
                                                mem[_51002 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39713 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39713] = 26
                                        mem[_39713 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44761 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44761] = 0
                                        mem[_44761 + 32] = 0
                                        _44967 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44967] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44967 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _51001 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51001] = 26
                                                mem[_51001 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51581 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51581] = 26
                                                mem[_51581 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _37843 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37843] = 30
                        mem[_37843 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38241 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38241] = 30
                            mem[_38241 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _41816 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41816] = 0
                                    mem[_41816 + 32] = 0
                                    _42108 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42108] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_42108 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48279 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48279] = 26
                                            mem[_48279 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _48831 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48831] = 26
                                            mem[_48831 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _40609 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40609] = 26
                                        mem[_40609 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _45675 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45675] = 0
                                        mem[_45675 + 32] = 0
                                        _45953 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45953] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_45953 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52095 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52095] = 26
                                                mem[_52095 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52493 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52493] = 26
                                                mem[_52493 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41016 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41016] = 26
                                        mem[_41016 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46238 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46238] = 0
                                        mem[_46238 + 32] = 0
                                        _46572 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46572] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_46572 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52492 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52492] = 26
                                                mem[_52492 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52793 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52793] = 26
                                                mem[_52793 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42339 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42339] = 0
                                    mem[_42339 + 32] = 0
                                    _42588 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42588] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_42588 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48829 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48829] = 26
                                            mem[_48829 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49242 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49242] = 26
                                            mem[_49242 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41014 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41014] = 26
                                        mem[_41014 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46235 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46235] = 0
                                        mem[_46235 + 32] = 0
                                        _46566 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46566] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_46566 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52491 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52491] = 26
                                                mem[_52491 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52789 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52789] = 26
                                                mem[_52789 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41376 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41376] = 26
                                        mem[_41376 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46917 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46917] = 0
                                        mem[_46917 + 32] = 0
                                        _47248 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47248] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_47248 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52788 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52788] = 26
                                                mem[_52788 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53068 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53068] = 26
                                                mem[_53068 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38321 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38321] = 30
                            mem[_38321 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42336 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42336] = 0
                                    mem[_42336 + 32] = 0
                                    _42579 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42579] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_42579 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48827 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48827] = 26
                                            mem[_48827 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49237 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49237] = 26
                                            mem[_49237 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41012 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41012] = 26
                                        mem[_41012 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46230 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46230] = 0
                                        mem[_46230 + 32] = 0
                                        _46560 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46560] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_46560 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52490 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52490] = 26
                                                mem[_52490 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52784 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52784] = 26
                                                mem[_52784 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41371 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41371] = 26
                                        mem[_41371 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46915 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46915] = 0
                                        mem[_46915 + 32] = 0
                                        _47241 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47241] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_47241 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52783 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52783] = 26
                                                mem[_52783 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53060 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53060] = 26
                                                mem[_53060 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42901 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42901] = 0
                                    mem[_42901 + 32] = 0
                                    _43086 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43086] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_43086 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _49235 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49235] = 26
                                            mem[_49235 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49618 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49618] = 26
                                            mem[_49618 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41369 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41369] = 26
                                        mem[_41369 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46912 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46912] = 0
                                        mem[_46912 + 32] = 0
                                        _47235 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47235] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_47235 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52782 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52782] = 26
                                                mem[_52782 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53056 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53056] = 26
                                                mem[_53056 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41797 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41797] = 26
                                        mem[_41797 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47620 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47620] = 0
                                        mem[_47620 + 32] = 0
                                        _47915 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47915] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_47915 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _53055 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53055] = 26
                                                mem[_53055 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53417 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53417] = 26
                                                mem[_53417 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
            else:
                require ext_code.size(stor1)
                staticcall stor1.balance() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalStakingShares:
                    mem[64] = 224
                    mem[160] = 26
                    mem[192] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if 0 / ext_call.return_data[0] <= 0:
                        revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[330 len 26]
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    mem[224] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not totalLockedShares:
                        if ext_call.return_data[0] > 0:
                            require ext_code.size(stor3)
                            call stor3.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor2, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            47,
                                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                            mem[339 len 17]
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                        _lastAccountingTimestampSec = block.timestamp
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        if _totalStakingShareSeconds <= 0:
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            _userStakes[address(msg.sender)].field_0++
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                revert with 0, 'SafeMath: addition overflow'
                            totalStakingShares += 0 / ext_call.return_data[0]
                            require ext_code.size(stor1)
                            staticcall stor1.0xfc0c546a with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, stor1, arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            46,
                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                            mem[594 len 18]
                            if totalStakingShares <= 0:
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_code.size(stor1)
                                staticcall stor1.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[672],
                                                msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[672],
                                                msg.sender,
                        else:
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0]:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            _userStakes[address(msg.sender)].field_0++
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                revert with 0, 'SafeMath: addition overflow'
                            totalStakingShares += 0 / ext_call.return_data[0]
                            require ext_code.size(stor1)
                            staticcall stor1.0xfc0c546a with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, stor1, arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            46,
                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                            mem[658 len 18]
                            if totalStakingShares <= 0:
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_code.size(stor1)
                                staticcall stor1.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[736],
                                                msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[736],
                                                msg.sender,
                    else:
                        idx = 0
                        while idx < unlockSchedules.length:
                            mem[0] = 15
                            if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                                idx = idx + 1
                                continue 
                            if block.timestamp >= unlockSchedules[idx].field_768:
                                _37016 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37016] = 30
                                mem[_37016 + 32] = 'SafeMath: subtraction overflow'
                                if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                    unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                    if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                    if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    idx = idx + 1
                                    continue 
                                _37056 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37056 + idx + 68] = mem[_37016 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37056 + 68] = mem[_37056 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37056 + -mem[64] + 100
                            _37015 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37015] = 30
                            mem[_37015 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_512 > block.timestamp:
                                _37053 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37053 + idx + 68] = mem[_37015 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37053 + 68] = mem[_37053 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37053 + -mem[64] + 100
                            if not block.timestamp - unlockSchedules[idx].field_512:
                                _37332 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37332] = 26
                                mem[_37332 + 32] = 'SafeMath: division by zero'
                                if unlockSchedules[idx].field_1024 > 0:
                                    require unlockSchedules[idx].field_1024
                                    unlockSchedules[idx].field_512 = block.timestamp
                                    if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                    if 0 / unlockSchedules[idx].field_1024 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    idx = idx + 1
                                    continue 
                                _37360 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[_37360 + idx + 68] = mem[_37332 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37360 + 68] = mem[_37360 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _37360 + -mem[64] + 100
                            require block.timestamp - unlockSchedules[idx].field_512
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37359 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37359] = 26
                            mem[_37359 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                                if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37465 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37465 + idx + 68] = mem[_37359 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37465 + 68] = mem[_37465 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37465 + -mem[64] + 100
                        _37014 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37014] = 26
                        mem[_37014 + 32] = 'SafeMath: division by zero'
                        if totalLockedShares <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalLockedShares
                        _37225 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37225] = 30
                        mem[_37225 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > totalLockedShares:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if 0 / totalLockedShares <= 0:
                            _37505 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37505] = 30
                            mem[_37505 + 32] = 'SafeMath: subtraction overflow'
                            if _lastAccountingTimestampSec > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _lastAccountingTimestampSec:
                                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _37899 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37899] = 30
                                mem[_37899 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _39706 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39706] = 0
                                        mem[_39706 + 32] = 0
                                        _39947 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39947] = 0 / ext_call.return_data[0]
                                        mem[_39947 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45184 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45184] = 26
                                                mem[_45184 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _45628 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45628] = 26
                                                mem[_45628 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _38987 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38987] = 26
                                            mem[_38987 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43042 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43042] = 0
                                            mem[_43042 + 32] = 0
                                            _43386 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43386] = 0 / ext_call.return_data[0]
                                            mem[_43386 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49409 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49409] = 26
                                                    mem[_49409 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _49841 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49841] = 26
                                                    mem[_49841 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39158 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39158] = 26
                                            mem[_39158 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43611 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43611] = 0
                                            mem[_43611 + 32] = 0
                                            _43880 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43880] = 0 / ext_call.return_data[0]
                                            mem[_43880 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49840 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49840] = 26
                                                    mem[_49840 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50365 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50365] = 26
                                                    mem[_50365 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40127 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40127] = 0
                                        mem[_40127 + 32] = 0
                                        _40299 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40299] = 0 / ext_call.return_data[0]
                                        mem[_40299 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45626 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45626] = 26
                                                mem[_45626 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46182 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46182] = 26
                                                mem[_46182 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39156 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39156] = 26
                                            mem[_39156 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43608 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43608] = 0
                                            mem[_43608 + 32] = 0
                                            _43874 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43874] = 0 / ext_call.return_data[0]
                                            mem[_43874 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49839 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49839] = 26
                                                    mem[_49839 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50361 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50361] = 26
                                                    mem[_50361 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39382 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39382] = 26
                                            mem[_39382 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44208 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44208] = 0
                                            mem[_44208 + 32] = 0
                                            _44428 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44428] = 0 / ext_call.return_data[0]
                                            mem[_44428 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50360 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50360] = 26
                                                    mem[_50360 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50969 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50969] = 26
                                                    mem[_50969 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                            else:
                                require block.timestamp - _lastAccountingTimestampSec
                                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _37966 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37966] = 30
                                mem[_37966 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40124 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40124] = 0
                                        mem[_40124 + 32] = 0
                                        _40290 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40290] = 0 / ext_call.return_data[0]
                                        mem[_40290 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45624 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45624] = 26
                                                mem[_45624 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46177 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46177] = 26
                                                mem[_46177 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39154 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39154] = 26
                                            mem[_39154 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43603 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43603] = 0
                                            mem[_43603 + 32] = 0
                                            _43868 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43868] = 0 / ext_call.return_data[0]
                                            mem[_43868 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49838 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49838] = 26
                                                    mem[_49838 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50356 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50356] = 26
                                                    mem[_50356 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39377 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39377] = 26
                                            mem[_39377 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44206 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44206] = 0
                                            mem[_44206 + 32] = 0
                                            _44421 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44421] = 0 / ext_call.return_data[0]
                                            mem[_44421 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50355 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50355] = 26
                                                    mem[_50355 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50961 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50961] = 26
                                                    mem[_50961 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40593 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40593] = 0
                                        mem[_40593 + 32] = 0
                                        _40713 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40713] = 0 / ext_call.return_data[0]
                                        mem[_40713 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _46175 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46175] = 26
                                                mem[_46175 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46862 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46862] = 26
                                                mem[_46862 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39375 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39375] = 26
                                            mem[_39375 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44203 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44203] = 0
                                            mem[_44203 + 32] = 0
                                            _44415 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44415] = 0 / ext_call.return_data[0]
                                            mem[_44415 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50354 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50354] = 26
                                                    mem[_50354 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50957 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50957] = 26
                                                    mem[_50957 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39687 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39687] = 26
                                            mem[_39687 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44741 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44741] = 0
                                            mem[_44741 + 32] = 0
                                            _44944 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44944] = 0 / ext_call.return_data[0]
                                            mem[_44944 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50956 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50956] = 26
                                                    mem[_50956 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51551 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51551] = 26
                                                    mem[_51551 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                        else:
                            mem[mem[64] + 36] = 0 / totalLockedShares
                            require ext_code.size(stor3)
                            call stor3.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor2, 0 / totalLockedShares
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            47,
                                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                            mem[mem[64] + 115 len 17]
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 32] = ext_call.return_data[0]
                            emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                            _37838 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37838] = 30
                            mem[_37838 + 32] = 'SafeMath: subtraction overflow'
                            if _lastAccountingTimestampSec > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _lastAccountingTimestampSec:
                                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _38234 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38234] = 30
                                mem[_38234 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _41784 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41784] = 0
                                        mem[_41784 + 32] = 0
                                        _42084 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42084] = 0 / ext_call.return_data[0]
                                        mem[_42084 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48256 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48256] = 26
                                                mem[_48256 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _48813 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48813] = 26
                                                mem[_48813 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _40599 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40599] = 26
                                            mem[_40599 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _45646 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45646] = 0
                                            mem[_45646 + 32] = 0
                                            _45927 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45927] = 0 / ext_call.return_data[0]
                                            mem[_45927 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52080 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52080] = 26
                                                    mem[_52080 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52481 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52481] = 26
                                                    mem[_52481 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _40996 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40996] = 26
                                            mem[_40996 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46205 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46205] = 0
                                            mem[_46205 + 32] = 0
                                            _46536 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46536] = 0 / ext_call.return_data[0]
                                            mem[_46536 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52480 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52480] = 26
                                                    mem[_52480 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52773 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52773] = 26
                                                    mem[_52773 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42319 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42319] = 0
                                        mem[_42319 + 32] = 0
                                        _42549 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42549] = 0 / ext_call.return_data[0]
                                        mem[_42549 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48811 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48811] = 26
                                                mem[_48811 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49222 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49222] = 26
                                                mem[_49222 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _40994 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40994] = 26
                                            mem[_40994 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46202 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46202] = 0
                                            mem[_46202 + 32] = 0
                                            _46530 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46530] = 0 / ext_call.return_data[0]
                                            mem[_46530 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52479 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52479] = 26
                                                    mem[_52479 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52769 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52769] = 26
                                                    mem[_52769 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41344 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41344] = 26
                                            mem[_41344 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46887 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46887] = 0
                                            mem[_46887 + 32] = 0
                                            _47206 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47206] = 0 / ext_call.return_data[0]
                                            mem[_47206 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52768 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52768] = 26
                                                    mem[_52768 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53041 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53041] = 26
                                                    mem[_53041 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                            else:
                                require block.timestamp - _lastAccountingTimestampSec
                                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _38313 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38313] = 30
                                mem[_38313 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42316 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42316] = 0
                                        mem[_42316 + 32] = 0
                                        _42540 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42540] = 0 / ext_call.return_data[0]
                                        mem[_42540 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48809 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48809] = 26
                                                mem[_48809 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49217 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49217] = 26
                                                mem[_49217 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _40992 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40992] = 26
                                            mem[_40992 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46197 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46197] = 0
                                            mem[_46197 + 32] = 0
                                            _46524 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46524] = 0 / ext_call.return_data[0]
                                            mem[_46524 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52478 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52478] = 26
                                                    mem[_52478 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52764 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52764] = 26
                                                    mem[_52764 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41339 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41339] = 26
                                            mem[_41339 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46885 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46885] = 0
                                            mem[_46885 + 32] = 0
                                            _47199 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47199] = 0 / ext_call.return_data[0]
                                            mem[_47199 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52763 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52763] = 26
                                                    mem[_52763 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53033 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53033] = 26
                                                    mem[_53033 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42889 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42889] = 0
                                        mem[_42889 + 32] = 0
                                        _43049 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43049] = 0 / ext_call.return_data[0]
                                        mem[_43049 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49215 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49215] = 26
                                                mem[_49215 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49593 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49593] = 26
                                                mem[_49593 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _41337 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41337] = 26
                                            mem[_41337 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46882 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46882] = 0
                                            mem[_46882 + 32] = 0
                                            _47193 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47193] = 0 / ext_call.return_data[0]
                                            mem[_47193 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52762 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52762] = 26
                                                    mem[_52762 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53029 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53029] = 26
                                                    mem[_53029 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41765 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41765] = 26
                                            mem[_41765 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47594 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47594] = 0
                                            mem[_47594 + 32] = 0
                                            _47875 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47875] = 0 / ext_call.return_data[0]
                                            mem[_47875 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _53028 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53028] = 26
                                                    mem[_53028 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53394 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53394] = 26
                                                    mem[_53394 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                else:
                    require totalStakingShares
                    if totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / totalStakingShares != (100 * arg1) - (_taxFee * arg1) / 100:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    mem[64] = 224
                    mem[160] = 26
                    mem[192] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0] <= 0:
                        revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[330 len 26]
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    mem[224] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not totalLockedShares:
                        if ext_call.return_data[0] > 0:
                            require ext_code.size(stor3)
                            call stor3.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor2, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            47,
                                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                            mem[339 len 17]
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                        _lastAccountingTimestampSec = block.timestamp
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        if _totalStakingShareSeconds <= 0:
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            _userStakes[address(msg.sender)].field_0++
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                revert with 0, 'SafeMath: addition overflow'
                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            require ext_code.size(stor1)
                            staticcall stor1.0xfc0c546a with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, stor1, arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            46,
                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                            mem[594 len 18]
                            if totalStakingShares <= 0:
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_code.size(stor1)
                                staticcall stor1.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[672],
                                                msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[672],
                                                msg.sender,
                        else:
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0]:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            _userStakes[address(msg.sender)].field_0++
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                revert with 0, 'SafeMath: addition overflow'
                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            require ext_code.size(stor1)
                            staticcall stor1.0xfc0c546a with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, stor1, arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            46,
                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                            mem[658 len 18]
                            if totalStakingShares <= 0:
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_code.size(stor1)
                                staticcall stor1.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[736],
                                                msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[736],
                                                msg.sender,
                    else:
                        idx = 0
                        while idx < unlockSchedules.length:
                            mem[0] = 15
                            if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                                idx = idx + 1
                                continue 
                            if block.timestamp >= unlockSchedules[idx].field_768:
                                _37013 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37013] = 30
                                mem[_37013 + 32] = 'SafeMath: subtraction overflow'
                                if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                    unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                    if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                    if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    idx = idx + 1
                                    continue 
                                _37047 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37047 + idx + 68] = mem[_37013 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37047 + 68] = mem[_37047 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37047 + -mem[64] + 100
                            _37012 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37012] = 30
                            mem[_37012 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_512 > block.timestamp:
                                _37044 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37044 + idx + 68] = mem[_37012 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37044 + 68] = mem[_37044 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37044 + -mem[64] + 100
                            if not block.timestamp - unlockSchedules[idx].field_512:
                                _37331 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37331] = 26
                                mem[_37331 + 32] = 'SafeMath: division by zero'
                                if unlockSchedules[idx].field_1024 > 0:
                                    require unlockSchedules[idx].field_1024
                                    unlockSchedules[idx].field_512 = block.timestamp
                                    if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                    if 0 / unlockSchedules[idx].field_1024 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    idx = idx + 1
                                    continue 
                                _37354 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[_37354 + idx + 68] = mem[_37331 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37354 + 68] = mem[_37354 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _37354 + -mem[64] + 100
                            require block.timestamp - unlockSchedules[idx].field_512
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37353 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37353] = 26
                            mem[_37353 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                                if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37461 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37461 + idx + 68] = mem[_37353 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37461 + 68] = mem[_37461 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37461 + -mem[64] + 100
                        _37011 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37011] = 26
                        mem[_37011 + 32] = 'SafeMath: division by zero'
                        if totalLockedShares <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalLockedShares
                        _37221 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37221] = 30
                        mem[_37221 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > totalLockedShares:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if 0 / totalLockedShares <= 0:
                            _37501 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37501] = 30
                            mem[_37501 + 32] = 'SafeMath: subtraction overflow'
                            if _lastAccountingTimestampSec > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _lastAccountingTimestampSec:
                                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _37893 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37893] = 30
                                mem[_37893 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _39680 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39680] = 0
                                        mem[_39680 + 32] = 0
                                        _39929 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39929] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_39929 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45160 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45160] = 26
                                                mem[_45160 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _45599 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45599] = 26
                                                mem[_45599 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _38981 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_38981] = 26
                                            mem[_38981 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43005 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43005] = 0
                                            mem[_43005 + 32] = 0
                                            _43365 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43365] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_43365 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49392 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49392] = 26
                                                    mem[_49392 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _49814 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49814] = 26
                                                    mem[_49814 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39145 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39145] = 26
                                            mem[_39145 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43585 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43585] = 0
                                            mem[_43585 + 32] = 0
                                            _43845 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43845] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_43845 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49813 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49813] = 26
                                                    mem[_49813 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50322 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50322] = 26
                                                    mem[_50322 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40112 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40112] = 0
                                        mem[_40112 + 32] = 0
                                        _40266 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40266] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_40266 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45597 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45597] = 26
                                                mem[_45597 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46149 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46149] = 26
                                                mem[_46149 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39143 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39143] = 26
                                            mem[_39143 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43582 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43582] = 0
                                            mem[_43582 + 32] = 0
                                            _43839 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43839] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_43839 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49812 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49812] = 26
                                                    mem[_49812 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50318 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50318] = 26
                                                    mem[_50318 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39358 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39358] = 26
                                            mem[_39358 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44188 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44188] = 0
                                            mem[_44188 + 32] = 0
                                            _44394 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44394] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44394 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50317 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50317] = 26
                                                    mem[_50317 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50924 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50924] = 26
                                                    mem[_50924 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                            else:
                                require block.timestamp - _lastAccountingTimestampSec
                                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _37961 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37961] = 30
                                mem[_37961 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40109 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40109] = 0
                                        mem[_40109 + 32] = 0
                                        _40257 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40257] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_40257 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45595 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45595] = 26
                                                mem[_45595 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46144 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46144] = 26
                                                mem[_46144 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39141 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39141] = 26
                                            mem[_39141 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43577 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43577] = 0
                                            mem[_43577 + 32] = 0
                                            _43833 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43833] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_43833 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49811 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49811] = 26
                                                    mem[_49811 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50313 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50313] = 26
                                                    mem[_50313 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39353 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39353] = 26
                                            mem[_39353 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44186 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44186] = 0
                                            mem[_44186 + 32] = 0
                                            _44387 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44387] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44387 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50312 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50312] = 26
                                                    mem[_50312 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50916 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50916] = 26
                                                    mem[_50916 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40583 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40583] = 0
                                        mem[_40583 + 32] = 0
                                        _40685 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40685] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_40685 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _46142 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46142] = 26
                                                mem[_46142 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46832 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46832] = 26
                                                mem[_46832 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39351 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39351] = 26
                                            mem[_39351 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44183 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44183] = 0
                                            mem[_44183 + 32] = 0
                                            _44381 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44381] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44381 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50311 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50311] = 26
                                                    mem[_50311 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50912 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50912] = 26
                                                    mem[_50912 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39661 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39661] = 26
                                            mem[_39661 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44721 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44721] = 0
                                            mem[_44721 + 32] = 0
                                            _44921 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44921] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44921 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50911 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50911] = 26
                                                    mem[_50911 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51521 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51521] = 26
                                                    mem[_51521 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                        else:
                            mem[mem[64] + 36] = 0 / totalLockedShares
                            require ext_code.size(stor3)
                            call stor3.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor2, 0 / totalLockedShares
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            47,
                                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                            mem[mem[64] + 115 len 17]
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 32] = ext_call.return_data[0]
                            emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                            _37833 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37833] = 30
                            mem[_37833 + 32] = 'SafeMath: subtraction overflow'
                            if _lastAccountingTimestampSec > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _lastAccountingTimestampSec:
                                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _38227 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38227] = 30
                                mem[_38227 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _41752 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41752] = 0
                                        mem[_41752 + 32] = 0
                                        _42060 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42060] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_42060 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48233 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48233] = 26
                                                mem[_48233 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _48795 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48795] = 26
                                                mem[_48795 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _40589 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40589] = 26
                                            mem[_40589 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _45617 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45617] = 0
                                            mem[_45617 + 32] = 0
                                            _45901 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45901] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_45901 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52065 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52065] = 26
                                                    mem[_52065 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52469 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52469] = 26
                                                    mem[_52469 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _40976 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40976] = 26
                                            mem[_40976 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46172 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46172] = 0
                                            mem[_46172 + 32] = 0
                                            _46500 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46500] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_46500 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52468 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52468] = 26
                                                    mem[_52468 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52753 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52753] = 26
                                                    mem[_52753 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42299 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42299] = 0
                                        mem[_42299 + 32] = 0
                                        _42510 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42510] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_42510 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48793 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48793] = 26
                                                mem[_48793 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49202 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49202] = 26
                                                mem[_49202 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _40974 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40974] = 26
                                            mem[_40974 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46169 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46169] = 0
                                            mem[_46169 + 32] = 0
                                            _46494 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46494] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_46494 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52467 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52467] = 26
                                                    mem[_52467 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52749 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52749] = 26
                                                    mem[_52749 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41312 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41312] = 26
                                            mem[_41312 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46857 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46857] = 0
                                            mem[_46857 + 32] = 0
                                            _47164 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47164] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_47164 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52748 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52748] = 26
                                                    mem[_52748 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53014 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53014] = 26
                                                    mem[_53014 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                            else:
                                require block.timestamp - _lastAccountingTimestampSec
                                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _38305 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38305] = 30
                                mem[_38305 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42296 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42296] = 0
                                        mem[_42296 + 32] = 0
                                        _42501 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42501] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_42501 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48791 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48791] = 26
                                                mem[_48791 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49197 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49197] = 26
                                                mem[_49197 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _40972 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40972] = 26
                                            mem[_40972 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46164 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46164] = 0
                                            mem[_46164 + 32] = 0
                                            _46488 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46488] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_46488 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52466 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52466] = 26
                                                    mem[_52466 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52744 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52744] = 26
                                                    mem[_52744 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41307 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41307] = 26
                                            mem[_41307 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46855 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46855] = 0
                                            mem[_46855 + 32] = 0
                                            _47157 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47157] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_47157 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52743 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52743] = 26
                                                    mem[_52743 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53006 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53006] = 26
                                                    mem[_53006 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42877 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42877] = 0
                                        mem[_42877 + 32] = 0
                                        _43012 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43012] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_43012 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49195 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49195] = 26
                                                mem[_49195 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49568 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49568] = 26
                                                mem[_49568 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _41305 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41305] = 26
                                            mem[_41305 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46852 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46852] = 0
                                            mem[_46852 + 32] = 0
                                            _47151 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47151] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_47151 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52742 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52742] = 26
                                                    mem[_52742 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53002 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53002] = 26
                                                    mem[_53002 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41733 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41733] = 26
                                            mem[_41733 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47568 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47568] = 0
                                            mem[_47568 + 32] = 0
                                            _47835 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47835] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_47835 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _53001 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53001] = 26
                                                    mem[_53001 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53371 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53371] = 26
                                                    mem[_53371 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
    else:
        require ext_code.size(stor1)
        staticcall stor1.balance() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] <= 0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        74,
                        0x77546f6b656e4765797365723a20496e76616c69642073746174652e205374616b696e67207368617265732065786973742c20627574206e6f207374616b696e6720746f6b656e732064,
                        mem[238 len 22]
        if not arg1:
            mem[96] = 26
            mem[128] = 'SafeMath: division by zero'
            if totalStakingShares <= 0:
                revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
            require ext_code.size(stor1)
            staticcall stor1.balance() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not totalStakingShares:
                mem[64] = 224
                mem[160] = 26
                mem[192] = 'SafeMath: division by zero'
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0] <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[330 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[224] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[339 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[658 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[672],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[736],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[736],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 15
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _37040 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37040] = 30
                            mem[_37040 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37128 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37128 + idx + 68] = mem[_37040 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37128 + 68] = mem[_37128 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37128 + -mem[64] + 100
                        _37039 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37039] = 30
                        mem[_37039 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _37125 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37125 + idx + 68] = mem[_37039 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37125 + 68] = mem[_37125 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37125 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _37340 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37340] = 26
                            mem[_37340 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37408 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37408 + idx + 68] = mem[_37340 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37408 + 68] = mem[_37408 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37408 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _37407 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37407] = 26
                        mem[_37407 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _37497 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_37497 + idx + 68] = mem[_37407 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_37497 + 68] = mem[_37497 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _37497 + -mem[64] + 100
                    _37038 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37038] = 26
                    mem[_37038 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _37257 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37257] = 30
                    mem[_37257 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _37537 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37537] = 30
                        mem[_37537 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37947 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37947] = 30
                            mem[_37947 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _39914 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39914] = 0
                                    mem[_39914 + 32] = 0
                                    _40091 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40091] = 0 / ext_call.return_data[0]
                                    mem[_40091 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45376 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45376] = 26
                                            mem[_45376 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _45860 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45860] = 26
                                            mem[_45860 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39035 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39035] = 26
                                        mem[_39035 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43338 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43338] = 0
                                        mem[_43338 + 32] = 0
                                        _43554 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43554] = 0 / ext_call.return_data[0]
                                        mem[_43554 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49545 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49545] = 26
                                                mem[_49545 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50057 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50057] = 26
                                                mem[_50057 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39262 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39262] = 26
                                        mem[_39262 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43819 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43819] = 0
                                        mem[_43819 + 32] = 0
                                        _44160 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44160] = 0 / ext_call.return_data[0]
                                        mem[_44160 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50056 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50056] = 26
                                                mem[_50056 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50709 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50709] = 26
                                                mem[_50709 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40247 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40247] = 0
                                    mem[_40247 + 32] = 0
                                    _40563 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40563] = 0 / ext_call.return_data[0]
                                    mem[_40563 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45858 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45858] = 26
                                            mem[_45858 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46446 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46446] = 26
                                            mem[_46446 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39260 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39260] = 26
                                        mem[_39260 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43816 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43816] = 0
                                        mem[_43816 + 32] = 0
                                        _44154 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44154] = 0 / ext_call.return_data[0]
                                        mem[_44154 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50055 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50055] = 26
                                                mem[_50055 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50705 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50705] = 26
                                                mem[_50705 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39574 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39574] = 26
                                        mem[_39574 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44368 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44368] = 0
                                        mem[_44368 + 32] = 0
                                        _44700 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44700] = 0 / ext_call.return_data[0]
                                        mem[_44700 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50704 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50704] = 26
                                                mem[_50704 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51329 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51329] = 26
                                                mem[_51329 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38006 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38006] = 30
                            mem[_38006 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40244 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40244] = 0
                                    mem[_40244 + 32] = 0
                                    _40554 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40554] = 0 / ext_call.return_data[0]
                                    mem[_40554 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45856 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45856] = 26
                                            mem[_45856 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46441 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46441] = 26
                                            mem[_46441 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39258 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39258] = 26
                                        mem[_39258 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43811 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43811] = 0
                                        mem[_43811 + 32] = 0
                                        _44148 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44148] = 0 / ext_call.return_data[0]
                                        mem[_44148 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50054 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50054] = 26
                                                mem[_50054 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50700 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50700] = 26
                                                mem[_50700 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39569 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39569] = 26
                                        mem[_39569 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44366 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44366] = 0
                                        mem[_44366 + 32] = 0
                                        _44693 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44693] = 0 / ext_call.return_data[0]
                                        mem[_44693 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50699 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50699] = 26
                                                mem[_50699 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51321 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51321] = 26
                                                mem[_51321 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40673 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40673] = 0
                                    mem[_40673 + 32] = 0
                                    _40937 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40937] = 0 / ext_call.return_data[0]
                                    mem[_40937 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _46439 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46439] = 26
                                            mem[_46439 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _47102 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47102] = 26
                                            mem[_47102 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39567 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39567] = 26
                                        mem[_39567 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44363 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44363] = 0
                                        mem[_44363 + 32] = 0
                                        _44687 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44687] = 0 / ext_call.return_data[0]
                                        mem[_44687 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50698 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50698] = 26
                                                mem[_50698 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51317 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51317] = 26
                                                mem[_51317 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39895 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39895] = 26
                                        mem[_39895 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44901 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44901] = 0
                                        mem[_44901 + 32] = 0
                                        _45128 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45128] = 0 / ext_call.return_data[0]
                                        mem[_45128 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _51316 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51316] = 26
                                                mem[_51316 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51791 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51791] = 26
                                                mem[_51791 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _37878 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37878] = 30
                        mem[_37878 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38290 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38290] = 30
                            mem[_38290 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42040 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42040] = 0
                                    mem[_42040 + 32] = 0
                                    _42276 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42276] = 0 / ext_call.return_data[0]
                                    mem[_42276 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48440 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48440] = 26
                                            mem[_48440 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _48957 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48957] = 26
                                            mem[_48957 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _40679 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40679] = 26
                                        mem[_40679 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _45878 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45878] = 0
                                        mem[_45878 + 32] = 0
                                        _46135 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46135] = 0 / ext_call.return_data[0]
                                        mem[_46135 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52200 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52200] = 26
                                                mem[_52200 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52577 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52577] = 26
                                                mem[_52577 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41156 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41156] = 26
                                        mem[_41156 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46469 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46469] = 0
                                        mem[_46469 + 32] = 0
                                        _46824 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46824] = 0 / ext_call.return_data[0]
                                        mem[_46824 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52576 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52576] = 26
                                                mem[_52576 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52933 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52933] = 26
                                                mem[_52933 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42479 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42479] = 0
                                    mem[_42479 + 32] = 0
                                    _42861 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42861] = 0 / ext_call.return_data[0]
                                    mem[_42861 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48955 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48955] = 26
                                            mem[_48955 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49382 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49382] = 26
                                            mem[_49382 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41154 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41154] = 26
                                        mem[_41154 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46466 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46466] = 0
                                        mem[_46466 + 32] = 0
                                        _46818 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46818] = 0 / ext_call.return_data[0]
                                        mem[_46818 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52575 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52575] = 26
                                                mem[_52575 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52929 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52929] = 26
                                                mem[_52929 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41600 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41600] = 26
                                        mem[_41600 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47127 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47127] = 0
                                        mem[_47127 + 32] = 0
                                        _47542 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47542] = 0 / ext_call.return_data[0]
                                        mem[_47542 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52928 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52928] = 26
                                                mem[_52928 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53257 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53257] = 26
                                                mem[_53257 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38377 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38377] = 30
                            mem[_38377 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42476 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42476] = 0
                                    mem[_42476 + 32] = 0
                                    _42852 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42852] = 0 / ext_call.return_data[0]
                                    mem[_42852 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48953 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48953] = 26
                                            mem[_48953 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49377 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49377] = 26
                                            mem[_49377 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41152 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41152] = 26
                                        mem[_41152 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46461 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46461] = 0
                                        mem[_46461 + 32] = 0
                                        _46812 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46812] = 0 / ext_call.return_data[0]
                                        mem[_46812 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52574 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52574] = 26
                                                mem[_52574 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52924 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52924] = 26
                                                mem[_52924 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41595 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41595] = 26
                                        mem[_41595 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47125 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47125] = 0
                                        mem[_47125 + 32] = 0
                                        _47535 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47535] = 0 / ext_call.return_data[0]
                                        mem[_47535 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52923 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52923] = 26
                                                mem[_52923 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53249 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53249] = 26
                                                mem[_53249 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42985 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42985] = 0
                                    mem[_42985 + 32] = 0
                                    _43345 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43345] = 0 / ext_call.return_data[0]
                                    mem[_43345 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _49375 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49375] = 26
                                            mem[_49375 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49793 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49793] = 26
                                            mem[_49793 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41593 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41593] = 26
                                        mem[_41593 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47122 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47122] = 0
                                        mem[_47122 + 32] = 0
                                        _47529 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47529] = 0 / ext_call.return_data[0]
                                        mem[_47529 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52922 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52922] = 26
                                                mem[_52922 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53245 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53245] = 26
                                                mem[_53245 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _42021 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42021] = 26
                                        mem[_42021 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47802 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47802] = 0
                                        mem[_47802 + 32] = 0
                                        _48195 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48195] = 0 / ext_call.return_data[0]
                                        mem[_48195 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _53244 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53244] = 26
                                                mem[_53244 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53578 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53578] = 26
                                                mem[_53578 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
            else:
                require totalStakingShares
                if 0 / totalStakingShares:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                mem[64] = 224
                mem[160] = 26
                mem[192] = 'SafeMath: division by zero'
                if ext_call.return_data[0] <= 0:
                    revert with 0, 'SafeMath: division by zero'
                require ext_call.return_data[0]
                if 0 / ext_call.return_data[0] <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[330 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[224] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[339 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += 0 / ext_call.return_data[0]
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[658 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[672],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[736],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[736],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 15
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _37037 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37037] = 30
                            mem[_37037 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37119 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37119 + idx + 68] = mem[_37037 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37119 + 68] = mem[_37119 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37119 + -mem[64] + 100
                        _37036 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37036] = 30
                        mem[_37036 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _37116 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37116 + idx + 68] = mem[_37036 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37116 + 68] = mem[_37116 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37116 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _37339 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37339] = 26
                            mem[_37339 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37402 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37402 + idx + 68] = mem[_37339 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37402 + 68] = mem[_37402 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37402 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _37401 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37401] = 26
                        mem[_37401 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _37493 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_37493 + idx + 68] = mem[_37401 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_37493 + 68] = mem[_37493 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _37493 + -mem[64] + 100
                    _37035 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37035] = 26
                    mem[_37035 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _37253 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37253] = 30
                    mem[_37253 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _37533 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37533] = 30
                        mem[_37533 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37941 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37941] = 30
                            mem[_37941 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _39888 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39888] = 0
                                    mem[_39888 + 32] = 0
                                    _40073 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40073] = 0 / ext_call.return_data[0]
                                    mem[_40073 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45352 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45352] = 26
                                            mem[_45352 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _45831 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45831] = 26
                                            mem[_45831 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39029 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39029] = 26
                                        mem[_39029 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43301 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43301] = 0
                                        mem[_43301 + 32] = 0
                                        _43533 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43533] = 0 / ext_call.return_data[0]
                                        mem[_43533 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49528 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49528] = 26
                                                mem[_49528 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50030 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50030] = 26
                                                mem[_50030 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39249 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39249] = 26
                                        mem[_39249 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43793 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43793] = 0
                                        mem[_43793 + 32] = 0
                                        _44125 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44125] = 0 / ext_call.return_data[0]
                                        mem[_44125 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50029 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50029] = 26
                                                mem[_50029 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50666 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50666] = 26
                                                mem[_50666 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40232 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40232] = 0
                                    mem[_40232 + 32] = 0
                                    _40530 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40530] = 0 / ext_call.return_data[0]
                                    mem[_40530 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45829 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45829] = 26
                                            mem[_45829 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46413 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46413] = 26
                                            mem[_46413 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39247 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39247] = 26
                                        mem[_39247 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43790 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43790] = 0
                                        mem[_43790 + 32] = 0
                                        _44119 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44119] = 0 / ext_call.return_data[0]
                                        mem[_44119 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50028 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50028] = 26
                                                mem[_50028 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50662 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50662] = 26
                                                mem[_50662 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39550 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39550] = 26
                                        mem[_39550 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44348 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44348] = 0
                                        mem[_44348 + 32] = 0
                                        _44666 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44666] = 0 / ext_call.return_data[0]
                                        mem[_44666 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50661 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50661] = 26
                                                mem[_50661 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51284 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51284] = 26
                                                mem[_51284 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38001 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38001] = 30
                            mem[_38001 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40229 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40229] = 0
                                    mem[_40229 + 32] = 0
                                    _40521 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40521] = 0 / ext_call.return_data[0]
                                    mem[_40521 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45827 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45827] = 26
                                            mem[_45827 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46408 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46408] = 26
                                            mem[_46408 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39245 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39245] = 26
                                        mem[_39245 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43785 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43785] = 0
                                        mem[_43785 + 32] = 0
                                        _44113 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44113] = 0 / ext_call.return_data[0]
                                        mem[_44113 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50027 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50027] = 26
                                                mem[_50027 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50657 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50657] = 26
                                                mem[_50657 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39545 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39545] = 26
                                        mem[_39545 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44346 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44346] = 0
                                        mem[_44346 + 32] = 0
                                        _44659 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44659] = 0 / ext_call.return_data[0]
                                        mem[_44659 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50656 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50656] = 26
                                                mem[_50656 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51276 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51276] = 26
                                                mem[_51276 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40663 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40663] = 0
                                    mem[_40663 + 32] = 0
                                    _40909 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40909] = 0 / ext_call.return_data[0]
                                    mem[_40909 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _46406 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46406] = 26
                                            mem[_46406 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _47072 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47072] = 26
                                            mem[_47072 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39543 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39543] = 26
                                        mem[_39543 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44343 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44343] = 0
                                        mem[_44343 + 32] = 0
                                        _44653 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44653] = 0 / ext_call.return_data[0]
                                        mem[_44653 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50655 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50655] = 26
                                                mem[_50655 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51272 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51272] = 26
                                                mem[_51272 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39869 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39869] = 26
                                        mem[_39869 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44881 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44881] = 0
                                        mem[_44881 + 32] = 0
                                        _45105 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45105] = 0 / ext_call.return_data[0]
                                        mem[_45105 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _51271 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51271] = 26
                                                mem[_51271 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51761 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51761] = 26
                                                mem[_51761 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _37873 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37873] = 30
                        mem[_37873 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38283 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38283] = 30
                            mem[_38283 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42008 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42008] = 0
                                    mem[_42008 + 32] = 0
                                    _42252 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42252] = 0 / ext_call.return_data[0]
                                    mem[_42252 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48417 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48417] = 26
                                            mem[_48417 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _48939 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48939] = 26
                                            mem[_48939 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _40669 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40669] = 26
                                        mem[_40669 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _45849 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45849] = 0
                                        mem[_45849 + 32] = 0
                                        _46109 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46109] = 0 / ext_call.return_data[0]
                                        mem[_46109 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52185 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52185] = 26
                                                mem[_52185 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52565 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52565] = 26
                                                mem[_52565 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41136 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41136] = 26
                                        mem[_41136 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46436 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46436] = 0
                                        mem[_46436 + 32] = 0
                                        _46788 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46788] = 0 / ext_call.return_data[0]
                                        mem[_46788 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52564 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52564] = 26
                                                mem[_52564 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52913 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52913] = 26
                                                mem[_52913 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42459 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42459] = 0
                                    mem[_42459 + 32] = 0
                                    _42822 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42822] = 0 / ext_call.return_data[0]
                                    mem[_42822 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48937 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48937] = 26
                                            mem[_48937 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49362 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49362] = 26
                                            mem[_49362 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41134 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41134] = 26
                                        mem[_41134 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46433 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46433] = 0
                                        mem[_46433 + 32] = 0
                                        _46782 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46782] = 0 / ext_call.return_data[0]
                                        mem[_46782 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52563 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52563] = 26
                                                mem[_52563 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52909 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52909] = 26
                                                mem[_52909 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41568 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41568] = 26
                                        mem[_41568 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47097 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47097] = 0
                                        mem[_47097 + 32] = 0
                                        _47500 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47500] = 0 / ext_call.return_data[0]
                                        mem[_47500 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52908 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52908] = 26
                                                mem[_52908 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53230 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53230] = 26
                                                mem[_53230 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38369 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38369] = 30
                            mem[_38369 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42456 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42456] = 0
                                    mem[_42456 + 32] = 0
                                    _42813 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42813] = 0 / ext_call.return_data[0]
                                    mem[_42813 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48935 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48935] = 26
                                            mem[_48935 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49357 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49357] = 26
                                            mem[_49357 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41132 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41132] = 26
                                        mem[_41132 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46428 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46428] = 0
                                        mem[_46428 + 32] = 0
                                        _46776 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46776] = 0 / ext_call.return_data[0]
                                        mem[_46776 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52562 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52562] = 26
                                                mem[_52562 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52904 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52904] = 26
                                                mem[_52904 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41563 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41563] = 26
                                        mem[_41563 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47095 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47095] = 0
                                        mem[_47095 + 32] = 0
                                        _47493 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47493] = 0 / ext_call.return_data[0]
                                        mem[_47493 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52903 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52903] = 26
                                                mem[_52903 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53222 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53222] = 26
                                                mem[_53222 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42973 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42973] = 0
                                    mem[_42973 + 32] = 0
                                    _43308 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43308] = 0 / ext_call.return_data[0]
                                    mem[_43308 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += 0 / ext_call.return_data[0]
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _49355 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49355] = 26
                                            mem[_49355 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49768 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49768] = 26
                                            mem[_49768 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41561 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41561] = 26
                                        mem[_41561 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47092 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47092] = 0
                                        mem[_47092 + 32] = 0
                                        _47487 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47487] = 0 / ext_call.return_data[0]
                                        mem[_47487 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52902 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52902] = 26
                                                mem[_52902 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53218 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53218] = 26
                                                mem[_53218 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41989 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41989] = 26
                                        mem[_41989 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47776 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47776] = 0
                                        mem[_47776 + 32] = 0
                                        _48155 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48155] = 0 / ext_call.return_data[0]
                                        mem[_48155 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _53217 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53217] = 26
                                                mem[_53217 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53555 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53555] = 26
                                                mem[_53555 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
        else:
            require arg1
            if (100 * arg1) - (_taxFee * arg1) / arg1 != -_taxFee + 100:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            mem[64] = 160
            mem[96] = 26
            mem[128] = 'SafeMath: division by zero'
            if totalStakingShares <= 0:
                if not (100 * arg1) - (_taxFee * arg1) / 100:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
                require (100 * arg1) - (_taxFee * arg1) / 100
                if (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken / (100 * arg1) - (_taxFee * arg1) / 100 != _initialSharesPerToken:
                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                if (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken <= 0:
                    revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[266 len 26]
                require ext_code.size(stor3)
                staticcall stor3.balance() with:
                        gas gas_remaining wei
                mem[160] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalLockedShares:
                    if ext_call.return_data[0] > 0:
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[275 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                    if _lastAccountingTimestampSec > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _lastAccountingTimestampSec:
                        if _totalStakingShareSeconds < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _lastAccountingTimestampSec
                        if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[325 len 31]
                        if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                            revert with 0, 'SafeMath: addition overflow'
                        _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                    _lastAccountingTimestampSec = block.timestamp
                    if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                        if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                    else:
                        require block.timestamp - _userTotals[address(msg.sender)].field_512
                        if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                    if _totalStakingShareSeconds <= 0:
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[530 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[544],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[517 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                    else:
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0]:
                            require ext_call.return_data[0]
                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                        if _totalStakingShareSeconds <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require _totalStakingShareSeconds
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(stor2)
                        staticcall stor2.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                            revert with 0, 'SafeMath: addition overflow'
                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        _userStakes[address(msg.sender)].field_0++
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                            revert with 0, 'SafeMath: addition overflow'
                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                        require ext_code.size(stor1)
                        staticcall stor1.0xfc0c546a with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_code.size(address(ext_call.return_data[0]))
                        call address(ext_call.return_data[0]).0x23b872dd with:
                             gas gas_remaining wei
                            args msg.sender, stor1, arg1
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        46,
                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                        mem[594 len 18]
                        if totalStakingShares <= 0:
                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                        arg1,
                                        0,
                                        96,
                                        0,
                                        mem[608],
                                        msg.sender,
                        else:
                            require ext_code.size(stor1)
                            staticcall stor1.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                if totalStakingShares <= 0:
                                    revert with 0, 'SafeMath: division by zero'
                                require totalStakingShares
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                else:
                    idx = 0
                    while idx < unlockSchedules.length:
                        mem[0] = 15
                        if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                            idx = idx + 1
                            continue 
                        if block.timestamp >= unlockSchedules[idx].field_768:
                            _37034 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37034] = 30
                            mem[_37034 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37110 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37110 + idx + 68] = mem[_37034 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37110 + 68] = mem[_37110 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37110 + -mem[64] + 100
                        _37033 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37033] = 30
                        mem[_37033 + 32] = 'SafeMath: subtraction overflow'
                        if unlockSchedules[idx].field_512 > block.timestamp:
                            _37107 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 30
                            idx = 0
                            while idx < 30:
                                mem[_37107 + idx + 68] = mem[_37033 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37107 + 68] = mem[_37107 + 70 len 30]
                            revert with memory
                              from mem[64]
                               len _37107 + -mem[64] + 100
                        if not block.timestamp - unlockSchedules[idx].field_512:
                            _37338 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37338] = 26
                            mem[_37338 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                if 0 / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37396 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37396 + idx + 68] = mem[_37338 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37396 + 68] = mem[_37396 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37396 + -mem[64] + 100
                        require block.timestamp - unlockSchedules[idx].field_512
                        if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                        _37395 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37395] = 26
                        mem[_37395 + 32] = 'SafeMath: division by zero'
                        if unlockSchedules[idx].field_1024 > 0:
                            require unlockSchedules[idx].field_1024
                            unlockSchedules[idx].field_512 = block.timestamp
                            if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            idx = idx + 1
                            continue 
                        _37489 = mem[64]
                        mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = 32
                        mem[mem[64] + 36] = 26
                        idx = 0
                        while idx < 26:
                            mem[_37489 + idx + 68] = mem[_37395 + idx + 32]
                            idx = idx + 32
                            continue 
                        mem[_37489 + 68] = mem[_37489 + 74 len 26]
                        revert with memory
                          from mem[64]
                           len _37489 + -mem[64] + 100
                    _37032 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37032] = 26
                    mem[_37032 + 32] = 'SafeMath: division by zero'
                    if totalLockedShares <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require totalLockedShares
                    _37249 = mem[64]
                    mem[64] = mem[64] + 64
                    mem[_37249] = 30
                    mem[_37249 + 32] = 'SafeMath: subtraction overflow'
                    if 0 > totalLockedShares:
                        revert with 0, 'SafeMath: subtraction overflow'
                    if 0 / totalLockedShares <= 0:
                        _37529 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37529] = 30
                        mem[_37529 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37935 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37935] = 30
                            mem[_37935 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _39862 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_39862] = 0
                                    mem[_39862 + 32] = 0
                                    _40055 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40055] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_40055 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45328 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45328] = 26
                                            mem[_45328 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _45802 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45802] = 26
                                            mem[_45802 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39023 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39023] = 26
                                        mem[_39023 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43264 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43264] = 0
                                        mem[_43264 + 32] = 0
                                        _43512 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43512] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_43512 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49511 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49511] = 26
                                                mem[_49511 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50003 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50003] = 26
                                                mem[_50003 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39236 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39236] = 26
                                        mem[_39236 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43767 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43767] = 0
                                        mem[_43767 + 32] = 0
                                        _44090 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44090] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44090 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50002 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50002] = 26
                                                mem[_50002 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50623 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50623] = 26
                                                mem[_50623 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40217 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40217] = 0
                                    mem[_40217 + 32] = 0
                                    _40497 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40497] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_40497 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45800 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45800] = 26
                                            mem[_45800 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46380 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46380] = 26
                                            mem[_46380 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39234 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39234] = 26
                                        mem[_39234 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43764 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43764] = 0
                                        mem[_43764 + 32] = 0
                                        _44084 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44084] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44084 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50001 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50001] = 26
                                                mem[_50001 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50619 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50619] = 26
                                                mem[_50619 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39526 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39526] = 26
                                        mem[_39526 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44328 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44328] = 0
                                        mem[_44328 + 32] = 0
                                        _44632 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44632] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44632 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50618 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50618] = 26
                                                mem[_50618 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51239 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51239] = 26
                                                mem[_51239 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _37996 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37996] = 30
                            mem[_37996 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40214 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40214] = 0
                                    mem[_40214 + 32] = 0
                                    _40488 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40488] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_40488 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _45798 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45798] = 26
                                            mem[_45798 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _46375 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46375] = 26
                                            mem[_46375 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39232 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39232] = 26
                                        mem[_39232 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _43759 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43759] = 0
                                        mem[_43759 + 32] = 0
                                        _44078 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44078] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44078 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50000 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50000] = 26
                                                mem[_50000 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _50614 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50614] = 26
                                                mem[_50614 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39521 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39521] = 26
                                        mem[_39521 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44326 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44326] = 0
                                        mem[_44326 + 32] = 0
                                        _44625 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44625] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44625 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50613 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50613] = 26
                                                mem[_50613 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51231 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51231] = 26
                                                mem[_51231 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _40653 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40653] = 0
                                    mem[_40653 + 32] = 0
                                    _40881 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_40881] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_40881 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _46373 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46373] = 26
                                            mem[_46373 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _47042 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47042] = 26
                                            mem[_47042 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _39519 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39519] = 26
                                        mem[_39519 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44323 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44323] = 0
                                        mem[_44323 + 32] = 0
                                        _44619 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44619] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_44619 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _50612 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_50612] = 26
                                                mem[_50612 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51227 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51227] = 26
                                                mem[_51227 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _39843 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39843] = 26
                                        mem[_39843 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _44861 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_44861] = 0
                                        mem[_44861 + 32] = 0
                                        _45082 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45082] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_45082 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _51226 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51226] = 26
                                                mem[_51226 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _51731 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_51731] = 26
                                                mem[_51731 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                    else:
                        mem[mem[64] + 36] = 0 / totalLockedShares
                        require ext_code.size(stor3)
                        call stor3.0xa9059cbb with:
                             gas gas_remaining wei
                            args stor2, 0 / totalLockedShares
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if not ext_call.return_data[0]:
                            revert with 0, 
                                        32,
                                        47,
                                        0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                        mem[mem[64] + 115 len 17]
                        require ext_code.size(stor3)
                        staticcall stor3.balance() with:
                                gas gas_remaining wei
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        mem[mem[64] + 32] = ext_call.return_data[0]
                        emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                        _37868 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37868] = 30
                        mem[_37868 + 32] = 'SafeMath: subtraction overflow'
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38276 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38276] = 30
                            mem[_38276 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _41976 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_41976] = 0
                                    mem[_41976 + 32] = 0
                                    _42228 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42228] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_42228 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48394 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48394] = 26
                                            mem[_48394 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _48921 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48921] = 26
                                            mem[_48921 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _40659 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40659] = 26
                                        mem[_40659 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _45820 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_45820] = 0
                                        mem[_45820 + 32] = 0
                                        _46083 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46083] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_46083 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52170 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52170] = 26
                                                mem[_52170 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52553 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52553] = 26
                                                mem[_52553 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41116 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41116] = 26
                                        mem[_41116 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46403 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46403] = 0
                                        mem[_46403 + 32] = 0
                                        _46752 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46752] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_46752 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52552 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52552] = 26
                                                mem[_52552 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52893 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52893] = 26
                                                mem[_52893 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42439 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42439] = 0
                                    mem[_42439 + 32] = 0
                                    _42783 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42783] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_42783 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48919 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48919] = 26
                                            mem[_48919 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49342 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49342] = 26
                                            mem[_49342 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41114 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41114] = 26
                                        mem[_41114 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46400 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46400] = 0
                                        mem[_46400 + 32] = 0
                                        _46746 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46746] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_46746 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52551 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52551] = 26
                                                mem[_52551 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52889 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52889] = 26
                                                mem[_52889 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41536 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41536] = 26
                                        mem[_41536 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47067 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47067] = 0
                                        mem[_47067 + 32] = 0
                                        _47458 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47458] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_47458 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52888 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52888] = 26
                                                mem[_52888 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53203 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53203] = 26
                                                mem[_53203 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                            _lastAccountingTimestampSec = block.timestamp
                            mem[0] = msg.sender
                            mem[32] = 13
                            _38361 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_38361] = 30
                            mem[_38361 + 32] = 'SafeMath: subtraction overflow'
                            if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42436 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42436] = 0
                                    mem[_42436 + 32] = 0
                                    _42774 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42774] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_42774 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _48917 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48917] = 26
                                            mem[_48917 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49337 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49337] = 26
                                            mem[_49337 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41112 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41112] = 26
                                        mem[_41112 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _46395 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46395] = 0
                                        mem[_46395 + 32] = 0
                                        _46740 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_46740] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_46740 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52550 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52550] = 26
                                                mem[_52550 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _52884 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52884] = 26
                                                mem[_52884 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41531 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41531] = 26
                                        mem[_41531 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47065 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47065] = 0
                                        mem[_47065 + 32] = 0
                                        _47451 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47451] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_47451 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52883 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52883] = 26
                                                mem[_52883 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53195 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53195] = 26
                                                mem[_53195 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                            else:
                                require block.timestamp - _userTotals[address(msg.sender)].field_512
                                if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                _userTotals[address(msg.sender)].field_512 = block.timestamp
                                if _totalStakingShareSeconds <= 0:
                                    require ext_code.size(stor3)
                                    staticcall stor3.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    mem[0] = msg.sender
                                    mem[32] = 13
                                    if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    _42961 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_42961] = 0
                                    mem[_42961 + 32] = 0
                                    _43271 = mem[64]
                                    mem[64] = mem[64] + 64
                                    mem[_43271] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    mem[_43271 + 32] = block.timestamp
                                    mem[32] = 14
                                    _userStakes[address(msg.sender)].field_0++
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                    if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                        revert with 0, 'SafeMath: addition overflow'
                                    totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                    require ext_code.size(stor1)
                                    staticcall stor1.0xfc0c546a with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_code.size(address(ext_call.return_data[0]))
                                    call address(ext_call.return_data[0]).0x23b872dd with:
                                         gas gas_remaining wei
                                        args msg.sender, stor1, arg1
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        revert with 0, 
                                                    32,
                                                    46,
                                                    0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                    mem[mem[64] + 114 len 18]
                                    if totalStakingShares <= 0:
                                        mem[mem[64] + 64] = 96
                                        mem[mem[64] + 96] = 0
                                        emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                    arg1,
                                                    0,
                                                    96,
                                                    0,
                                                    mem[mem[64] + 128],
                                                    msg.sender,
                                    else:
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        require ext_code.size(stor1)
                                        staticcall stor1.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _49335 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49335] = 26
                                            mem[_49335 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _49743 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_49743] = 26
                                            mem[_49743 + 32] = 'SafeMath: division by zero'
                                            if totalStakingShares <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require totalStakingShares
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                else:
                                    require ext_code.size(stor2)
                                    staticcall stor2.balance() with:
                                            gas gas_remaining wei
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    if not ext_call.return_data[0]:
                                        _41529 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41529] = 26
                                        mem[_41529 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47062 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47062] = 0
                                        mem[_47062 + 32] = 0
                                        _47445 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47445] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_47445 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _52882 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_52882] = 26
                                                mem[_52882 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53191 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53191] = 26
                                                mem[_53191 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_call.return_data[0]
                                        if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                            revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                        _41957 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41957] = 26
                                        mem[_41957 + 32] = 'SafeMath: division by zero'
                                        if _totalStakingShareSeconds <= 0:
                                            revert with 0, 'SafeMath: division by zero'
                                        require _totalStakingShareSeconds
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _47750 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_47750] = 0
                                        mem[_47750 + 32] = 0
                                        _48115 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_48115] = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        mem[_48115 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + ((100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += (100 * arg1) - (_taxFee * arg1) / 100 * _initialSharesPerToken
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _53190 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53190] = 26
                                                mem[_53190 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _53532 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_53532] = 26
                                                mem[_53532 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
            else:
                require ext_code.size(stor1)
                staticcall stor1.balance() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not totalStakingShares:
                    mem[64] = 224
                    mem[160] = 26
                    mem[192] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if 0 / ext_call.return_data[0] <= 0:
                        revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[330 len 26]
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    mem[224] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not totalLockedShares:
                        if ext_call.return_data[0] > 0:
                            require ext_code.size(stor3)
                            call stor3.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor2, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            47,
                                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                            mem[339 len 17]
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                        _lastAccountingTimestampSec = block.timestamp
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        if _totalStakingShareSeconds <= 0:
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            _userStakes[address(msg.sender)].field_0++
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                revert with 0, 'SafeMath: addition overflow'
                            totalStakingShares += 0 / ext_call.return_data[0]
                            require ext_code.size(stor1)
                            staticcall stor1.0xfc0c546a with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, stor1, arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            46,
                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                            mem[594 len 18]
                            if totalStakingShares <= 0:
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_code.size(stor1)
                                staticcall stor1.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[672],
                                                msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[672],
                                                msg.sender,
                        else:
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0]:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            _userStakes[address(msg.sender)].field_0++
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                revert with 0, 'SafeMath: addition overflow'
                            totalStakingShares += 0 / ext_call.return_data[0]
                            require ext_code.size(stor1)
                            staticcall stor1.0xfc0c546a with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, stor1, arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            46,
                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                            mem[658 len 18]
                            if totalStakingShares <= 0:
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_code.size(stor1)
                                staticcall stor1.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[736],
                                                msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[736],
                                                msg.sender,
                    else:
                        idx = 0
                        while idx < unlockSchedules.length:
                            mem[0] = 15
                            if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                                idx = idx + 1
                                continue 
                            if block.timestamp >= unlockSchedules[idx].field_768:
                                _37031 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37031] = 30
                                mem[_37031 + 32] = 'SafeMath: subtraction overflow'
                                if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                    unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                    if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                    if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    idx = idx + 1
                                    continue 
                                _37101 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37101 + idx + 68] = mem[_37031 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37101 + 68] = mem[_37101 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37101 + -mem[64] + 100
                            _37030 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37030] = 30
                            mem[_37030 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_512 > block.timestamp:
                                _37098 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37098 + idx + 68] = mem[_37030 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37098 + 68] = mem[_37098 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37098 + -mem[64] + 100
                            if not block.timestamp - unlockSchedules[idx].field_512:
                                _37337 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37337] = 26
                                mem[_37337 + 32] = 'SafeMath: division by zero'
                                if unlockSchedules[idx].field_1024 > 0:
                                    require unlockSchedules[idx].field_1024
                                    unlockSchedules[idx].field_512 = block.timestamp
                                    if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                    if 0 / unlockSchedules[idx].field_1024 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    idx = idx + 1
                                    continue 
                                _37390 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[_37390 + idx + 68] = mem[_37337 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37390 + 68] = mem[_37390 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _37390 + -mem[64] + 100
                            require block.timestamp - unlockSchedules[idx].field_512
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37389 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37389] = 26
                            mem[_37389 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                                if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37485 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37485 + idx + 68] = mem[_37389 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37485 + 68] = mem[_37485 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37485 + -mem[64] + 100
                        _37029 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37029] = 26
                        mem[_37029 + 32] = 'SafeMath: division by zero'
                        if totalLockedShares <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalLockedShares
                        _37245 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37245] = 30
                        mem[_37245 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > totalLockedShares:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if 0 / totalLockedShares <= 0:
                            _37525 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37525] = 30
                            mem[_37525 + 32] = 'SafeMath: subtraction overflow'
                            if _lastAccountingTimestampSec > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _lastAccountingTimestampSec:
                                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _37929 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37929] = 30
                                mem[_37929 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _39836 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39836] = 0
                                        mem[_39836 + 32] = 0
                                        _40037 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40037] = 0 / ext_call.return_data[0]
                                        mem[_40037 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45304 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45304] = 26
                                                mem[_45304 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _45773 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45773] = 26
                                                mem[_45773 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39017 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39017] = 26
                                            mem[_39017 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43227 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43227] = 0
                                            mem[_43227 + 32] = 0
                                            _43491 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43491] = 0 / ext_call.return_data[0]
                                            mem[_43491 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49494 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49494] = 26
                                                    mem[_49494 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _49976 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49976] = 26
                                                    mem[_49976 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39223 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39223] = 26
                                            mem[_39223 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43741 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43741] = 0
                                            mem[_43741 + 32] = 0
                                            _44055 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44055] = 0 / ext_call.return_data[0]
                                            mem[_44055 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49975 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49975] = 26
                                                    mem[_49975 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50580 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50580] = 26
                                                    mem[_50580 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40202 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40202] = 0
                                        mem[_40202 + 32] = 0
                                        _40464 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40464] = 0 / ext_call.return_data[0]
                                        mem[_40464 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45771 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45771] = 26
                                                mem[_45771 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46347 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46347] = 26
                                                mem[_46347 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39221 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39221] = 26
                                            mem[_39221 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43738 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43738] = 0
                                            mem[_43738 + 32] = 0
                                            _44049 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44049] = 0 / ext_call.return_data[0]
                                            mem[_44049 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49974 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49974] = 26
                                                    mem[_49974 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50576 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50576] = 26
                                                    mem[_50576 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39502 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39502] = 26
                                            mem[_39502 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44308 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44308] = 0
                                            mem[_44308 + 32] = 0
                                            _44598 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44598] = 0 / ext_call.return_data[0]
                                            mem[_44598 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50575 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50575] = 26
                                                    mem[_50575 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51194 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51194] = 26
                                                    mem[_51194 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                            else:
                                require block.timestamp - _lastAccountingTimestampSec
                                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _37991 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37991] = 30
                                mem[_37991 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40199 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40199] = 0
                                        mem[_40199 + 32] = 0
                                        _40455 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40455] = 0 / ext_call.return_data[0]
                                        mem[_40455 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45769 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45769] = 26
                                                mem[_45769 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46342 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46342] = 26
                                                mem[_46342 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39219 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39219] = 26
                                            mem[_39219 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43733 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43733] = 0
                                            mem[_43733 + 32] = 0
                                            _44043 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44043] = 0 / ext_call.return_data[0]
                                            mem[_44043 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49973 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49973] = 26
                                                    mem[_49973 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50571 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50571] = 26
                                                    mem[_50571 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39497 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39497] = 26
                                            mem[_39497 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44306 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44306] = 0
                                            mem[_44306 + 32] = 0
                                            _44591 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44591] = 0 / ext_call.return_data[0]
                                            mem[_44591 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50570 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50570] = 26
                                                    mem[_50570 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51186 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51186] = 26
                                                    mem[_51186 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40643 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40643] = 0
                                        mem[_40643 + 32] = 0
                                        _40853 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40853] = 0 / ext_call.return_data[0]
                                        mem[_40853 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _46340 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46340] = 26
                                                mem[_46340 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _47012 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_47012] = 26
                                                mem[_47012 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39495 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39495] = 26
                                            mem[_39495 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44303 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44303] = 0
                                            mem[_44303 + 32] = 0
                                            _44585 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44585] = 0 / ext_call.return_data[0]
                                            mem[_44585 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50569 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50569] = 26
                                                    mem[_50569 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51182 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51182] = 26
                                                    mem[_51182 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39817 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39817] = 26
                                            mem[_39817 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44841 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44841] = 0
                                            mem[_44841 + 32] = 0
                                            _45059 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45059] = 0 / ext_call.return_data[0]
                                            mem[_45059 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _51181 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51181] = 26
                                                    mem[_51181 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51701 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51701] = 26
                                                    mem[_51701 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                        else:
                            mem[mem[64] + 36] = 0 / totalLockedShares
                            require ext_code.size(stor3)
                            call stor3.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor2, 0 / totalLockedShares
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            47,
                                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                            mem[mem[64] + 115 len 17]
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 32] = ext_call.return_data[0]
                            emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                            _37863 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37863] = 30
                            mem[_37863 + 32] = 'SafeMath: subtraction overflow'
                            if _lastAccountingTimestampSec > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _lastAccountingTimestampSec:
                                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _38269 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38269] = 30
                                mem[_38269 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _41944 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41944] = 0
                                        mem[_41944 + 32] = 0
                                        _42204 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42204] = 0 / ext_call.return_data[0]
                                        mem[_42204 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48371 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48371] = 26
                                                mem[_48371 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _48903 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48903] = 26
                                                mem[_48903 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _40649 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40649] = 26
                                            mem[_40649 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _45791 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45791] = 0
                                            mem[_45791 + 32] = 0
                                            _46057 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46057] = 0 / ext_call.return_data[0]
                                            mem[_46057 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52155 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52155] = 26
                                                    mem[_52155 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52541 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52541] = 26
                                                    mem[_52541 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41096 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41096] = 26
                                            mem[_41096 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46370 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46370] = 0
                                            mem[_46370 + 32] = 0
                                            _46716 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46716] = 0 / ext_call.return_data[0]
                                            mem[_46716 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52540 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52540] = 26
                                                    mem[_52540 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52873 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52873] = 26
                                                    mem[_52873 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42419 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42419] = 0
                                        mem[_42419 + 32] = 0
                                        _42744 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42744] = 0 / ext_call.return_data[0]
                                        mem[_42744 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48901 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48901] = 26
                                                mem[_48901 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49322 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49322] = 26
                                                mem[_49322 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _41094 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41094] = 26
                                            mem[_41094 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46367 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46367] = 0
                                            mem[_46367 + 32] = 0
                                            _46710 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46710] = 0 / ext_call.return_data[0]
                                            mem[_46710 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52539 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52539] = 26
                                                    mem[_52539 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52869 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52869] = 26
                                                    mem[_52869 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41504 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41504] = 26
                                            mem[_41504 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47037 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47037] = 0
                                            mem[_47037 + 32] = 0
                                            _47416 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47416] = 0 / ext_call.return_data[0]
                                            mem[_47416 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52868 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52868] = 26
                                                    mem[_52868 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53176 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53176] = 26
                                                    mem[_53176 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                            else:
                                require block.timestamp - _lastAccountingTimestampSec
                                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _38353 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38353] = 30
                                mem[_38353 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42416 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42416] = 0
                                        mem[_42416 + 32] = 0
                                        _42735 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42735] = 0 / ext_call.return_data[0]
                                        mem[_42735 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48899 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48899] = 26
                                                mem[_48899 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49317 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49317] = 26
                                                mem[_49317 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _41092 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41092] = 26
                                            mem[_41092 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46362 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46362] = 0
                                            mem[_46362 + 32] = 0
                                            _46704 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46704] = 0 / ext_call.return_data[0]
                                            mem[_46704 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52538 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52538] = 26
                                                    mem[_52538 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52864 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52864] = 26
                                                    mem[_52864 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41499 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41499] = 26
                                            mem[_41499 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47035 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47035] = 0
                                            mem[_47035 + 32] = 0
                                            _47409 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47409] = 0 / ext_call.return_data[0]
                                            mem[_47409 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52863 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52863] = 26
                                                    mem[_52863 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53168 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53168] = 26
                                                    mem[_53168 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42949 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42949] = 0
                                        mem[_42949 + 32] = 0
                                        _43234 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43234] = 0 / ext_call.return_data[0]
                                        mem[_43234 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += 0 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49315 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49315] = 26
                                                mem[_49315 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49718 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49718] = 26
                                                mem[_49718 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _41497 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41497] = 26
                                            mem[_41497 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47032 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47032] = 0
                                            mem[_47032 + 32] = 0
                                            _47403 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47403] = 0 / ext_call.return_data[0]
                                            mem[_47403 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52862 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52862] = 26
                                                    mem[_52862 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53164 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53164] = 26
                                                    mem[_53164 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41925 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41925] = 26
                                            mem[_41925 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (0 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += 0 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47724 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47724] = 0
                                            mem[_47724 + 32] = 0
                                            _48075 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48075] = 0 / ext_call.return_data[0]
                                            mem[_48075 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = 0 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (0 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += 0 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _53163 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53163] = 26
                                                    mem[_53163 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53509 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53509] = 26
                                                    mem[_53509 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                else:
                    require totalStakingShares
                    if totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / totalStakingShares != (100 * arg1) - (_taxFee * arg1) / 100:
                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[261 len 31]
                    mem[64] = 224
                    mem[160] = 26
                    mem[192] = 'SafeMath: division by zero'
                    if ext_call.return_data[0] <= 0:
                        revert with 0, 'SafeMath: division by zero'
                    require ext_call.return_data[0]
                    if totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0] <= 0:
                        revert with 0, 32, 38, 0x64546f6b656e4765797365723a205374616b6520616d6f756e7420697320746f6f20736d616c, mem[330 len 26]
                    require ext_code.size(stor3)
                    staticcall stor3.balance() with:
                            gas gas_remaining wei
                    mem[224] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not totalLockedShares:
                        if ext_call.return_data[0] > 0:
                            require ext_code.size(stor3)
                            call stor3.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor2, ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            47,
                                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                            mem[339 len 17]
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            emit TokensUnlocked(ext_call.return_data[0], ext_call.return_data[0]);
                        if _lastAccountingTimestampSec > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _lastAccountingTimestampSec:
                            if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require block.timestamp - _lastAccountingTimestampSec
                            if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[389 len 31]
                            if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                revert with 0, 'SafeMath: addition overflow'
                            _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                        _lastAccountingTimestampSec = block.timestamp
                        if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                            if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                        else:
                            require block.timestamp - _userTotals[address(msg.sender)].field_512
                            if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                        if _totalStakingShareSeconds <= 0:
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            _userStakes[address(msg.sender)].field_0++
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                revert with 0, 'SafeMath: addition overflow'
                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            require ext_code.size(stor1)
                            staticcall stor1.0xfc0c546a with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, stor1, arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            46,
                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                            mem[594 len 18]
                            if totalStakingShares <= 0:
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0,
                                            96,
                                            0,
                                            mem[608],
                                            msg.sender,
                            else:
                                require ext_code.size(stor1)
                                staticcall stor1.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[672],
                                                msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[581 len 31]
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[672],
                                                msg.sender,
                        else:
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if ext_call.return_data[0]:
                                require ext_call.return_data[0]
                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[453 len 31]
                            if _totalStakingShareSeconds <= 0:
                                revert with 0, 'SafeMath: division by zero'
                            require _totalStakingShareSeconds
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(stor2)
                            staticcall stor2.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                revert with 0, 'SafeMath: addition overflow'
                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                            _userStakes[address(msg.sender)].field_0++
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                revert with 0, 'SafeMath: addition overflow'
                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                            require ext_code.size(stor1)
                            staticcall stor1.0xfc0c546a with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_code.size(address(ext_call.return_data[0]))
                            call address(ext_call.return_data[0]).0x23b872dd with:
                                 gas gas_remaining wei
                                args msg.sender, stor1, arg1
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            46,
                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                            mem[658 len 18]
                            if totalStakingShares <= 0:
                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                            arg1,
                                            0,
                                            96,
                                            0,
                                            mem[672],
                                            msg.sender,
                            else:
                                require ext_code.size(stor1)
                                staticcall stor1.balance() with:
                                        gas gas_remaining wei
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if not ext_call.return_data[0]:
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[736],
                                                msg.sender,
                                else:
                                    require ext_call.return_data[0]
                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[645 len 31]
                                    if totalStakingShares <= 0:
                                        revert with 0, 'SafeMath: division by zero'
                                    require totalStakingShares
                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                arg1,
                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                96,
                                                0,
                                                mem[736],
                                                msg.sender,
                    else:
                        idx = 0
                        while idx < unlockSchedules.length:
                            mem[0] = 15
                            if unlockSchedules[idx].field_256 >= unlockSchedules[idx].field_0:
                                idx = idx + 1
                                continue 
                            if block.timestamp >= unlockSchedules[idx].field_768:
                                _37028 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37028] = 30
                                mem[_37028 + 32] = 'SafeMath: subtraction overflow'
                                if unlockSchedules[idx].field_256 <= unlockSchedules[idx].field_0:
                                    unlockSchedules[idx].field_512 = unlockSchedules[idx].field_768
                                    if unlockSchedules[idx].field_0 < unlockSchedules[idx].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    unlockSchedules[idx].field_256 = unlockSchedules[idx].field_0
                                    if unlockSchedules[idx].field_0 - unlockSchedules[idx].field_256 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    idx = idx + 1
                                    continue 
                                _37092 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37092 + idx + 68] = mem[_37028 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37092 + 68] = mem[_37092 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37092 + -mem[64] + 100
                            _37027 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37027] = 30
                            mem[_37027 + 32] = 'SafeMath: subtraction overflow'
                            if unlockSchedules[idx].field_512 > block.timestamp:
                                _37089 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 30
                                idx = 0
                                while idx < 30:
                                    mem[_37089 + idx + 68] = mem[_37027 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37089 + 68] = mem[_37089 + 70 len 30]
                                revert with memory
                                  from mem[64]
                                   len _37089 + -mem[64] + 100
                            if not block.timestamp - unlockSchedules[idx].field_512:
                                _37336 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37336] = 26
                                mem[_37336 + 32] = 'SafeMath: division by zero'
                                if unlockSchedules[idx].field_1024 > 0:
                                    require unlockSchedules[idx].field_1024
                                    unlockSchedules[idx].field_512 = block.timestamp
                                    if unlockSchedules[idx].field_256 + (0 / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    unlockSchedules[idx].field_256 += 0 / unlockSchedules[idx].field_1024
                                    if 0 / unlockSchedules[idx].field_1024 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    idx = idx + 1
                                    continue 
                                _37384 = mem[64]
                                mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                                mem[mem[64] + 4] = 32
                                mem[mem[64] + 36] = 26
                                idx = 0
                                while idx < 26:
                                    mem[_37384 + idx + 68] = mem[_37336 + idx + 32]
                                    idx = idx + 32
                                    continue 
                                mem[_37384 + 68] = mem[_37384 + 74 len 26]
                                revert with memory
                                  from mem[64]
                                   len _37384 + -mem[64] + 100
                            require block.timestamp - unlockSchedules[idx].field_512
                            if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / block.timestamp - unlockSchedules[idx].field_512 != unlockSchedules[idx].field_0:
                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                            _37383 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37383] = 26
                            mem[_37383 + 32] = 'SafeMath: division by zero'
                            if unlockSchedules[idx].field_1024 > 0:
                                require unlockSchedules[idx].field_1024
                                unlockSchedules[idx].field_512 = block.timestamp
                                if unlockSchedules[idx].field_256 + ((block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024) < unlockSchedules[idx].field_256:
                                    revert with 0, 'SafeMath: addition overflow'
                                unlockSchedules[idx].field_256 += (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024
                                if (block.timestamp * unlockSchedules[idx].field_0) - (unlockSchedules[idx].field_512 * unlockSchedules[idx].field_0) / unlockSchedules[idx].field_1024 < 0:
                                    revert with 0, 'SafeMath: addition overflow'
                                idx = idx + 1
                                continue 
                            _37481 = mem[64]
                            mem[mem[64]] = 0x8c379a000000000000000000000000000000000000000000000000000000000
                            mem[mem[64] + 4] = 32
                            mem[mem[64] + 36] = 26
                            idx = 0
                            while idx < 26:
                                mem[_37481 + idx + 68] = mem[_37383 + idx + 32]
                                idx = idx + 32
                                continue 
                            mem[_37481 + 68] = mem[_37481 + 74 len 26]
                            revert with memory
                              from mem[64]
                               len _37481 + -mem[64] + 100
                        _37026 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37026] = 26
                        mem[_37026 + 32] = 'SafeMath: division by zero'
                        if totalLockedShares <= 0:
                            revert with 0, 'SafeMath: division by zero'
                        require totalLockedShares
                        _37241 = mem[64]
                        mem[64] = mem[64] + 64
                        mem[_37241] = 30
                        mem[_37241 + 32] = 'SafeMath: subtraction overflow'
                        if 0 > totalLockedShares:
                            revert with 0, 'SafeMath: subtraction overflow'
                        if 0 / totalLockedShares <= 0:
                            _37521 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37521] = 30
                            mem[_37521 + 32] = 'SafeMath: subtraction overflow'
                            if _lastAccountingTimestampSec > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _lastAccountingTimestampSec:
                                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _37923 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37923] = 30
                                mem[_37923 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _39810 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_39810] = 0
                                        mem[_39810 + 32] = 0
                                        _40019 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40019] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_40019 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45280 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45280] = 26
                                                mem[_45280 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _45744 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45744] = 26
                                                mem[_45744 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39011 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39011] = 26
                                            mem[_39011 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43190 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43190] = 0
                                            mem[_43190 + 32] = 0
                                            _43470 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43470] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_43470 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49477 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49477] = 26
                                                    mem[_49477 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _49949 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49949] = 26
                                                    mem[_49949 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39210 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39210] = 26
                                            mem[_39210 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43715 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43715] = 0
                                            mem[_43715 + 32] = 0
                                            _44020 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44020] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44020 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49948 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49948] = 26
                                                    mem[_49948 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50537 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50537] = 26
                                                    mem[_50537 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40187 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40187] = 0
                                        mem[_40187 + 32] = 0
                                        _40431 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40431] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_40431 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45742 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45742] = 26
                                                mem[_45742 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46314 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46314] = 26
                                                mem[_46314 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39208 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39208] = 26
                                            mem[_39208 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43712 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43712] = 0
                                            mem[_43712 + 32] = 0
                                            _44014 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44014] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44014 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49947 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49947] = 26
                                                    mem[_49947 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50533 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50533] = 26
                                                    mem[_50533 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39478 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39478] = 26
                                            mem[_39478 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44288 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44288] = 0
                                            mem[_44288 + 32] = 0
                                            _44564 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44564] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44564 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50532 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50532] = 26
                                                    mem[_50532 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51149 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51149] = 26
                                                    mem[_51149 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                            else:
                                require block.timestamp - _lastAccountingTimestampSec
                                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _37986 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_37986] = 30
                                mem[_37986 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40184 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40184] = 0
                                        mem[_40184 + 32] = 0
                                        _40422 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40422] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_40422 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _45740 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_45740] = 26
                                                mem[_45740 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46309 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46309] = 26
                                                mem[_46309 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39206 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39206] = 26
                                            mem[_39206 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _43707 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_43707] = 0
                                            mem[_43707 + 32] = 0
                                            _44008 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44008] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44008 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _49946 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_49946] = 26
                                                    mem[_49946 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _50528 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50528] = 26
                                                    mem[_50528 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39473 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39473] = 26
                                            mem[_39473 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44286 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44286] = 0
                                            mem[_44286 + 32] = 0
                                            _44557 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44557] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44557 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50527 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50527] = 26
                                                    mem[_50527 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51141 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51141] = 26
                                                    mem[_51141 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _40633 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40633] = 0
                                        mem[_40633 + 32] = 0
                                        _40825 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_40825] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_40825 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _46307 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46307] = 26
                                                mem[_46307 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _46982 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_46982] = 26
                                                mem[_46982 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _39471 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39471] = 26
                                            mem[_39471 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44283 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44283] = 0
                                            mem[_44283 + 32] = 0
                                            _44551 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44551] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_44551 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _50526 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_50526] = 26
                                                    mem[_50526 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51137 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51137] = 26
                                                    mem[_51137 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _39791 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_39791] = 26
                                            mem[_39791 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _44821 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_44821] = 0
                                            mem[_44821 + 32] = 0
                                            _45036 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45036] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_45036 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _51136 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51136] = 26
                                                    mem[_51136 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _51671 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_51671] = 26
                                                    mem[_51671 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                        else:
                            mem[mem[64] + 36] = 0 / totalLockedShares
                            require ext_code.size(stor3)
                            call stor3.0xa9059cbb with:
                                 gas gas_remaining wei
                                args stor2, 0 / totalLockedShares
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if not ext_call.return_data[0]:
                                revert with 0, 
                                            32,
                                            47,
                                            0x6f546f6b656e4765797365723a207472616e73666572206f7574206f66206c6f636b656420706f6f6c206661696c65,
                                            mem[mem[64] + 115 len 17]
                            require ext_code.size(stor3)
                            staticcall stor3.balance() with:
                                    gas gas_remaining wei
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            mem[mem[64] + 32] = ext_call.return_data[0]
                            emit TokensUnlocked(0 / totalLockedShares, ext_call.return_data[0]);
                            _37858 = mem[64]
                            mem[64] = mem[64] + 64
                            mem[_37858] = 30
                            mem[_37858 + 32] = 'SafeMath: subtraction overflow'
                            if _lastAccountingTimestampSec > block.timestamp:
                                revert with 0, 'SafeMath: subtraction overflow'
                            if not block.timestamp - _lastAccountingTimestampSec:
                                if _totalStakingShareSeconds < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _38262 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38262] = 30
                                mem[_38262 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _41912 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_41912] = 0
                                        mem[_41912 + 32] = 0
                                        _42180 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42180] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_42180 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48348 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48348] = 26
                                                mem[_48348 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _48885 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48885] = 26
                                                mem[_48885 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _40639 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_40639] = 26
                                            mem[_40639 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _45762 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_45762] = 0
                                            mem[_45762 + 32] = 0
                                            _46031 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46031] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_46031 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52140 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52140] = 26
                                                    mem[_52140 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52529 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52529] = 26
                                                    mem[_52529 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41076 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41076] = 26
                                            mem[_41076 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46337 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46337] = 0
                                            mem[_46337 + 32] = 0
                                            _46680 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46680] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_46680 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52528 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52528] = 26
                                                    mem[_52528 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52853 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52853] = 26
                                                    mem[_52853 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42399 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42399] = 0
                                        mem[_42399 + 32] = 0
                                        _42705 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42705] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_42705 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48883 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48883] = 26
                                                mem[_48883 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49302 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49302] = 26
                                                mem[_49302 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _41074 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41074] = 26
                                            mem[_41074 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46334 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46334] = 0
                                            mem[_46334 + 32] = 0
                                            _46674 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46674] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_46674 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52527 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52527] = 26
                                                    mem[_52527 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52849 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52849] = 26
                                                    mem[_52849 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41472 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41472] = 26
                                            mem[_41472 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47007 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47007] = 0
                                            mem[_47007 + 32] = 0
                                            _47374 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47374] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_47374 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52848 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52848] = 26
                                                    mem[_52848 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53149 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53149] = 26
                                                    mem[_53149 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                            else:
                                require block.timestamp - _lastAccountingTimestampSec
                                if (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) / block.timestamp - _lastAccountingTimestampSec != totalStakingShares:
                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                if _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares) < _totalStakingShareSeconds:
                                    revert with 0, 'SafeMath: addition overflow'
                                _totalStakingShareSeconds = _totalStakingShareSeconds + (block.timestamp * totalStakingShares) - (_lastAccountingTimestampSec * totalStakingShares)
                                _lastAccountingTimestampSec = block.timestamp
                                mem[0] = msg.sender
                                mem[32] = 13
                                _38345 = mem[64]
                                mem[64] = mem[64] + 64
                                mem[_38345] = 30
                                mem[_38345 + 32] = 'SafeMath: subtraction overflow'
                                if _userTotals[address(msg.sender)].field_512 > block.timestamp:
                                    revert with 0, 'SafeMath: subtraction overflow'
                                if not block.timestamp - _userTotals[address(msg.sender)].field_512:
                                    if _userTotals[address(msg.sender)].field_256 < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42396 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42396] = 0
                                        mem[_42396 + 32] = 0
                                        _42696 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42696] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_42696 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _48881 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_48881] = 26
                                                mem[_48881 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49297 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49297] = 26
                                                mem[_49297 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _41072 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41072] = 26
                                            mem[_41072 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _46329 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46329] = 0
                                            mem[_46329 + 32] = 0
                                            _46668 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_46668] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_46668 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52526 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52526] = 26
                                                    mem[_52526 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _52844 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52844] = 26
                                                    mem[_52844 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41467 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41467] = 26
                                            mem[_41467 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47005 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47005] = 0
                                            mem[_47005 + 32] = 0
                                            _47367 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47367] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_47367 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52843 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52843] = 26
                                                    mem[_52843 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53141 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53141] = 26
                                                    mem[_53141 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                else:
                                    require block.timestamp - _userTotals[address(msg.sender)].field_512
                                    if (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) / block.timestamp - _userTotals[address(msg.sender)].field_512 != _userTotals[address(msg.sender)].field_0:
                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                    if _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0) < _userTotals[address(msg.sender)].field_256:
                                        revert with 0, 'SafeMath: addition overflow'
                                    _userTotals[address(msg.sender)].field_256 = _userTotals[address(msg.sender)].field_256 + (block.timestamp * _userTotals[address(msg.sender)].field_0) - (_userTotals[address(msg.sender)].field_512 * _userTotals[address(msg.sender)].field_0)
                                    _userTotals[address(msg.sender)].field_512 = block.timestamp
                                    if _totalStakingShareSeconds <= 0:
                                        require ext_code.size(stor3)
                                        staticcall stor3.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        mem[0] = msg.sender
                                        mem[32] = 13
                                        if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                            revert with 0, 'SafeMath: addition overflow'
                                        _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userTotals[address(msg.sender)].field_512 = block.timestamp
                                        _42937 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_42937] = 0
                                        mem[_42937 + 32] = 0
                                        _43197 = mem[64]
                                        mem[64] = mem[64] + 64
                                        mem[_43197] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        mem[_43197 + 32] = block.timestamp
                                        mem[32] = 14
                                        _userStakes[address(msg.sender)].field_0++
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                        if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                            revert with 0, 'SafeMath: addition overflow'
                                        totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                        require ext_code.size(stor1)
                                        staticcall stor1.0xfc0c546a with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_code.size(address(ext_call.return_data[0]))
                                        call address(ext_call.return_data[0]).0x23b872dd with:
                                             gas gas_remaining wei
                                            args msg.sender, stor1, arg1
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            revert with 0, 
                                                        32,
                                                        46,
                                                        0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                        mem[mem[64] + 114 len 18]
                                        if totalStakingShares <= 0:
                                            mem[mem[64] + 64] = 96
                                            mem[mem[64] + 96] = 0
                                            emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                        arg1,
                                                        0,
                                                        96,
                                                        0,
                                                        mem[mem[64] + 128],
                                                        msg.sender,
                                        else:
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            require ext_code.size(stor1)
                                            staticcall stor1.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                _49295 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49295] = 26
                                                mem[_49295 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                require ext_call.return_data[0]
                                                if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                    revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                _49693 = mem[64]
                                                mem[64] = mem[64] + 64
                                                mem[_49693] = 26
                                                mem[_49693 + 32] = 'SafeMath: division by zero'
                                                if totalStakingShares <= 0:
                                                    revert with 0, 'SafeMath: division by zero'
                                                require totalStakingShares
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                    else:
                                        require ext_code.size(stor2)
                                        staticcall stor2.balance() with:
                                                gas gas_remaining wei
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if not ext_call.return_data[0]:
                                            _41465 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41465] = 26
                                            mem[_41465 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47002 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47002] = 0
                                            mem[_47002 + 32] = 0
                                            _47361 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47361] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_47361 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _52842 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_52842] = 26
                                                    mem[_52842 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53137 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53137] = 26
                                                    mem[_53137 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                        else:
                                            require ext_call.return_data[0]
                                            if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_256 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_256:
                                                revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                            _41893 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_41893] = 26
                                            mem[_41893 + 32] = 'SafeMath: division by zero'
                                            if _totalStakingShareSeconds <= 0:
                                                revert with 0, 'SafeMath: division by zero'
                                            require _totalStakingShareSeconds
                                            require ext_code.size(stor3)
                                            staticcall stor3.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(stor2)
                                            staticcall stor2.balance() with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            mem[0] = msg.sender
                                            mem[32] = 13
                                            if _userTotals[address(msg.sender)].field_0 + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < _userTotals[address(msg.sender)].field_0:
                                                revert with 0, 'SafeMath: addition overflow'
                                            _userTotals[address(msg.sender)].field_0 += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userTotals[address(msg.sender)].field_512 = block.timestamp
                                            _47698 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_47698] = 0
                                            mem[_47698 + 32] = 0
                                            _48035 = mem[64]
                                            mem[64] = mem[64] + 64
                                            mem[_48035] = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            mem[_48035 + 32] = block.timestamp
                                            mem[32] = 14
                                            _userStakes[address(msg.sender)].field_0++
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_0 = totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            _userStakes[address(msg.sender)][_userStakes[address(msg.sender)].field_0].field_256 = block.timestamp
                                            if totalStakingShares + (totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]) < totalStakingShares:
                                                revert with 0, 'SafeMath: addition overflow'
                                            totalStakingShares += totalStakingShares * (100 * arg1) - (_taxFee * arg1) / 100 / ext_call.return_data[0]
                                            require ext_code.size(stor1)
                                            staticcall stor1.0xfc0c546a with:
                                                    gas gas_remaining wei
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            require ext_code.size(address(ext_call.return_data[0]))
                                            call address(ext_call.return_data[0]).0x23b872dd with:
                                                 gas gas_remaining wei
                                                args msg.sender, stor1, arg1
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            require return_data.size >= 32
                                            if not ext_call.return_data[0]:
                                                revert with 0, 
                                                            32,
                                                            46,
                                                            0x6f546f6b656e4765797365723a207472616e7366657220696e746f207374616b696e6720706f6f6c206661696c65,
                                                            mem[mem[64] + 114 len 18]
                                            if totalStakingShares <= 0:
                                                mem[mem[64] + 64] = 96
                                                mem[mem[64] + 96] = 0
                                                emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                            arg1,
                                                            0,
                                                            96,
                                                            0,
                                                            mem[mem[64] + 128],
                                                            msg.sender,
                                            else:
                                                mem[0] = msg.sender
                                                mem[32] = 13
                                                require ext_code.size(stor1)
                                                staticcall stor1.balance() with:
                                                        gas gas_remaining wei
                                                if not ext_call.success:
                                                    revert with ext_call.return_data[0 len return_data.size]
                                                require return_data.size >= 32
                                                if not ext_call.return_data[0]:
                                                    _53136 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53136] = 26
                                                    mem[_53136 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
                                                else:
                                                    require ext_call.return_data[0]
                                                    if ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / ext_call.return_data[0] != _userTotals[address(msg.sender)].field_0:
                                                        revert with 0, 32, 33, 0x6f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[mem[64] + 101 len 31]
                                                    _53486 = mem[64]
                                                    mem[64] = mem[64] + 64
                                                    mem[_53486] = 26
                                                    mem[_53486 + 32] = 'SafeMath: division by zero'
                                                    if totalStakingShares <= 0:
                                                        revert with 0, 'SafeMath: division by zero'
                                                    require totalStakingShares
                                                    mem[mem[64] + 64] = 96
                                                    mem[mem[64] + 96] = 0
                                                    emit Staked(address arg1, uint256 arg2, uint256 arg3, bytes arg4):
                                                                arg1,
                                                                ext_call.return_data[0] * _userTotals[address(msg.sender)].field_0 / totalStakingShares,
                                                                96,
                                                                0,
                                                                mem[mem[64] + 128],
                                                                msg.sender,
}



}
